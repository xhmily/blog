{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/ad/source/css/index.css","path":"css/index.css","modified":0,"renderable":1},{"_id":"themes/ad/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/ad/source/css/myStyle.css","path":"css/myStyle.css","modified":1,"renderable":1},{"_id":"themes/ad/source/js/backTop.js","path":"js/backTop.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/auth.js","path":"js/auth.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/header.js","path":"js/header.js","modified":1,"renderable":1},{"_id":"themes/ad/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/layer.js","path":"js/layer.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/mathjax.js","path":"js/mathjax.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/passage.js","path":"js/passage.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/reward.js","path":"js/reward.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/ad/source/js/time.js","path":"js/time.js","modified":0,"renderable":1},{"_id":"themes/ad/source/images/favicon.jpg","path":"images/favicon.jpg","modified":0,"renderable":1},{"_id":"themes/ad/source/images/favicon1.ico","path":"images/favicon1.ico","modified":0,"renderable":1},{"_id":"themes/ad/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/ad/source/images/touch-icon.jpg","path":"images/touch-icon.jpg","modified":0,"renderable":1},{"_id":"themes/ad/source/images/wechat.png","path":"images/wechat.png","modified":0,"renderable":1},{"_id":"themes/ad/source/images/touch-icon.png","path":"images/touch-icon.png","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/global.scss","path":"styles/global.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/index.scss","path":"styles/index.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/vendor/qrcode.min.js","path":"vendor/qrcode.min.js","modified":0,"renderable":1},{"_id":"themes/ad/source/vendor/sha256.min.js","path":"vendor/sha256.min.js","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/components/bottom-bar.scss","path":"styles/components/bottom-bar.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/components/comment.scss","path":"styles/components/comment.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/components/index.scss","path":"styles/components/index.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/components/share.scss","path":"styles/components/share.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/components/toc.scss","path":"styles/components/toc.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/layout/about.scss","path":"styles/layout/about.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/layout/friend.scss","path":"styles/layout/friend.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/layout/home.scss","path":"styles/layout/home.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/layout/index.scss","path":"styles/layout/index.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/layout/passage.scss","path":"styles/layout/passage.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/layout/set.scss","path":"styles/layout/set.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/layout/timeline.scss","path":"styles/layout/timeline.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/mixins/color.scss","path":"styles/mixins/color.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/mixins/font.scss","path":"styles/mixins/font.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/mixins/index.scss","path":"styles/mixins/index.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/partials/footer.scss","path":"styles/partials/footer.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/partials/header.scss","path":"styles/partials/header.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/partials/index.scss","path":"styles/partials/index.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/components/layer.scss","path":"styles/components/layer.scss","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/components/highlight/diff.styl","path":"styles/components/highlight/diff.styl","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/components/highlight/highlight.styl","path":"styles/components/highlight/highlight.styl","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/components/highlight/theme.styl","path":"styles/components/highlight/theme.styl","modified":0,"renderable":1},{"_id":"themes/ad/source/styles/components/highlight/var.styl","path":"styles/components/highlight/var.styl","modified":0,"renderable":1},{"_id":"themes/ad/source/images/Automata.jpg","path":"images/Automata.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/ad/LICENSE","hash":"3f8a68c846958c6e4dcd7bdacd016c0711553a98","modified":1562550549472},{"_id":"themes/ad/_config.yml","hash":"68669ccc00b3e2f8d617bf194d5361ac92681a8e","modified":1562552160743},{"_id":"themes/ad/README.md","hash":"c632a4e532c7659713ab0974c64ee39c979a25c8","modified":1562550549472},{"_id":"themes/ad/package.json","hash":"90b47ed3b531489797112c22e984f00baefac808","modified":1562550549533},{"_id":"source/_posts/Dayz独立版-服务器物资管理系统使用教程.md","hash":"1f2a7ea3325d4d92f3c6de82cf4e0aa343ed7d62","modified":1562550549360},{"_id":"source/_posts/CentOS安装Supervisor守护进程并开机启动.md","hash":"d7027de05c300771eb3eea678fb8d0fcfbb14ff3","modified":1562550549359},{"_id":"source/_posts/Docker学习笔记（一）Docker入门简介.md","hash":"d1a661710d644aae30c0b7b97cff77e9928c9df1","modified":1562550549360},{"_id":"source/_posts/Docker学习笔记（三）Docker常用命令.md","hash":"5d62cc965a4de45b6f7b40789a4a53c16fafca00","modified":1562550549361},{"_id":"source/_posts/Docker学习笔记（二）Docker-V18-03-安装配置.md","hash":"fc13bf8064a0bdb106641f2b6f29fd3b97e54779","modified":1562550549446},{"_id":"source/_posts/Linux安装screen命令.md","hash":"acef16fd6d69e22900138e7b45a803070ccf4739","modified":1562550549449},{"_id":"source/_posts/Redis学习笔记（一）redis安装（Centos7）和简单存取数据.md","hash":"5a8ca473883dec6472ee8d04db4fc3f835a134c6","modified":1562553295778},{"_id":"source/_posts/Redis学习笔记（三）Redis字符串-String.md","hash":"166857a7d61d1f8bf9deb8d8316bda3f23d82cab","modified":1562554065200},{"_id":"source/_posts/Redis学习笔记（二）Redis-键-key.md","hash":"3b31eec12322148327d973b194a822ed247e4a6c","modified":1562554048896},{"_id":"source/_posts/javascript实现图片上传预览.md","hash":"82f91d8df5b08be5177bf8d98f1125306355d181","modified":1562550549460},{"_id":"source/_posts/Redis学习笔记（四）主从复制及启动哨兵模式.md","hash":"7daff1ac44ee511dc0a54ca9d6eb04f360221755","modified":1562554072779},{"_id":"source/_posts/hello-world.md","hash":"a66f29d8d45ff04ab4151de84fd3abcdfc5cefa5","modified":1562552438658},{"_id":"source/_posts/linux使用crontab命令指定时间段内随机执行任务.md","hash":"ea5daadf47c431d1c6fcb5c1618f553e0a4462ca","modified":1562550549462},{"_id":"source/_posts/shell命令-crontab-php实现每天特定时间段内随机时间执行任务.md","hash":"d2c81e9ee7f42aa2fa389b466984c5c85a7eed7b","modified":1562550549463},{"_id":"source/friends/index.md","hash":"be1789dd8f75a18030e41fb938c261330c3e6951","modified":1562550549469},{"_id":"source/about/index.md","hash":"ba8b82fef0a369371b6b5dabb7156b15e72918d3","modified":1562550549465},{"_id":"source/categories/index.md","hash":"1574310662f05769ac063930c8feab61e98d393e","modified":1562550549466},{"_id":"source/tags/index.md","hash":"6a11ac7e23afddea903cbd843d34d44e588e33ed","modified":1562550549470},{"_id":"themes/ad/docs/中文文档.md","hash":"760c90b18b8b396742de032cad290a9b37564fae","modified":1562550549474},{"_id":"themes/ad/docs/README.cn.md","hash":"141f3a139d06978c828846f924d02a89eab24e53","modified":1562550549473},{"_id":"themes/ad/docs/常见问题.md","hash":"b2616578e81c3291f54870c551345d5265f1aae7","modified":1562550549474},{"_id":"themes/ad/layout/about.ejs","hash":"79126abf089aed94d5a2e54dd4b68cd1a122d06d","modified":1562550549475},{"_id":"themes/ad/layout/archive.ejs","hash":"d5b01b0108b300c70375428902033e20557f25de","modified":1562550549475},{"_id":"themes/ad/layout/categories.ejs","hash":"9e87269bab4a4b03049377e2d4fda934c12544e1","modified":1562550549476},{"_id":"themes/ad/layout/category.ejs","hash":"94d5cbba18a3c3bb78c8604df5fd2c965af5399e","modified":1562550549476},{"_id":"themes/ad/layout/friends.ejs","hash":"ccb84dbaf58f08975866cb386b1398fa1df0062d","modified":1562550549496},{"_id":"themes/ad/layout/index.ejs","hash":"59a5c87130a1fd0a5e6f234283ab7e915674cbf7","modified":1562550549513},{"_id":"themes/ad/layout/layout.ejs","hash":"4543d2197bb0054187f1961e894deb3c3fff3149","modified":1562550549516},{"_id":"themes/ad/layout/passage.ejs","hash":"7ae0f63287bb9741f879f0ccd90953f14b45d754","modified":1562550549527},{"_id":"themes/ad/layout/tag.ejs","hash":"14de99514531f8f38b0045d1a0426cbdebea7eda","modified":1562550549531},{"_id":"themes/ad/layout/post.ejs","hash":"ef7268667a62fcbd79536ed27c8e9fcfc0a271f1","modified":1562550549529},{"_id":"themes/ad/layout/tags.ejs","hash":"b33acb595fb0c2336f5c7d3d311192afc74dad2e","modified":1562550549532},{"_id":"themes/ad/scripts/filter.js","hash":"d8970c0dbb64193988fa7328dfc4b799c4553710","modified":1562550549557},{"_id":"themes/ad/layout/components/analytics.ejs","hash":"f526fa556a8d1d734249bb20c03acfcadf895e8f","modified":1562550549476},{"_id":"themes/ad/layout/components/bottom-bar.ejs","hash":"4998fea211afa9002f1d3d0740ae624b0c12089d","modified":1562550549477},{"_id":"themes/ad/layout/components/comment.ejs","hash":"2765528e51e250d99561ce40993302e7f41d55d5","modified":1562550549478},{"_id":"themes/ad/layout/components/layer.ejs","hash":"e7bf818ae185505039e803fdfce4b5977ef2eee9","modified":1562550549479},{"_id":"themes/ad/layout/components/config.ejs","hash":"361cbdcd2b912cd1c1f47570b9b1a7ac10596a9b","modified":1562550549478},{"_id":"themes/ad/layout/components/toc.ejs","hash":"80169c8926818d28005f9177d625ffc3688b3d96","modified":1562550549494},{"_id":"themes/ad/layout/components/share.ejs","hash":"edc5d7ce0390634d6c1af809ba0e1477842f0b5a","modified":1562550549480},{"_id":"themes/ad/layout/partials/footer.ejs","hash":"e586f0d4b5c70f1faef196fdd8f424e038a313d4","modified":1562550549519},{"_id":"themes/ad/layout/partials/header.ejs","hash":"0cf9c534c688b335f21df2d9c8e206531123c32d","modified":1562550549525},{"_id":"themes/ad/layout/partials/head.ejs","hash":"0dde26fadf0e5134d91ffcf187e06e03ae502fc5","modified":1562553620349},{"_id":"themes/ad/source/css/index.css","hash":"6a541eea335df710f1fb8dcce48f7485dfab5a30","modified":1562550549558},{"_id":"themes/ad/source/js/copy.js","hash":"902fe6c84d2ebbfb37e1f91f37646bea20db8c05","modified":1562550549567},{"_id":"themes/ad/source/css/myStyle.css","hash":"193c140b32f41639090d48fc21664e8a2e9860b5","modified":1562550549559},{"_id":"themes/ad/source/js/backTop.js","hash":"237a50a872e2fe8343353bbe18fabb3c1681f0d0","modified":1562550549567},{"_id":"themes/ad/source/js/auth.js","hash":"65833588caa77be788aea02fc87e1eaeda55694a","modified":1562550549566},{"_id":"themes/ad/source/js/fancybox.js","hash":"92d3de791e3abe33e002eac24331db41a8991695","modified":1562550549568},{"_id":"themes/ad/source/js/header.js","hash":"f0b92ddf7df3c5913d50f189c7f5e320766edaba","modified":1562550549568},{"_id":"themes/ad/source/js/index.js","hash":"2575e6a1cd7d30e006862bedbefc034220401da0","modified":1562550549568},{"_id":"themes/ad/source/js/layer.js","hash":"dc17348c7bef8a78f9a258d2f25864853ee4a576","modified":1562550549807},{"_id":"themes/ad/source/js/leancloud.js","hash":"e91b45003ab747ca9162f83d033a572b00c86be5","modified":1562550549808},{"_id":"themes/ad/source/js/mathjax.js","hash":"3c58ffe041c6e124c5d927d0e7127659b562cfd8","modified":1562550549808},{"_id":"themes/ad/source/js/passage.js","hash":"c559181cc49bbd5de8856b4c1589adc39856192f","modified":1562550549809},{"_id":"themes/ad/source/js/reward.js","hash":"eabd60da35d5f9ce32bd0e968568995c5e102b23","modified":1562550549809},{"_id":"themes/ad/source/js/scroll.js","hash":"938dd852f6ac214f8ad0135fce7a8b126c36ef7c","modified":1562550549809},{"_id":"themes/ad/source/js/share.js","hash":"4fcb58fe1d5332cb59f3d559401231ba8106ee2b","modified":1562550549810},{"_id":"themes/ad/source/js/time.js","hash":"4b86b54eea0bbdd8870af6c70443b852393c457b","modified":1562550549810},{"_id":"themes/ad/source/images/favicon.jpg","hash":"1cd66d8e2746bbc60e518ee0879d181b30940a10","modified":1562552106137},{"_id":"themes/ad/source/images/favicon1.ico","hash":"cc7c201861748e92f4809507096df74a40ef496a","modified":1562550549564},{"_id":"themes/ad/source/images/alipay.png","hash":"18b3fd13d32d97fdd687e679ffc94d987cb33bae","modified":1562550549564},{"_id":"themes/ad/source/images/touch-icon.jpg","hash":"f0601879006efe324a22ee079c870f2d041f2818","modified":1562551978908},{"_id":"themes/ad/source/images/wechat.png","hash":"3b17062dc54f3ef7e19ba97a522cf3d3632edb45","modified":1562550549566},{"_id":"themes/ad/source/images/touch-icon.png","hash":"df5a490c2e8d549ca767505fbe46eed3cbe3df43","modified":1562550549565},{"_id":"themes/ad/source/styles/global.scss","hash":"e57778be87e9e750c3de5406e361cac85d5f07c3","modified":1562550549816},{"_id":"themes/ad/source/styles/index.scss","hash":"157f920a729437f0d3599d73bc211935e7d942c7","modified":1562550549816},{"_id":"themes/ad/source/vendor/qrcode.min.js","hash":"2d06c1f823f34c19981c6ae0b0eb0f5861c5e14b","modified":1562550549825},{"_id":"themes/ad/source/vendor/sha256.min.js","hash":"3c5ff30e1f6d37786a336c407defaf5bb7bb258a","modified":1562550549826},{"_id":"themes/ad/source/styles/components/bottom-bar.scss","hash":"f000e077744775c12c278af3b3b5200445a46370","modified":1562550549811},{"_id":"themes/ad/source/styles/components/comment.scss","hash":"1b9621b1d70c715a694d28517987e73bf2784d1a","modified":1562550549811},{"_id":"themes/ad/source/styles/components/index.scss","hash":"59a07eb2af79a13b2d0ffed99f6a9f73d7d4dc51","modified":1562550549814},{"_id":"themes/ad/source/styles/components/share.scss","hash":"82907f1f237eba3ac6ac33cf0208fc8fce8a52c5","modified":1562550549814},{"_id":"themes/ad/source/styles/components/toc.scss","hash":"4d724a87b55edca2c124f107550a2a0852eb301e","modified":1562550549815},{"_id":"themes/ad/source/styles/layout/about.scss","hash":"5653765541ecab79cf22099d12b33bb43cd1df9f","modified":1562550549817},{"_id":"themes/ad/source/styles/layout/friend.scss","hash":"6e0a87d8cf670946df1a9bc58183dc2cf455d3b8","modified":1562550549818},{"_id":"themes/ad/source/styles/layout/home.scss","hash":"74377081d7065bb2f9819463bbcebd719a5423bf","modified":1562550549819},{"_id":"themes/ad/source/styles/layout/index.scss","hash":"1b3c2e2c3ad6d838e6486b5dfacc7b68ebbebb94","modified":1562550549819},{"_id":"themes/ad/source/styles/layout/passage.scss","hash":"0d2550448537c73c81c934c243ac391ec193b59f","modified":1562550549820},{"_id":"themes/ad/source/styles/layout/set.scss","hash":"ed99c8ff9778815dd15d8649676957c893b0ecf2","modified":1562550549820},{"_id":"themes/ad/source/styles/layout/timeline.scss","hash":"e4b7d6ce2508e986faf2e8cc4c3d975ffb096e92","modified":1562550549822},{"_id":"themes/ad/source/styles/mixins/color.scss","hash":"fc9b234fd5a55167ee6df0d15b620af987584be5","modified":1562550549822},{"_id":"themes/ad/source/styles/mixins/font.scss","hash":"4e3320626526b26cb9a95043cc3cad3c4b0ac17d","modified":1562550549823},{"_id":"themes/ad/source/styles/mixins/index.scss","hash":"0a92b657aeb5d176501bb2dc5a9b2d4137f23192","modified":1562550549823},{"_id":"themes/ad/source/styles/partials/footer.scss","hash":"3c664b6e9dae7f9c70faffa6884bc8109254b020","modified":1562550549824},{"_id":"themes/ad/source/styles/partials/header.scss","hash":"215cc800c243af2eaa8a8c216c55be7edbd6f50b","modified":1562550549824},{"_id":"themes/ad/source/styles/partials/index.scss","hash":"40d727b8b464e174a1f0fa2da16aa28ce7792cc7","modified":1562550549824},{"_id":"themes/ad/source/styles/components/layer.scss","hash":"82542bdb3ed8e3188ff9acc75f6a98c1f3e95195","modified":1562550549814},{"_id":"themes/ad/source/styles/components/highlight/diff.styl","hash":"0e7e77c4d13b436d67411c743b2de0a4c9d629c2","modified":1562550549812},{"_id":"themes/ad/source/styles/components/highlight/highlight.styl","hash":"afa8fa51efef45911720a6f18b7696c608fdd7c2","modified":1562550549812},{"_id":"themes/ad/source/styles/components/highlight/theme.styl","hash":"3559fdc4d9a39abdb78077383de8237fe31c2d84","modified":1562550549813},{"_id":"themes/ad/source/styles/components/highlight/var.styl","hash":"3c84c1b2ea98abc97490190ae8f85b5a865b24e3","modified":1562550549813},{"_id":"themes/ad/source/images/Automata.jpg","hash":"a826e083b56cd51cf4af84131dd0cb559ccbe550","modified":1562550549563},{"_id":"public/search.xml","hash":"6e7ea08d6df4031596c48e9be3de26f73c83fee3","modified":1562554096887},{"_id":"public/friends/index.html","hash":"4cf54dbb783e03cfaa6bb17a02b1336c71661505","modified":1562554097156},{"_id":"public/about/index.html","hash":"d703b2f68ecb18b4fe4f699faf325fd60ac4c60e","modified":1562554097156},{"_id":"public/categories/index.html","hash":"e895ceae55705af0ec3006f01844dddc47f0469a","modified":1562554097156},{"_id":"public/tags/index.html","hash":"80efa7228a4a20b64f6c5ae82e3152d5857bbde6","modified":1562554097156},{"_id":"public/passages/hello-world/index.html","hash":"576186edbe7930154b2b08a72abacdd85f3d1adc","modified":1562554097156},{"_id":"public/passages/Dayz独立版-服务器物资管理系统使用教程/index.html","hash":"dfa562a95cdb5c1b6dc53f2fa4b58c62bd0347a9","modified":1562554097156},{"_id":"public/passages/Redis学习笔记（三）Redis字符串-String/index.html","hash":"2087f84a9c3cc965266a407ec1bbd172fca4e30c","modified":1562554097156},{"_id":"public/passages/Redis学习笔记（二）Redis-键-key/index.html","hash":"b167ba9db61de6efc666ac298e164f0667f858b8","modified":1562554097156},{"_id":"public/passages/CentOS安装Supervisor守护进程并开机启动/index.html","hash":"2ae3ce0ddc3993e3b1d7a96cb267069d4a8b6f83","modified":1562554097157},{"_id":"public/passages/Linux安装screen命令/index.html","hash":"d3678628db067fc01fc3ed3fb635264a4c707ade","modified":1562554097157},{"_id":"public/passages/Docker学习笔记（一）Docker入门简介/index.html","hash":"b51c392b37c4d1441aafd37b8b0db11b25fff282","modified":1562554097157},{"_id":"public/archives/index.html","hash":"23d26707ba8916d61791b661a7dcab774fa03914","modified":1562554097157},{"_id":"public/archives/page/2/index.html","hash":"637e6947a1f00dc3fcdb5f7deffba9c675c3f79d","modified":1562554097157},{"_id":"public/archives/2019/index.html","hash":"879b69a9804c58c8c52fe4e19c9144f8d0bbf924","modified":1562554097157},{"_id":"public/archives/2019/07/index.html","hash":"f61e7c1c5bb8cffd574b8727ad7225d404ecc5a1","modified":1562554097157},{"_id":"public/archives/2019/page/2/index.html","hash":"28bc25976348b0fb327fa3130fa2cf7b03198797","modified":1562554097157},{"_id":"public/archives/2019/07/page/2/index.html","hash":"a4a34e203eb2d95c1eda7d4ec054b186a766e0cb","modified":1562554097157},{"_id":"public/categories/其他/index.html","hash":"9c63955627711a507211da2794d456ca9e8b09c7","modified":1562554097157},{"_id":"public/categories/Docker/index.html","hash":"a7f7f1cc397da1e6a12888e38ab7b0498713a681","modified":1562554097157},{"_id":"public/categories/Linux/index.html","hash":"c525c0e65f78b4cbcc7582aa603d779ea62d306a","modified":1562554097157},{"_id":"public/categories/Redis/index.html","hash":"3e0b32a72ea7992fc4d0e6cd23ca8bf61629b776","modified":1562554097157},{"_id":"public/categories/javascript/index.html","hash":"149c6376266b8c12528d4fb82990110cf4abfe24","modified":1562554097157},{"_id":"public/page/2/index.html","hash":"a925531733f893f30c0ab40e837a408fe495894a","modified":1562554097157},{"_id":"public/tags/Dayz/index.html","hash":"738d9c07e252659e38b81c2530582ed402a621ba","modified":1562554097157},{"_id":"public/tags/Docker/index.html","hash":"f1eefc75065d78208ee4f959207f68a257e84729","modified":1562554097157},{"_id":"public/tags/Centos/index.html","hash":"4d85e94e824a18e14cb3177781d84dd9fca621fc","modified":1562554097157},{"_id":"public/tags/Linux/index.html","hash":"abf24ebea485ba1be4a22bec682b287af4b85f27","modified":1562554097157},{"_id":"public/tags/Redis/index.html","hash":"2998120f55d5d85ab396127cdeb70adf9c10b73a","modified":1562554097158},{"_id":"public/tags/js/index.html","hash":"a532690bd67508eb9b36de34da35305e25ad3ca8","modified":1562554097158},{"_id":"public/tags/Crontab/index.html","hash":"e55c3f52054175a417444c17576292b5c29477cd","modified":1562554097158},{"_id":"public/tags/Liunx/index.html","hash":"b1d9f6f3bd65e793291a14fd4a19ce5d5bcf8b27","modified":1562554097158},{"_id":"public/passages/Redis学习笔记（四）主从复制及启动哨兵模式/index.html","hash":"22b26765250b526e5235bdc197a0c9549c747434","modified":1562554097158},{"_id":"public/passages/Redis学习笔记（一）redis安装（Centos7）和简单存取数据/index.html","hash":"1e82c20fde9b779751b871ec8ac73a8ed28475e2","modified":1562554097158},{"_id":"public/passages/shell命令-crontab-php实现每天特定时间段内随机时间执行任务/index.html","hash":"a770afc67cd3a76f80fe367668f04b7d61dfe3f3","modified":1562554097158},{"_id":"public/passages/linux使用crontab命令指定时间段内随机执行任务/index.html","hash":"5e51591fec40e3ce1aa1016fa5fca73c85864ecb","modified":1562554097158},{"_id":"public/passages/javascript实现图片上传预览/index.html","hash":"ed29c6cc1a5496de0e1fc445f580a12cdb66200c","modified":1562554097158},{"_id":"public/passages/Docker学习笔记（三）Docker常用命令/index.html","hash":"0391f0080f391cf6b20bf648bb9ec696b3a7ed68","modified":1562554097158},{"_id":"public/passages/Docker学习笔记（二）Docker-V18-03-安装配置/index.html","hash":"2f3fc020d3b143a61fe8f0d341658b2e8d6c112f","modified":1562554097158},{"_id":"public/index.html","hash":"ef67b789f37e45ad30e9020c88ff6ffd59f0c9ff","modified":1562554097158},{"_id":"public/images/favicon.jpg","hash":"1cd66d8e2746bbc60e518ee0879d181b30940a10","modified":1562554097171},{"_id":"public/images/favicon1.ico","hash":"cc7c201861748e92f4809507096df74a40ef496a","modified":1562554097171},{"_id":"public/images/touch-icon.jpg","hash":"f0601879006efe324a22ee079c870f2d041f2818","modified":1562554097171},{"_id":"public/images/wechat.png","hash":"3b17062dc54f3ef7e19ba97a522cf3d3632edb45","modified":1562554097171},{"_id":"public/styles/global.scss","hash":"e57778be87e9e750c3de5406e361cac85d5f07c3","modified":1562554097171},{"_id":"public/styles/index.scss","hash":"157f920a729437f0d3599d73bc211935e7d942c7","modified":1562554097172},{"_id":"public/styles/components/bottom-bar.scss","hash":"f000e077744775c12c278af3b3b5200445a46370","modified":1562554097172},{"_id":"public/images/touch-icon.png","hash":"df5a490c2e8d549ca767505fbe46eed3cbe3df43","modified":1562554097172},{"_id":"public/styles/components/comment.scss","hash":"1b9621b1d70c715a694d28517987e73bf2784d1a","modified":1562554097172},{"_id":"public/styles/components/index.scss","hash":"59a07eb2af79a13b2d0ffed99f6a9f73d7d4dc51","modified":1562554097172},{"_id":"public/styles/components/share.scss","hash":"82907f1f237eba3ac6ac33cf0208fc8fce8a52c5","modified":1562554097172},{"_id":"public/styles/components/toc.scss","hash":"4d724a87b55edca2c124f107550a2a0852eb301e","modified":1562554097172},{"_id":"public/styles/layout/about.scss","hash":"5653765541ecab79cf22099d12b33bb43cd1df9f","modified":1562554097172},{"_id":"public/styles/layout/friend.scss","hash":"6e0a87d8cf670946df1a9bc58183dc2cf455d3b8","modified":1562554097172},{"_id":"public/styles/layout/home.scss","hash":"74377081d7065bb2f9819463bbcebd719a5423bf","modified":1562554097172},{"_id":"public/styles/layout/index.scss","hash":"1b3c2e2c3ad6d838e6486b5dfacc7b68ebbebb94","modified":1562554097172},{"_id":"public/styles/layout/passage.scss","hash":"0d2550448537c73c81c934c243ac391ec193b59f","modified":1562554097172},{"_id":"public/styles/layout/set.scss","hash":"ed99c8ff9778815dd15d8649676957c893b0ecf2","modified":1562554097172},{"_id":"public/styles/layout/timeline.scss","hash":"e4b7d6ce2508e986faf2e8cc4c3d975ffb096e92","modified":1562554097172},{"_id":"public/styles/mixins/color.scss","hash":"fc9b234fd5a55167ee6df0d15b620af987584be5","modified":1562554097172},{"_id":"public/styles/mixins/font.scss","hash":"4e3320626526b26cb9a95043cc3cad3c4b0ac17d","modified":1562554097172},{"_id":"public/styles/mixins/index.scss","hash":"0a92b657aeb5d176501bb2dc5a9b2d4137f23192","modified":1562554097172},{"_id":"public/styles/partials/footer.scss","hash":"3c664b6e9dae7f9c70faffa6884bc8109254b020","modified":1562554097173},{"_id":"public/styles/partials/header.scss","hash":"215cc800c243af2eaa8a8c216c55be7edbd6f50b","modified":1562554097173},{"_id":"public/styles/partials/index.scss","hash":"40d727b8b464e174a1f0fa2da16aa28ce7792cc7","modified":1562554097173},{"_id":"public/styles/components/layer.scss","hash":"82542bdb3ed8e3188ff9acc75f6a98c1f3e95195","modified":1562554097173},{"_id":"public/images/alipay.png","hash":"18b3fd13d32d97fdd687e679ffc94d987cb33bae","modified":1562554097344},{"_id":"public/css/myStyle.css","hash":"1fbe8116cd79bb347eb87c3e050cfa7084be50f1","modified":1562554097350},{"_id":"public/js/copy.js","hash":"902fe6c84d2ebbfb37e1f91f37646bea20db8c05","modified":1562554097350},{"_id":"public/js/fancybox.js","hash":"0b6cd3ea1d7b5d1511fcf505e2c306dcd85515c1","modified":1562554097351},{"_id":"public/js/backTop.js","hash":"237a50a872e2fe8343353bbe18fabb3c1681f0d0","modified":1562554097351},{"_id":"public/js/header.js","hash":"f0b92ddf7df3c5913d50f189c7f5e320766edaba","modified":1562554097352},{"_id":"public/js/index.js","hash":"2575e6a1cd7d30e006862bedbefc034220401da0","modified":1562554097352},{"_id":"public/js/auth.js","hash":"65833588caa77be788aea02fc87e1eaeda55694a","modified":1562554097352},{"_id":"public/js/mathjax.js","hash":"3c58ffe041c6e124c5d927d0e7127659b562cfd8","modified":1562554097352},{"_id":"public/js/layer.js","hash":"dc17348c7bef8a78f9a258d2f25864853ee4a576","modified":1562554097352},{"_id":"public/js/passage.js","hash":"c559181cc49bbd5de8856b4c1589adc39856192f","modified":1562554097353},{"_id":"public/js/leancloud.js","hash":"e91b45003ab747ca9162f83d033a572b00c86be5","modified":1562554097353},{"_id":"public/js/reward.js","hash":"eabd60da35d5f9ce32bd0e968568995c5e102b23","modified":1562554097353},{"_id":"public/js/share.js","hash":"4fcb58fe1d5332cb59f3d559401231ba8106ee2b","modified":1562554097353},{"_id":"public/js/scroll.js","hash":"938dd852f6ac214f8ad0135fce7a8b126c36ef7c","modified":1562554097353},{"_id":"public/js/time.js","hash":"4b86b54eea0bbdd8870af6c70443b852393c457b","modified":1562554097353},{"_id":"public/vendor/sha256.min.js","hash":"3c5ff30e1f6d37786a336c407defaf5bb7bb258a","modified":1562554097353},{"_id":"public/styles/components/highlight/diff.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562554097353},{"_id":"public/styles/components/highlight/highlight.css","hash":"ee9a7e3f39fb6a0ae47943d2ea958674619ff47c","modified":1562554097353},{"_id":"public/styles/components/highlight/theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562554097353},{"_id":"public/styles/components/highlight/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562554097353},{"_id":"public/vendor/qrcode.min.js","hash":"2d06c1f823f34c19981c6ae0b0eb0f5861c5e14b","modified":1562554097358},{"_id":"public/css/index.css","hash":"6a541eea335df710f1fb8dcce48f7485dfab5a30","modified":1562554097362},{"_id":"public/images/Automata.jpg","hash":"a826e083b56cd51cf4af84131dd0cb559ccbe550","modified":1562554097387}],"Category":[{"name":"其他","_id":"cjxtsd54r0002u8tvk71yydqa"},{"name":"Docker","_id":"cjxtsd54w0007u8tvzn837u7v"},{"name":"Linux","_id":"cjxtsd54z000du8tvnw9rkkoo"},{"name":"Redis","_id":"cjxtsd55c000vu8tv2mewxtvd"},{"name":"javascript","_id":"cjxtsd55i0019u8tvlfoiyxur"}],"Data":[],"Page":[{"title":"friends","date":"2019-07-05T03:49:43.000Z","type":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-05 11:49:43\ntype: \"friends\"\n---\n","updated":"2019-07-08T01:49:09.469Z","path":"friends/index.html","comments":1,"layout":"page","_id":"cjxtsd55y001qu8tv8w67opon","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-07-05T03:50:36.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-05 11:50:36\ntype: \"about\"\n---\n","updated":"2019-07-08T01:49:09.465Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjxtsd55z001ru8tvi7002grz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-05T03:49:18.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-05 11:49:18\ntype: \"categories\"\n---\n","updated":"2019-07-08T01:49:09.466Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjxtsd560001tu8tvnh8i9spe","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-05T03:48:36.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-05 11:48:36\ntype: \"tags\"\n---\n","updated":"2019-07-08T01:49:09.470Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjxtsd562001vu8tvpc1edxkp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Dayz独立版 服务器物资管理系统使用教程","date":"2019-07-07T16:42:49.000Z","top":null,"password":null,"_content":"\n##### 打开[dayz.lucent.blog](http://dayz.lucent.blog/)\n\n![1 (1).png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/16098cc357cdf9b9696fb0806e23170a.png)\n\n##### 将types.xml文件(文件位于服务器目录/mpmissions/dayzOffline.chernarusplus/db中)拖入到浏览器中\n\n[![img](https://lucent.blog/wp-content/uploads/2019/05/2.png)](https://lucent.blog/wp-content/uploads/2019/05/2.png)\n\n##### 名词解释\n\n最大数量：服务器同时刷新出该物品的最大数量\n\n最小数量：服务器同时刷新出该物品的最小数量\n\n生成优先级：服务器刷新该物品的优先级，优先级越高，刷新队列越靠前\n\n生成速度：值为0 时，服务器会一次性刷新出该物品的最大数量的物资，而当值大于0 时，服务器每隔一段时间(值为1800就是每隔1800秒)就会刷新出一个该物品\n\n生命周期：该物品在周围没有玩家时，持续存在的最长时间(秒)，时间过去，物品消失，重新刷新\n\n类别：该物品所属分类\n\n \n\n在修改完之后点击保存，并下载即可！\n\n","source":"_posts/Dayz独立版-服务器物资管理系统使用教程.md","raw":"---\ntitle: Dayz独立版 服务器物资管理系统使用教程\ndate: 2019-07-08 00:42:49\ncategories: 其他\ntags: Dayz\ntop:\npassword:\n---\n\n##### 打开[dayz.lucent.blog](http://dayz.lucent.blog/)\n\n![1 (1).png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/16098cc357cdf9b9696fb0806e23170a.png)\n\n##### 将types.xml文件(文件位于服务器目录/mpmissions/dayzOffline.chernarusplus/db中)拖入到浏览器中\n\n[![img](https://lucent.blog/wp-content/uploads/2019/05/2.png)](https://lucent.blog/wp-content/uploads/2019/05/2.png)\n\n##### 名词解释\n\n最大数量：服务器同时刷新出该物品的最大数量\n\n最小数量：服务器同时刷新出该物品的最小数量\n\n生成优先级：服务器刷新该物品的优先级，优先级越高，刷新队列越靠前\n\n生成速度：值为0 时，服务器会一次性刷新出该物品的最大数量的物资，而当值大于0 时，服务器每隔一段时间(值为1800就是每隔1800秒)就会刷新出一个该物品\n\n生命周期：该物品在周围没有玩家时，持续存在的最长时间(秒)，时间过去，物品消失，重新刷新\n\n类别：该物品所属分类\n\n \n\n在修改完之后点击保存，并下载即可！\n\n","slug":"Dayz独立版-服务器物资管理系统使用教程","published":1,"updated":"2019-07-08T01:49:09.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd54h0000u8tvy6amhfam","content":"<h5 id=\"打开dayz-lucent-blog\"><a href=\"#打开dayz-lucent-blog\" class=\"headerlink\" title=\"打开dayz.lucent.blog\"></a>打开<a href=\"http://dayz.lucent.blog/\" target=\"_blank\" rel=\"noopener\">dayz.lucent.blog</a></h5><p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/16098cc357cdf9b9696fb0806e23170a.png\" alt=\"1 (1).png\"></p>\n<h5 id=\"将types-xml文件-文件位于服务器目录-mpmissions-dayzOffline-chernarusplus-db中-拖入到浏览器中\"><a href=\"#将types-xml文件-文件位于服务器目录-mpmissions-dayzOffline-chernarusplus-db中-拖入到浏览器中\" class=\"headerlink\" title=\"将types.xml文件(文件位于服务器目录/mpmissions/dayzOffline.chernarusplus/db中)拖入到浏览器中\"></a>将types.xml文件(文件位于服务器目录/mpmissions/dayzOffline.chernarusplus/db中)拖入到浏览器中</h5><p><a href=\"https://lucent.blog/wp-content/uploads/2019/05/2.png\"><img src=\"https://lucent.blog/wp-content/uploads/2019/05/2.png\" alt=\"img\"></a></p>\n<h5 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h5><p>最大数量：服务器同时刷新出该物品的最大数量</p>\n<p>最小数量：服务器同时刷新出该物品的最小数量</p>\n<p>生成优先级：服务器刷新该物品的优先级，优先级越高，刷新队列越靠前</p>\n<p>生成速度：值为0 时，服务器会一次性刷新出该物品的最大数量的物资，而当值大于0 时，服务器每隔一段时间(值为1800就是每隔1800秒)就会刷新出一个该物品</p>\n<p>生命周期：该物品在周围没有玩家时，持续存在的最长时间(秒)，时间过去，物品消失，重新刷新</p>\n<p>类别：该物品所属分类</p>\n<p>在修改完之后点击保存，并下载即可！</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"打开dayz-lucent-blog\"><a href=\"#打开dayz-lucent-blog\" class=\"headerlink\" title=\"打开dayz.lucent.blog\"></a>打开<a href=\"http://dayz.lucent.blog/\" target=\"_blank\" rel=\"noopener\">dayz.lucent.blog</a></h5><p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/16098cc357cdf9b9696fb0806e23170a.png\" alt=\"1 (1).png\"></p>\n<h5 id=\"将types-xml文件-文件位于服务器目录-mpmissions-dayzOffline-chernarusplus-db中-拖入到浏览器中\"><a href=\"#将types-xml文件-文件位于服务器目录-mpmissions-dayzOffline-chernarusplus-db中-拖入到浏览器中\" class=\"headerlink\" title=\"将types.xml文件(文件位于服务器目录/mpmissions/dayzOffline.chernarusplus/db中)拖入到浏览器中\"></a>将types.xml文件(文件位于服务器目录/mpmissions/dayzOffline.chernarusplus/db中)拖入到浏览器中</h5><p><a href=\"https://lucent.blog/wp-content/uploads/2019/05/2.png\"><img src=\"https://lucent.blog/wp-content/uploads/2019/05/2.png\" alt=\"img\"></a></p>\n<h5 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h5><p>最大数量：服务器同时刷新出该物品的最大数量</p>\n<p>最小数量：服务器同时刷新出该物品的最小数量</p>\n<p>生成优先级：服务器刷新该物品的优先级，优先级越高，刷新队列越靠前</p>\n<p>生成速度：值为0 时，服务器会一次性刷新出该物品的最大数量的物资，而当值大于0 时，服务器每隔一段时间(值为1800就是每隔1800秒)就会刷新出一个该物品</p>\n<p>生命周期：该物品在周围没有玩家时，持续存在的最长时间(秒)，时间过去，物品消失，重新刷新</p>\n<p>类别：该物品所属分类</p>\n<p>在修改完之后点击保存，并下载即可！</p>\n"},{"title":"Docker学习笔记（一）Docker入门简介","date":"2019-07-06T09:49:08.000Z","_content":"\nDocker 是一个基于GO语言开发的开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的[Linux](http://baike.baidu.com/view/1634.htm)机器上，也可以实现虚拟化。\n\n容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架或包括系统。\n\nDocker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。\n\nDocker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。\n\n在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。\n\n下面对比了Docker 和传统虚拟化（KVM、XEN等）方式的不同之处，容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件的基础上，虚拟出自己的系统，再在系统上部署相关的APP应用。\n\n下图为传统虚拟化方案：\n\n![6-300x114.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/c7fc0967984cda16932284cb51c0edc5.png)\n\n如下为Docker虚拟化方案：\n\n![7-300x85.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e8d60258be6b5bfb5780e5cf22959ff2.png)\n\nDocker虚拟化有三个概念需要理解，分别镜像、容器、仓库。\n\n- 镜像：docker的镜像其实就是模板，跟我们常见的ISO镜像类似，是一个样板。\n- 容器：使用镜像常见的应用或者系统，我们称之为一个容器。\n- 仓库：仓库是存放镜像的地方，分为公开仓库（Public）和私有仓库（Private）两种形式。\n\n## Docker虚拟化特点\n\n跟传统VM比较具有如下优点：\n\n1)  操作启动快\n\n运行时的性能可以获取极大提升，管理操作（启动，停止，开始，重启等等） 都是以秒或毫秒为单位的。\n\n2)  轻量级虚拟化\n\n你会拥有足够的\"操作系统\"，仅需添加或减小镜像即可。在一台服务器上可以布署100~1000个Containers容器。但是传统虚拟化，你虚拟10-20个虚拟机就不错了。\n\n3)  开源免费\n\n开源的，免费的，低成本的。由现代Linux内核支持并驱动。注* 轻量的Container必定可以在一个物理机上开启更多\"容器\"，注定比VMs要便宜。\n\n4)  前景及云支持\n\n正在越来越受欢迎，包括各大主流公司都在推动docker的快速发展，性能有很大的优势。\n\n跟传统VM比较具有如下缺点：\n\n1)  目前知道的人比较少\n\n2)  相关的技术资料欠缺\n\n3)  Go语言还没完全成熟","source":"_posts/Docker学习笔记（一）Docker入门简介.md","raw":"---\ntitle: Docker学习笔记（一）Docker入门简介\ncategories: Docker\ndate: 2019-07-06 17:49:08\ntags: Docker\n---\n\nDocker 是一个基于GO语言开发的开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的[Linux](http://baike.baidu.com/view/1634.htm)机器上，也可以实现虚拟化。\n\n容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架或包括系统。\n\nDocker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。\n\nDocker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。\n\n在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。\n\n下面对比了Docker 和传统虚拟化（KVM、XEN等）方式的不同之处，容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件的基础上，虚拟出自己的系统，再在系统上部署相关的APP应用。\n\n下图为传统虚拟化方案：\n\n![6-300x114.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/c7fc0967984cda16932284cb51c0edc5.png)\n\n如下为Docker虚拟化方案：\n\n![7-300x85.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e8d60258be6b5bfb5780e5cf22959ff2.png)\n\nDocker虚拟化有三个概念需要理解，分别镜像、容器、仓库。\n\n- 镜像：docker的镜像其实就是模板，跟我们常见的ISO镜像类似，是一个样板。\n- 容器：使用镜像常见的应用或者系统，我们称之为一个容器。\n- 仓库：仓库是存放镜像的地方，分为公开仓库（Public）和私有仓库（Private）两种形式。\n\n## Docker虚拟化特点\n\n跟传统VM比较具有如下优点：\n\n1)  操作启动快\n\n运行时的性能可以获取极大提升，管理操作（启动，停止，开始，重启等等） 都是以秒或毫秒为单位的。\n\n2)  轻量级虚拟化\n\n你会拥有足够的\"操作系统\"，仅需添加或减小镜像即可。在一台服务器上可以布署100~1000个Containers容器。但是传统虚拟化，你虚拟10-20个虚拟机就不错了。\n\n3)  开源免费\n\n开源的，免费的，低成本的。由现代Linux内核支持并驱动。注* 轻量的Container必定可以在一个物理机上开启更多\"容器\"，注定比VMs要便宜。\n\n4)  前景及云支持\n\n正在越来越受欢迎，包括各大主流公司都在推动docker的快速发展，性能有很大的优势。\n\n跟传统VM比较具有如下缺点：\n\n1)  目前知道的人比较少\n\n2)  相关的技术资料欠缺\n\n3)  Go语言还没完全成熟","slug":"Docker学习笔记（一）Docker入门简介","published":1,"updated":"2019-07-08T01:49:09.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd54p0001u8tvbuqaes4g","content":"<p>Docker 是一个基于GO语言开发的开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的<a href=\"http://baike.baidu.com/view/1634.htm\" target=\"_blank\" rel=\"noopener\">Linux</a>机器上，也可以实现虚拟化。</p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架或包括系统。</p>\n<p>Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p>\n<p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p>\n<p>在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p>\n<p>下面对比了Docker 和传统虚拟化（KVM、XEN等）方式的不同之处，容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件的基础上，虚拟出自己的系统，再在系统上部署相关的APP应用。</p>\n<p>下图为传统虚拟化方案：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/c7fc0967984cda16932284cb51c0edc5.png\" alt=\"6-300x114.png\"></p>\n<p>如下为Docker虚拟化方案：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e8d60258be6b5bfb5780e5cf22959ff2.png\" alt=\"7-300x85.png\"></p>\n<p>Docker虚拟化有三个概念需要理解，分别镜像、容器、仓库。</p>\n<ul>\n<li>镜像：docker的镜像其实就是模板，跟我们常见的ISO镜像类似，是一个样板。</li>\n<li>容器：使用镜像常见的应用或者系统，我们称之为一个容器。</li>\n<li>仓库：仓库是存放镜像的地方，分为公开仓库（Public）和私有仓库（Private）两种形式。</li>\n</ul>\n<h2 id=\"Docker虚拟化特点\"><a href=\"#Docker虚拟化特点\" class=\"headerlink\" title=\"Docker虚拟化特点\"></a>Docker虚拟化特点</h2><p>跟传统VM比较具有如下优点：</p>\n<p>1)  操作启动快</p>\n<p>运行时的性能可以获取极大提升，管理操作（启动，停止，开始，重启等等） 都是以秒或毫秒为单位的。</p>\n<p>2)  轻量级虚拟化</p>\n<p>你会拥有足够的”操作系统”，仅需添加或减小镜像即可。在一台服务器上可以布署100~1000个Containers容器。但是传统虚拟化，你虚拟10-20个虚拟机就不错了。</p>\n<p>3)  开源免费</p>\n<p>开源的，免费的，低成本的。由现代Linux内核支持并驱动。注* 轻量的Container必定可以在一个物理机上开启更多”容器”，注定比VMs要便宜。</p>\n<p>4)  前景及云支持</p>\n<p>正在越来越受欢迎，包括各大主流公司都在推动docker的快速发展，性能有很大的优势。</p>\n<p>跟传统VM比较具有如下缺点：</p>\n<p>1)  目前知道的人比较少</p>\n<p>2)  相关的技术资料欠缺</p>\n<p>3)  Go语言还没完全成熟</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Docker 是一个基于GO语言开发的开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的<a href=\"http://baike.baidu.com/view/1634.htm\" target=\"_blank\" rel=\"noopener\">Linux</a>机器上，也可以实现虚拟化。</p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架或包括系统。</p>\n<p>Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p>\n<p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p>\n<p>在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p>\n<p>下面对比了Docker 和传统虚拟化（KVM、XEN等）方式的不同之处，容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件的基础上，虚拟出自己的系统，再在系统上部署相关的APP应用。</p>\n<p>下图为传统虚拟化方案：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/c7fc0967984cda16932284cb51c0edc5.png\" alt=\"6-300x114.png\"></p>\n<p>如下为Docker虚拟化方案：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e8d60258be6b5bfb5780e5cf22959ff2.png\" alt=\"7-300x85.png\"></p>\n<p>Docker虚拟化有三个概念需要理解，分别镜像、容器、仓库。</p>\n<ul>\n<li>镜像：docker的镜像其实就是模板，跟我们常见的ISO镜像类似，是一个样板。</li>\n<li>容器：使用镜像常见的应用或者系统，我们称之为一个容器。</li>\n<li>仓库：仓库是存放镜像的地方，分为公开仓库（Public）和私有仓库（Private）两种形式。</li>\n</ul>\n<h2 id=\"Docker虚拟化特点\"><a href=\"#Docker虚拟化特点\" class=\"headerlink\" title=\"Docker虚拟化特点\"></a>Docker虚拟化特点</h2><p>跟传统VM比较具有如下优点：</p>\n<p>1)  操作启动快</p>\n<p>运行时的性能可以获取极大提升，管理操作（启动，停止，开始，重启等等） 都是以秒或毫秒为单位的。</p>\n<p>2)  轻量级虚拟化</p>\n<p>你会拥有足够的”操作系统”，仅需添加或减小镜像即可。在一台服务器上可以布署100~1000个Containers容器。但是传统虚拟化，你虚拟10-20个虚拟机就不错了。</p>\n<p>3)  开源免费</p>\n<p>开源的，免费的，低成本的。由现代Linux内核支持并驱动。注* 轻量的Container必定可以在一个物理机上开启更多”容器”，注定比VMs要便宜。</p>\n<p>4)  前景及云支持</p>\n<p>正在越来越受欢迎，包括各大主流公司都在推动docker的快速发展，性能有很大的优势。</p>\n<p>跟传统VM比较具有如下缺点：</p>\n<p>1)  目前知道的人比较少</p>\n<p>2)  相关的技术资料欠缺</p>\n<p>3)  Go语言还没完全成熟</p>\n"},{"title":"CentOS安装Supervisor守护进程并开机启动","date":"2019-07-07T16:04:36.000Z","top":null,"password":null,"_content":"\n**安装：**\n\ncentos6.9安装方法\n\n`easy_install supervisor`\n\ncentos7安装方法\n\n`yum install supervisor`\n\n在/etc/目录下建立配置文件\n\n`echo_supervisord_conf > /etc/supervisord.conf`\n\n修改配置文件\n\n`vi /etc/supervisord.conf`\n\n在末尾加入配置信息\n\n一般配置信息都是[program:xxx]开头的\n\n**配置：**\n\n<span style=\"color: #ff0000;\">command为真实安装路径!</span>\n\n[][program:frp]\n\n```shell\nuser=root\ncommand=/root/frp/frpsa/frps -c /root/frp/frpsa/frps.ini\nstartsecs=1\nstartretries=100\nautorstart=true\nautorestart=true\nstderr_logfile=/tmp/err-frps.log\nstderr_logfile_maxbytes=50MB\nstderr_logfile_backups=10\nstdout_logfile=/tmp/out-frps.log\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n```\n\n**使用：**\n\n直接启动supervisor\n\n`supervisord`\n\n或指定配置文件启动\n\n`supervisord -c /etc/supervisord.conf`\n\n#配置开机自启\n`systemctl enable supervisord`\n\n#验证一下是否为开机启动\n\n`systemctl is-enabled supervisord`","source":"_posts/CentOS安装Supervisor守护进程并开机启动.md","raw":"---\ntitle: CentOS安装Supervisor守护进程并开机启动\ndate: 2019-07-08 00:04:36\ncategories: Linux\ntags:\n- Centos\n- Linux\ntop:\npassword:\n---\n\n**安装：**\n\ncentos6.9安装方法\n\n`easy_install supervisor`\n\ncentos7安装方法\n\n`yum install supervisor`\n\n在/etc/目录下建立配置文件\n\n`echo_supervisord_conf > /etc/supervisord.conf`\n\n修改配置文件\n\n`vi /etc/supervisord.conf`\n\n在末尾加入配置信息\n\n一般配置信息都是[program:xxx]开头的\n\n**配置：**\n\n<span style=\"color: #ff0000;\">command为真实安装路径!</span>\n\n[][program:frp]\n\n```shell\nuser=root\ncommand=/root/frp/frpsa/frps -c /root/frp/frpsa/frps.ini\nstartsecs=1\nstartretries=100\nautorstart=true\nautorestart=true\nstderr_logfile=/tmp/err-frps.log\nstderr_logfile_maxbytes=50MB\nstderr_logfile_backups=10\nstdout_logfile=/tmp/out-frps.log\nstdout_logfile_maxbytes=50MB\nstdout_logfile_backups=10\n```\n\n**使用：**\n\n直接启动supervisor\n\n`supervisord`\n\n或指定配置文件启动\n\n`supervisord -c /etc/supervisord.conf`\n\n#配置开机自启\n`systemctl enable supervisord`\n\n#验证一下是否为开机启动\n\n`systemctl is-enabled supervisord`","slug":"CentOS安装Supervisor守护进程并开机启动","published":1,"updated":"2019-07-08T01:49:09.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd54t0004u8tv6gvye6zq","content":"<p><strong>安装：</strong></p>\n<p>centos6.9安装方法</p>\n<p><code>easy_install supervisor</code></p>\n<p>centos7安装方法</p>\n<p><code>yum install supervisor</code></p>\n<p>在/etc/目录下建立配置文件</p>\n<p><code>echo_supervisord_conf &gt; /etc/supervisord.conf</code></p>\n<p>修改配置文件</p>\n<p><code>vi /etc/supervisord.conf</code></p>\n<p>在末尾加入配置信息</p>\n<p>一般配置信息都是[program:xxx]开头的</p>\n<p><strong>配置：</strong></p>\n<p><span style=\"color: #ff0000;\">command为真实安装路径!</span></p>\n<p>[][program:frp]</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=root</span><br><span class=\"line\">command=/root/frp/frpsa/frps -c /root/frp/frpsa/frps.ini</span><br><span class=\"line\">startsecs=1</span><br><span class=\"line\">startretries=100</span><br><span class=\"line\">autorstart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stderr_logfile=/tmp/err-frps.log</span><br><span class=\"line\">stderr_logfile_maxbytes=50MB</span><br><span class=\"line\">stderr_logfile_backups=10</span><br><span class=\"line\">stdout_logfile=/tmp/out-frps.log</span><br><span class=\"line\">stdout_logfile_maxbytes=50MB</span><br><span class=\"line\">stdout_logfile_backups=10</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用：</strong></p>\n<p>直接启动supervisor</p>\n<p><code>supervisord</code></p>\n<p>或指定配置文件启动</p>\n<p><code>supervisord -c /etc/supervisord.conf</code></p>\n<p>#配置开机自启<br><code>systemctl enable supervisord</code></p>\n<p>#验证一下是否为开机启动</p>\n<p><code>systemctl is-enabled supervisord</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>安装：</strong></p>\n<p>centos6.9安装方法</p>\n<p><code>easy_install supervisor</code></p>\n<p>centos7安装方法</p>\n<p><code>yum install supervisor</code></p>\n<p>在/etc/目录下建立配置文件</p>\n<p><code>echo_supervisord_conf &gt; /etc/supervisord.conf</code></p>\n<p>修改配置文件</p>\n<p><code>vi /etc/supervisord.conf</code></p>\n<p>在末尾加入配置信息</p>\n<p>一般配置信息都是[program:xxx]开头的</p>\n<p><strong>配置：</strong></p>\n<p><span style=\"color: #ff0000;\">command为真实安装路径!</span></p>\n<p>[][program:frp]</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=root</span><br><span class=\"line\">command=/root/frp/frpsa/frps -c /root/frp/frpsa/frps.ini</span><br><span class=\"line\">startsecs=1</span><br><span class=\"line\">startretries=100</span><br><span class=\"line\">autorstart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">stderr_logfile=/tmp/err-frps.log</span><br><span class=\"line\">stderr_logfile_maxbytes=50MB</span><br><span class=\"line\">stderr_logfile_backups=10</span><br><span class=\"line\">stdout_logfile=/tmp/out-frps.log</span><br><span class=\"line\">stdout_logfile_maxbytes=50MB</span><br><span class=\"line\">stdout_logfile_backups=10</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用：</strong></p>\n<p>直接启动supervisor</p>\n<p><code>supervisord</code></p>\n<p>或指定配置文件启动</p>\n<p><code>supervisord -c /etc/supervisord.conf</code></p>\n<p>#配置开机自启<br><code>systemctl enable supervisord</code></p>\n<p>#验证一下是否为开机启动</p>\n<p><code>systemctl is-enabled supervisord</code></p>\n"},{"title":"Docker学习笔记（三）Docker常用命令","date":"2019-07-06T10:15:18.000Z","_content":"\n## docker常用命令：\n\n```shell\ndocker pull 镜像名:TAG   从仓库拉取某镜像\n\ndocker run 镜像名:TAG    运行某个镜像\n\nCtrl+p+q    在容器中使用此命令可退出容器（保留容器进程）\n\nexit   在容器中使用此命令可退出容器（留容也会停止运行）\n\ndocker kill 容器id   此命令可以停止指定容器的运行\n\ndocker ps 查看当前正在运行的容器\n\ndocker ps -a 查看所有容器的状态\n\ndocker start/stop id/name 启动/停止某个容器\n\ndocker attach 容器id 进入某个容器\n\ndocker exec -it id 启动一个伪终端以交互式的方式进入某个容器\n\ndocker images 查看本地镜像\ndocker rm id/name 删除某个容器\ndocker rmi id/name 删除某个镜像\n```\n\n\n\n### docker pull 镜像名:TAG   详解:\n\n```shell\ndocker pull tomcat:8.5\n#如果不指定:TAG则默认拉取最新版本\n```\n\n<span style=\"color: #ff6600;\">执行结果：</span>\n\n![1.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/136bfbcf6e143ca71a2c3ec52b266b0d.png)\n\n<span style=\"color: #ff6600;\">查看本地镜像：</span>\n\n![2.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/4e15c07d8717536a98a41367e6e4f3e7.png)\n\n#### docker run 镜像名:TAG    详解：\n\n```shell\ndocker run -it -p 1234:8080 -name MyTomcat tomcat\n##可选参数## \n#-it 代表以启动一个伪终端交互式的方式运行镜像\n#-p  端口映射，将宿主机的1234端口（可指定其他）映射到tomcat的8080端口\n#-d  以守护进程的方式运行，即后台运行，不启动交互界面\n#--name 为容器命名，如不指定该参数，系统将默认为其命名\n##<span style=\"color: #ff6600;\">注：</span>镜像只是一个模板，每运行一次镜像后将产生一个容器，即容器是镜像运行后的产物\n##例如Windows镜像安装之后成为系统，修改系统文件并不影响Windows镜像，并且Windows镜像可多次使用\n```\n\n<span style=\"color: #ff6600;\">以上代码运行结果：</span>\n\n![3.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d289d0f25c97176091839e1a5c12de35.png)\n\n此时访问<span style=\"color: #ff6600;\">localhost:1234</span>便可以看到<span style=\"color: #ff6600;\">tomcat</span>欢迎页：\n\n![4.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/b3102d20fa30ede621a66551e734d05d.png)\n\n此时说明启动tomcat成功！\n\n<span style=\"color: #ff6600;\">查看正在运行中的容器（docker ps）：</span>\n\n![5.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/ba4971a08b21b50d7d1324c06bd303fb.png)\n\n### docker attach 容器id  详解：\n\n该命令可以再次进入为停止的容器，如使用<span style=\"color: #ff6600;\">Ctrl+p+q</span> 退出的容器\n\n![Snipaste_2018-09-12_22-13-54.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/335a2c84b57ff90565a80f3f13309cd0.png)\n\n<span style=\"color: #ff6600;\">注：因为进入的是tomcat，所以只会有一个光标不停闪动，或者只有tomcat日志输出，若进入的是docker版的centos系统中，</span><span style=\"color: #ff6600;\">将会进入到该centos系统的默认路径下。</span>\n\n### docker kill 容器id 详解：\n\n执行命令后，指定容器的进程将会被停止\n\n![7.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/9d2c674e099e08e303ed22fdb3537cf9.png)\n\n### <span style=\"color: #333333;\">docker ps -a 详解：</span>\n\n该命令可以查询出运行过的容器\n\n![8.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/f2d166a0f76be38d85fbb2d090069398.png)\n\n### docker start/stop id/name 详解：\n\n```shell\ndocker start MyTomcat #启动刚才停止的tomcat容器\n```\n\n![9.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d2e086937ce1909ca564b11962b5592b.png)\n\n```shell\ndocker stop MyTomcat #停止刚才启动的tomcat容器\n```\n\n![10.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/cc66f716211f2cdc122f2fa15cc70175.png)\n\n### docker rm 容器id/name 详解：\n\n该命令可以删除指定容器\n\n```shell\ndocker rm MyTomcat #删除名字为MyTomcat的容器\n```\n\n!![11.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/da8cf517303152fa439e4025d3d217f2.png)\n\n### docker rmi id/name 删除某个镜像  详解：\n\n该命令可以删除指定镜像\n\n```shell\ndocker rmi hello-world:TAG #不加TAG表示删除最新版\n##可选参数##\n#-f 表示强制删除\n```\n\n![12.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d229a9f3068e8ca887b7f9904458b293.png)\n\n","source":"_posts/Docker学习笔记（三）Docker常用命令.md","raw":"---\ntitle: Docker学习笔记（三）Docker常用命令\ncategories: Docker\ndate: 2019-07-06 18:15:18\ntags: Docker\n---\n\n## docker常用命令：\n\n```shell\ndocker pull 镜像名:TAG   从仓库拉取某镜像\n\ndocker run 镜像名:TAG    运行某个镜像\n\nCtrl+p+q    在容器中使用此命令可退出容器（保留容器进程）\n\nexit   在容器中使用此命令可退出容器（留容也会停止运行）\n\ndocker kill 容器id   此命令可以停止指定容器的运行\n\ndocker ps 查看当前正在运行的容器\n\ndocker ps -a 查看所有容器的状态\n\ndocker start/stop id/name 启动/停止某个容器\n\ndocker attach 容器id 进入某个容器\n\ndocker exec -it id 启动一个伪终端以交互式的方式进入某个容器\n\ndocker images 查看本地镜像\ndocker rm id/name 删除某个容器\ndocker rmi id/name 删除某个镜像\n```\n\n\n\n### docker pull 镜像名:TAG   详解:\n\n```shell\ndocker pull tomcat:8.5\n#如果不指定:TAG则默认拉取最新版本\n```\n\n<span style=\"color: #ff6600;\">执行结果：</span>\n\n![1.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/136bfbcf6e143ca71a2c3ec52b266b0d.png)\n\n<span style=\"color: #ff6600;\">查看本地镜像：</span>\n\n![2.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/4e15c07d8717536a98a41367e6e4f3e7.png)\n\n#### docker run 镜像名:TAG    详解：\n\n```shell\ndocker run -it -p 1234:8080 -name MyTomcat tomcat\n##可选参数## \n#-it 代表以启动一个伪终端交互式的方式运行镜像\n#-p  端口映射，将宿主机的1234端口（可指定其他）映射到tomcat的8080端口\n#-d  以守护进程的方式运行，即后台运行，不启动交互界面\n#--name 为容器命名，如不指定该参数，系统将默认为其命名\n##<span style=\"color: #ff6600;\">注：</span>镜像只是一个模板，每运行一次镜像后将产生一个容器，即容器是镜像运行后的产物\n##例如Windows镜像安装之后成为系统，修改系统文件并不影响Windows镜像，并且Windows镜像可多次使用\n```\n\n<span style=\"color: #ff6600;\">以上代码运行结果：</span>\n\n![3.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d289d0f25c97176091839e1a5c12de35.png)\n\n此时访问<span style=\"color: #ff6600;\">localhost:1234</span>便可以看到<span style=\"color: #ff6600;\">tomcat</span>欢迎页：\n\n![4.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/b3102d20fa30ede621a66551e734d05d.png)\n\n此时说明启动tomcat成功！\n\n<span style=\"color: #ff6600;\">查看正在运行中的容器（docker ps）：</span>\n\n![5.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/ba4971a08b21b50d7d1324c06bd303fb.png)\n\n### docker attach 容器id  详解：\n\n该命令可以再次进入为停止的容器，如使用<span style=\"color: #ff6600;\">Ctrl+p+q</span> 退出的容器\n\n![Snipaste_2018-09-12_22-13-54.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/335a2c84b57ff90565a80f3f13309cd0.png)\n\n<span style=\"color: #ff6600;\">注：因为进入的是tomcat，所以只会有一个光标不停闪动，或者只有tomcat日志输出，若进入的是docker版的centos系统中，</span><span style=\"color: #ff6600;\">将会进入到该centos系统的默认路径下。</span>\n\n### docker kill 容器id 详解：\n\n执行命令后，指定容器的进程将会被停止\n\n![7.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/9d2c674e099e08e303ed22fdb3537cf9.png)\n\n### <span style=\"color: #333333;\">docker ps -a 详解：</span>\n\n该命令可以查询出运行过的容器\n\n![8.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/f2d166a0f76be38d85fbb2d090069398.png)\n\n### docker start/stop id/name 详解：\n\n```shell\ndocker start MyTomcat #启动刚才停止的tomcat容器\n```\n\n![9.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d2e086937ce1909ca564b11962b5592b.png)\n\n```shell\ndocker stop MyTomcat #停止刚才启动的tomcat容器\n```\n\n![10.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/cc66f716211f2cdc122f2fa15cc70175.png)\n\n### docker rm 容器id/name 详解：\n\n该命令可以删除指定容器\n\n```shell\ndocker rm MyTomcat #删除名字为MyTomcat的容器\n```\n\n!![11.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/da8cf517303152fa439e4025d3d217f2.png)\n\n### docker rmi id/name 删除某个镜像  详解：\n\n该命令可以删除指定镜像\n\n```shell\ndocker rmi hello-world:TAG #不加TAG表示删除最新版\n##可选参数##\n#-f 表示强制删除\n```\n\n![12.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d229a9f3068e8ca887b7f9904458b293.png)\n\n","slug":"Docker学习笔记（三）Docker常用命令","published":1,"updated":"2019-07-08T01:49:09.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd54u0005u8tvvb1c23j8","content":"<h2 id=\"docker常用命令：\"><a href=\"#docker常用命令：\" class=\"headerlink\" title=\"docker常用命令：\"></a>docker常用命令：</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 镜像名:TAG   从仓库拉取某镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker run 镜像名:TAG    运行某个镜像</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+p+q    在容器中使用此命令可退出容器（保留容器进程）</span><br><span class=\"line\"></span><br><span class=\"line\">exit   在容器中使用此命令可退出容器（留容也会停止运行）</span><br><span class=\"line\"></span><br><span class=\"line\">docker kill 容器id   此命令可以停止指定容器的运行</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps 查看当前正在运行的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps -a 查看所有容器的状态</span><br><span class=\"line\"></span><br><span class=\"line\">docker start/stop id/name 启动/停止某个容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker attach 容器id 进入某个容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it id 启动一个伪终端以交互式的方式进入某个容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker images 查看本地镜像</span><br><span class=\"line\">docker rm id/name 删除某个容器</span><br><span class=\"line\">docker rmi id/name 删除某个镜像</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-pull-镜像名-TAG-详解\"><a href=\"#docker-pull-镜像名-TAG-详解\" class=\"headerlink\" title=\"docker pull 镜像名:TAG   详解:\"></a>docker pull 镜像名:TAG   详解:</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull tomcat:8.5</span><br><span class=\"line\"><span class=\"meta\">#</span>如果不指定:TAG则默认拉取最新版本</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">执行结果：</span></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/136bfbcf6e143ca71a2c3ec52b266b0d.png\" alt=\"1.png\"></p>\n<p><span style=\"color: #ff6600;\">查看本地镜像：</span></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/4e15c07d8717536a98a41367e6e4f3e7.png\" alt=\"2.png\"></p>\n<h4 id=\"docker-run-镜像名-TAG-详解：\"><a href=\"#docker-run-镜像名-TAG-详解：\" class=\"headerlink\" title=\"docker run 镜像名:TAG    详解：\"></a>docker run 镜像名:TAG    详解：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -p 1234:8080 -name MyTomcat tomcat</span><br><span class=\"line\"><span class=\"meta\">#</span>#可选参数## </span><br><span class=\"line\"><span class=\"meta\">#</span>-it 代表以启动一个伪终端交互式的方式运行镜像</span><br><span class=\"line\"><span class=\"meta\">#</span>-p  端口映射，将宿主机的1234端口（可指定其他）映射到tomcat的8080端口</span><br><span class=\"line\"><span class=\"meta\">#</span>-d  以守护进程的方式运行，即后台运行，不启动交互界面</span><br><span class=\"line\"><span class=\"meta\">#</span>--name 为容器命名，如不指定该参数，系统将默认为其命名</span><br><span class=\"line\"><span class=\"meta\">#</span>#&lt;span style=\"color: #ff6600;\"&gt;注：&lt;/span&gt;镜像只是一个模板，每运行一次镜像后将产生一个容器，即容器是镜像运行后的产物</span><br><span class=\"line\"><span class=\"meta\">#</span>#例如Windows镜像安装之后成为系统，修改系统文件并不影响Windows镜像，并且Windows镜像可多次使用</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">以上代码运行结果：</span></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d289d0f25c97176091839e1a5c12de35.png\" alt=\"3.png\"></p>\n<p>此时访问<span style=\"color: #ff6600;\">localhost:1234</span>便可以看到<span style=\"color: #ff6600;\">tomcat</span>欢迎页：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/b3102d20fa30ede621a66551e734d05d.png\" alt=\"4.png\"></p>\n<p>此时说明启动tomcat成功！</p>\n<p><span style=\"color: #ff6600;\">查看正在运行中的容器（docker ps）：</span></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/ba4971a08b21b50d7d1324c06bd303fb.png\" alt=\"5.png\"></p>\n<h3 id=\"docker-attach-容器id-详解：\"><a href=\"#docker-attach-容器id-详解：\" class=\"headerlink\" title=\"docker attach 容器id  详解：\"></a>docker attach 容器id  详解：</h3><p>该命令可以再次进入为停止的容器，如使用<span style=\"color: #ff6600;\">Ctrl+p+q</span> 退出的容器</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/335a2c84b57ff90565a80f3f13309cd0.png\" alt=\"Snipaste_2018-09-12_22-13-54.png\"></p>\n<p><span style=\"color: #ff6600;\">注：因为进入的是tomcat，所以只会有一个光标不停闪动，或者只有tomcat日志输出，若进入的是docker版的centos系统中，</span><span style=\"color: #ff6600;\">将会进入到该centos系统的默认路径下。</span></p>\n<h3 id=\"docker-kill-容器id-详解：\"><a href=\"#docker-kill-容器id-详解：\" class=\"headerlink\" title=\"docker kill 容器id 详解：\"></a>docker kill 容器id 详解：</h3><p>执行命令后，指定容器的进程将会被停止</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/9d2c674e099e08e303ed22fdb3537cf9.png\" alt=\"7.png\"></p>\n<h3 id=\"docker-ps-a-详解：\"><a href=\"#docker-ps-a-详解：\" class=\"headerlink\" title=\"docker ps -a 详解：\"></a><span style=\"color: #333333;\">docker ps -a 详解：</span></h3><p>该命令可以查询出运行过的容器</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/f2d166a0f76be38d85fbb2d090069398.png\" alt=\"8.png\"></p>\n<h3 id=\"docker-start-stop-id-name-详解：\"><a href=\"#docker-start-stop-id-name-详解：\" class=\"headerlink\" title=\"docker start/stop id/name 详解：\"></a>docker start/stop id/name 详解：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start MyTomcat #启动刚才停止的tomcat容器</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d2e086937ce1909ca564b11962b5592b.png\" alt=\"9.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop MyTomcat #停止刚才启动的tomcat容器</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/cc66f716211f2cdc122f2fa15cc70175.png\" alt=\"10.png\"></p>\n<h3 id=\"docker-rm-容器id-name-详解：\"><a href=\"#docker-rm-容器id-name-详解：\" class=\"headerlink\" title=\"docker rm 容器id/name 详解：\"></a>docker rm 容器id/name 详解：</h3><p>该命令可以删除指定容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm MyTomcat #删除名字为MyTomcat的容器</span><br></pre></td></tr></table></figure>\n\n<p>!<img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/da8cf517303152fa439e4025d3d217f2.png\" alt=\"11.png\"></p>\n<h3 id=\"docker-rmi-id-name-删除某个镜像-详解：\"><a href=\"#docker-rmi-id-name-删除某个镜像-详解：\" class=\"headerlink\" title=\"docker rmi id/name 删除某个镜像  详解：\"></a>docker rmi id/name 删除某个镜像  详解：</h3><p>该命令可以删除指定镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi hello-world:TAG #不加TAG表示删除最新版</span><br><span class=\"line\"><span class=\"meta\">#</span>#可选参数##</span><br><span class=\"line\"><span class=\"meta\">#</span>-f 表示强制删除</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d229a9f3068e8ca887b7f9904458b293.png\" alt=\"12.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"docker常用命令：\"><a href=\"#docker常用命令：\" class=\"headerlink\" title=\"docker常用命令：\"></a>docker常用命令：</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 镜像名:TAG   从仓库拉取某镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker run 镜像名:TAG    运行某个镜像</span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+p+q    在容器中使用此命令可退出容器（保留容器进程）</span><br><span class=\"line\"></span><br><span class=\"line\">exit   在容器中使用此命令可退出容器（留容也会停止运行）</span><br><span class=\"line\"></span><br><span class=\"line\">docker kill 容器id   此命令可以停止指定容器的运行</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps 查看当前正在运行的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps -a 查看所有容器的状态</span><br><span class=\"line\"></span><br><span class=\"line\">docker start/stop id/name 启动/停止某个容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker attach 容器id 进入某个容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it id 启动一个伪终端以交互式的方式进入某个容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker images 查看本地镜像</span><br><span class=\"line\">docker rm id/name 删除某个容器</span><br><span class=\"line\">docker rmi id/name 删除某个镜像</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-pull-镜像名-TAG-详解\"><a href=\"#docker-pull-镜像名-TAG-详解\" class=\"headerlink\" title=\"docker pull 镜像名:TAG   详解:\"></a>docker pull 镜像名:TAG   详解:</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull tomcat:8.5</span><br><span class=\"line\"><span class=\"meta\">#</span>如果不指定:TAG则默认拉取最新版本</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">执行结果：</span></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/136bfbcf6e143ca71a2c3ec52b266b0d.png\" alt=\"1.png\"></p>\n<p><span style=\"color: #ff6600;\">查看本地镜像：</span></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/4e15c07d8717536a98a41367e6e4f3e7.png\" alt=\"2.png\"></p>\n<h4 id=\"docker-run-镜像名-TAG-详解：\"><a href=\"#docker-run-镜像名-TAG-详解：\" class=\"headerlink\" title=\"docker run 镜像名:TAG    详解：\"></a>docker run 镜像名:TAG    详解：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -p 1234:8080 -name MyTomcat tomcat</span><br><span class=\"line\"><span class=\"meta\">#</span>#可选参数## </span><br><span class=\"line\"><span class=\"meta\">#</span>-it 代表以启动一个伪终端交互式的方式运行镜像</span><br><span class=\"line\"><span class=\"meta\">#</span>-p  端口映射，将宿主机的1234端口（可指定其他）映射到tomcat的8080端口</span><br><span class=\"line\"><span class=\"meta\">#</span>-d  以守护进程的方式运行，即后台运行，不启动交互界面</span><br><span class=\"line\"><span class=\"meta\">#</span>--name 为容器命名，如不指定该参数，系统将默认为其命名</span><br><span class=\"line\"><span class=\"meta\">#</span>#&lt;span style=\"color: #ff6600;\"&gt;注：&lt;/span&gt;镜像只是一个模板，每运行一次镜像后将产生一个容器，即容器是镜像运行后的产物</span><br><span class=\"line\"><span class=\"meta\">#</span>#例如Windows镜像安装之后成为系统，修改系统文件并不影响Windows镜像，并且Windows镜像可多次使用</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">以上代码运行结果：</span></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d289d0f25c97176091839e1a5c12de35.png\" alt=\"3.png\"></p>\n<p>此时访问<span style=\"color: #ff6600;\">localhost:1234</span>便可以看到<span style=\"color: #ff6600;\">tomcat</span>欢迎页：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/b3102d20fa30ede621a66551e734d05d.png\" alt=\"4.png\"></p>\n<p>此时说明启动tomcat成功！</p>\n<p><span style=\"color: #ff6600;\">查看正在运行中的容器（docker ps）：</span></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/ba4971a08b21b50d7d1324c06bd303fb.png\" alt=\"5.png\"></p>\n<h3 id=\"docker-attach-容器id-详解：\"><a href=\"#docker-attach-容器id-详解：\" class=\"headerlink\" title=\"docker attach 容器id  详解：\"></a>docker attach 容器id  详解：</h3><p>该命令可以再次进入为停止的容器，如使用<span style=\"color: #ff6600;\">Ctrl+p+q</span> 退出的容器</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/335a2c84b57ff90565a80f3f13309cd0.png\" alt=\"Snipaste_2018-09-12_22-13-54.png\"></p>\n<p><span style=\"color: #ff6600;\">注：因为进入的是tomcat，所以只会有一个光标不停闪动，或者只有tomcat日志输出，若进入的是docker版的centos系统中，</span><span style=\"color: #ff6600;\">将会进入到该centos系统的默认路径下。</span></p>\n<h3 id=\"docker-kill-容器id-详解：\"><a href=\"#docker-kill-容器id-详解：\" class=\"headerlink\" title=\"docker kill 容器id 详解：\"></a>docker kill 容器id 详解：</h3><p>执行命令后，指定容器的进程将会被停止</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/9d2c674e099e08e303ed22fdb3537cf9.png\" alt=\"7.png\"></p>\n<h3 id=\"docker-ps-a-详解：\"><a href=\"#docker-ps-a-详解：\" class=\"headerlink\" title=\"docker ps -a 详解：\"></a><span style=\"color: #333333;\">docker ps -a 详解：</span></h3><p>该命令可以查询出运行过的容器</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/f2d166a0f76be38d85fbb2d090069398.png\" alt=\"8.png\"></p>\n<h3 id=\"docker-start-stop-id-name-详解：\"><a href=\"#docker-start-stop-id-name-详解：\" class=\"headerlink\" title=\"docker start/stop id/name 详解：\"></a>docker start/stop id/name 详解：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start MyTomcat #启动刚才停止的tomcat容器</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d2e086937ce1909ca564b11962b5592b.png\" alt=\"9.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop MyTomcat #停止刚才启动的tomcat容器</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/cc66f716211f2cdc122f2fa15cc70175.png\" alt=\"10.png\"></p>\n<h3 id=\"docker-rm-容器id-name-详解：\"><a href=\"#docker-rm-容器id-name-详解：\" class=\"headerlink\" title=\"docker rm 容器id/name 详解：\"></a>docker rm 容器id/name 详解：</h3><p>该命令可以删除指定容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm MyTomcat #删除名字为MyTomcat的容器</span><br></pre></td></tr></table></figure>\n\n<p>!<img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/da8cf517303152fa439e4025d3d217f2.png\" alt=\"11.png\"></p>\n<h3 id=\"docker-rmi-id-name-删除某个镜像-详解：\"><a href=\"#docker-rmi-id-name-删除某个镜像-详解：\" class=\"headerlink\" title=\"docker rmi id/name 删除某个镜像  详解：\"></a>docker rmi id/name 删除某个镜像  详解：</h3><p>该命令可以删除指定镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi hello-world:TAG #不加TAG表示删除最新版</span><br><span class=\"line\"><span class=\"meta\">#</span>#可选参数##</span><br><span class=\"line\"><span class=\"meta\">#</span>-f 表示强制删除</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d229a9f3068e8ca887b7f9904458b293.png\" alt=\"12.png\"></p>\n"},{"title":"Linux安装screen命令","date":"2019-07-07T15:48:56.000Z","top":null,"password":null,"_content":"\nscreen对于不支持SSH的虚拟主机没有作用，但是对于vps来说那可是用处大大的。\n不知道朋友们有没有在配置vps环境的时候出现突然中断或者要离开但是还没有配置完成的情况呢？\n\n我遇到很多回，往往已经快配置完成的时候出现短线等情况，那就要从头再安装配置，很是麻烦，有时要连续重新安装好几次系统才可以完成。\n现在有了screen命令就不用为此烦恼了。\n\n**screen命令是什么？**\nScreen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。\n**如何安装screen命令呢？**\nCentos执行:\nyum install screen\nDebian/Ubuntu执行:\napt-get install screen\n\n**怎么使用screen命令？**\n1、创建一个screen会话：\n`screen -S abc`\nabc为创建会话的名称\n\n2、创建好以后就可以正常安装和配置vps环境，如怕中途短线或者要离开，马上就可以使用\n快捷键**Ctrl+a d(即按住Ctrl，依次再按a,d)**来保存这个会话窗口\n当然程序还在自动进行不会关闭。\n\n3、需要恢复会话的时候就需要执行\n`screen -r abc`\n\n如果在恢复会话的时候忘记了或者没有设定会话名称我们就要执行：\n`screen -ls`\n\n他会列出你所有的会话列表，然后使用：\n`screen -r 会话名称`\n来恢复会话窗口。\n\n4、关闭screen的会话\n`exit`\n会提示：[screen is terminating]，表示已经成功退出screen会话。\n\n5、screen命令常用的一些快捷键：\n\n```shell\nCtrl+a c ：在当前screen会话中创建窗口\nCtrl+a w ：窗口列表\nCtrl+a n ：下一个窗口\nCtrl+a p ：上一个窗口\nCtrl+a 0-9 ：在第0个窗口和第9个窗口之间切换\n```\n\n在此记录以便查阅.","source":"_posts/Linux安装screen命令.md","raw":"---\ntitle: Linux安装screen命令\ndate: 2019-07-07 23:48:56\ncategories: Linux\ntags: Linux\ntop:\npassword:\n---\n\nscreen对于不支持SSH的虚拟主机没有作用，但是对于vps来说那可是用处大大的。\n不知道朋友们有没有在配置vps环境的时候出现突然中断或者要离开但是还没有配置完成的情况呢？\n\n我遇到很多回，往往已经快配置完成的时候出现短线等情况，那就要从头再安装配置，很是麻烦，有时要连续重新安装好几次系统才可以完成。\n现在有了screen命令就不用为此烦恼了。\n\n**screen命令是什么？**\nScreen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。\n**如何安装screen命令呢？**\nCentos执行:\nyum install screen\nDebian/Ubuntu执行:\napt-get install screen\n\n**怎么使用screen命令？**\n1、创建一个screen会话：\n`screen -S abc`\nabc为创建会话的名称\n\n2、创建好以后就可以正常安装和配置vps环境，如怕中途短线或者要离开，马上就可以使用\n快捷键**Ctrl+a d(即按住Ctrl，依次再按a,d)**来保存这个会话窗口\n当然程序还在自动进行不会关闭。\n\n3、需要恢复会话的时候就需要执行\n`screen -r abc`\n\n如果在恢复会话的时候忘记了或者没有设定会话名称我们就要执行：\n`screen -ls`\n\n他会列出你所有的会话列表，然后使用：\n`screen -r 会话名称`\n来恢复会话窗口。\n\n4、关闭screen的会话\n`exit`\n会提示：[screen is terminating]，表示已经成功退出screen会话。\n\n5、screen命令常用的一些快捷键：\n\n```shell\nCtrl+a c ：在当前screen会话中创建窗口\nCtrl+a w ：窗口列表\nCtrl+a n ：下一个窗口\nCtrl+a p ：上一个窗口\nCtrl+a 0-9 ：在第0个窗口和第9个窗口之间切换\n```\n\n在此记录以便查阅.","slug":"Linux安装screen命令","published":1,"updated":"2019-07-08T01:49:09.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd54v0006u8tvx995wejm","content":"<p>screen对于不支持SSH的虚拟主机没有作用，但是对于vps来说那可是用处大大的。<br>不知道朋友们有没有在配置vps环境的时候出现突然中断或者要离开但是还没有配置完成的情况呢？</p>\n<p>我遇到很多回，往往已经快配置完成的时候出现短线等情况，那就要从头再安装配置，很是麻烦，有时要连续重新安装好几次系统才可以完成。<br>现在有了screen命令就不用为此烦恼了。</p>\n<p><strong>screen命令是什么？</strong><br>Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。<br><strong>如何安装screen命令呢？</strong><br>Centos执行:<br>yum install screen<br>Debian/Ubuntu执行:<br>apt-get install screen</p>\n<p><strong>怎么使用screen命令？</strong><br>1、创建一个screen会话：<br><code>screen -S abc</code><br>abc为创建会话的名称</p>\n<p>2、创建好以后就可以正常安装和配置vps环境，如怕中途短线或者要离开，马上就可以使用<br>快捷键<strong>Ctrl+a d(即按住Ctrl，依次再按a,d)</strong>来保存这个会话窗口<br>当然程序还在自动进行不会关闭。</p>\n<p>3、需要恢复会话的时候就需要执行<br><code>screen -r abc</code></p>\n<p>如果在恢复会话的时候忘记了或者没有设定会话名称我们就要执行：<br><code>screen -ls</code></p>\n<p>他会列出你所有的会话列表，然后使用：<br><code>screen -r 会话名称</code><br>来恢复会话窗口。</p>\n<p>4、关闭screen的会话<br><code>exit</code><br>会提示：[screen is terminating]，表示已经成功退出screen会话。</p>\n<p>5、screen命令常用的一些快捷键：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+a c ：在当前screen会话中创建窗口</span><br><span class=\"line\">Ctrl+a w ：窗口列表</span><br><span class=\"line\">Ctrl+a n ：下一个窗口</span><br><span class=\"line\">Ctrl+a p ：上一个窗口</span><br><span class=\"line\">Ctrl+a 0-9 ：在第0个窗口和第9个窗口之间切换</span><br></pre></td></tr></table></figure>\n\n<p>在此记录以便查阅.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>screen对于不支持SSH的虚拟主机没有作用，但是对于vps来说那可是用处大大的。<br>不知道朋友们有没有在配置vps环境的时候出现突然中断或者要离开但是还没有配置完成的情况呢？</p>\n<p>我遇到很多回，往往已经快配置完成的时候出现短线等情况，那就要从头再安装配置，很是麻烦，有时要连续重新安装好几次系统才可以完成。<br>现在有了screen命令就不用为此烦恼了。</p>\n<p><strong>screen命令是什么？</strong><br>Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。<br><strong>如何安装screen命令呢？</strong><br>Centos执行:<br>yum install screen<br>Debian/Ubuntu执行:<br>apt-get install screen</p>\n<p><strong>怎么使用screen命令？</strong><br>1、创建一个screen会话：<br><code>screen -S abc</code><br>abc为创建会话的名称</p>\n<p>2、创建好以后就可以正常安装和配置vps环境，如怕中途短线或者要离开，马上就可以使用<br>快捷键<strong>Ctrl+a d(即按住Ctrl，依次再按a,d)</strong>来保存这个会话窗口<br>当然程序还在自动进行不会关闭。</p>\n<p>3、需要恢复会话的时候就需要执行<br><code>screen -r abc</code></p>\n<p>如果在恢复会话的时候忘记了或者没有设定会话名称我们就要执行：<br><code>screen -ls</code></p>\n<p>他会列出你所有的会话列表，然后使用：<br><code>screen -r 会话名称</code><br>来恢复会话窗口。</p>\n<p>4、关闭screen的会话<br><code>exit</code><br>会提示：[screen is terminating]，表示已经成功退出screen会话。</p>\n<p>5、screen命令常用的一些快捷键：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+a c ：在当前screen会话中创建窗口</span><br><span class=\"line\">Ctrl+a w ：窗口列表</span><br><span class=\"line\">Ctrl+a n ：下一个窗口</span><br><span class=\"line\">Ctrl+a p ：上一个窗口</span><br><span class=\"line\">Ctrl+a 0-9 ：在第0个窗口和第9个窗口之间切换</span><br></pre></td></tr></table></figure>\n\n<p>在此记录以便查阅.</p>\n"},{"title":"Docker学习笔记（二）Docker(V18.03)安装配置","date":"2019-07-06T10:00:29.000Z","_content":"\n### OS要求\n\n要安装Docker CE，您需要CentOS 7及以上版本。\n\n### 卸载旧版本\n\n较旧版本的Docker被称为`docker`或`docker-engine`。如果已安装这些，请卸载它们以及相关的依赖项。代码如下\n\n```shell\n$ sudo yum remove docker \\\n          docker-client \\\n          docker-client-latest \\\n          docker-common \\\n          docker-latest \\\n          docker-latest-logrotate \\\n          docker-logrotate \\\n          docker-selinux \\\n          docker-engine-selinux \\\n          docker-engine`\n注意 \"\\\"为shell脚本的连接符，同java的\"+\"\n```\n\n<span style=\"color: #ff6600;\">如果系统未安装过docker，则提示如下</span>：\n\n![1.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/a55ec63c0fc0581d66a717ca235d3cbf.jpg)\n\n## 安装Docker CE（社区版，免费）\n\n### 使用存储库安装\n\n在新主机上首次安装Docker CE之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。\n\n#### 设置存储库\n\n#### 1.安装所需的包。`yum-utils`提供了`yum-config-manager` ，并且`devicemapper`存储驱动程序依赖`device-mapper-persistent-data`和`lvm2`。\n\n```shell\n$ sudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n\n<span style=\"color: #ff6600;\">执行结果</span>：\n\n![2.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/19cb985de4bdb509cfbfe52b1159ff3c.jpg)\n\n#### 2.使用以下命令设置**稳定**存储库。即使你还想从**edge**或**test**存储库安装构建，你仍然需要**稳定的**存储库。\n\n```shell\n$ sudo yum-config-manager --add -repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n<span style=\"color: #ff6600;\">执行结果</span>：\n\n![3.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/6f0f4402511cb1b51db93496510c2783.jpg)\n\n#### 3.（可选）启用**edge**和**test**存储库。这些存储库包含在`docker.repo`上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。\n\n```shell\n$ sudo yum-config-manager --enable docker-ce-edge\n$ sudo yum-config-manager --enable docker-ce-test\n```\n\n#### 您可以通过运行带有标志的命令来禁用**edge**或**test**存储库 。要重新启用它，请使用该标志。以下命令禁用**edge**存储库。`yum-config-manager``--disable``--enable`\n\n```shell\n$ sudo yum-config-manager --disable docker-ce-edge\n```\n\n#### <span style=\"color: #ff6600;\">**注意**</span>：从Docker 17.06开始，稳定版本也会被推送到**边缘**并**测试**存储库。 安装DOCKER CE\n\n1. 安装_最新版本_的Docker CE，或转到下一步安装特定版本：\n\n   ```shell\n   $ sudo yum install docker-ce\n   ```\n\n##### <span style=\"color: #ff6600;\">如果提示接受GPG密钥，请验证指纹是否匹配</span>\n\n##### <span style=\"color: #ff6600;\">`060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35`，</span>\n\n##### <span style=\"color: #ff6600;\">如果匹配 ，则接受它。</span>\n\n<span style=\"color: #ff6600;\">此处确认无误，选择y确定</span>：\n\n![4.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e9e728e4a309c8d9e6e67638a51636ac.jpg)     \n\n<span style=\"color: #ff6600;\">指纹比对正确，选择y继续</span>：\n\n![5.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e3dca310a88f200ed072a9e50f764edc.jpg)\n\n<span style=\"color: #ff6600;\">最终结果</span>：\n\n![6.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/24cd06e2ed9927862d4231b155107d99.jpg)\n\n<span style=\"color: #333333;\"> 2.您还可以使用</span>`$ sudo yum install docker-ce-<版本号>`来安装指定版本的docker，例如安装17.06版本\n\n```shell\n$ sudo yum install docker-ce-<17.06>\n```\n\n3.启动Docker。\n\n```shell\n$ sudo systemctl start docker\n```\n\n<span style=\"color: #ff6600;\">注意：<span style=\"color: #333333;\">docker启动后不会有任何输出</span></span>\n\n4.`docker`通过运行`hello-world` 映像验证是否已正确安装。\n\n```shell\n$ sudo docker run hello-world\n```\n\n<span style=\"color: #ff6600;\">执行命令后如果你看到如下图所示，那么恭喜，docker安装成功！</span>\n\n![7.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/9e818831fbf2e690c7d5728a5d5c8431.jpg)\n\n","source":"_posts/Docker学习笔记（二）Docker-V18-03-安装配置.md","raw":"---\ntitle: Docker学习笔记（二）Docker(V18.03)安装配置\ncategories: Docker\ndate: 2019-07-06 18:00:29\ntags: Docker\n---\n\n### OS要求\n\n要安装Docker CE，您需要CentOS 7及以上版本。\n\n### 卸载旧版本\n\n较旧版本的Docker被称为`docker`或`docker-engine`。如果已安装这些，请卸载它们以及相关的依赖项。代码如下\n\n```shell\n$ sudo yum remove docker \\\n          docker-client \\\n          docker-client-latest \\\n          docker-common \\\n          docker-latest \\\n          docker-latest-logrotate \\\n          docker-logrotate \\\n          docker-selinux \\\n          docker-engine-selinux \\\n          docker-engine`\n注意 \"\\\"为shell脚本的连接符，同java的\"+\"\n```\n\n<span style=\"color: #ff6600;\">如果系统未安装过docker，则提示如下</span>：\n\n![1.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/a55ec63c0fc0581d66a717ca235d3cbf.jpg)\n\n## 安装Docker CE（社区版，免费）\n\n### 使用存储库安装\n\n在新主机上首次安装Docker CE之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。\n\n#### 设置存储库\n\n#### 1.安装所需的包。`yum-utils`提供了`yum-config-manager` ，并且`devicemapper`存储驱动程序依赖`device-mapper-persistent-data`和`lvm2`。\n\n```shell\n$ sudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n\n<span style=\"color: #ff6600;\">执行结果</span>：\n\n![2.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/19cb985de4bdb509cfbfe52b1159ff3c.jpg)\n\n#### 2.使用以下命令设置**稳定**存储库。即使你还想从**edge**或**test**存储库安装构建，你仍然需要**稳定的**存储库。\n\n```shell\n$ sudo yum-config-manager --add -repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n<span style=\"color: #ff6600;\">执行结果</span>：\n\n![3.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/6f0f4402511cb1b51db93496510c2783.jpg)\n\n#### 3.（可选）启用**edge**和**test**存储库。这些存储库包含在`docker.repo`上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。\n\n```shell\n$ sudo yum-config-manager --enable docker-ce-edge\n$ sudo yum-config-manager --enable docker-ce-test\n```\n\n#### 您可以通过运行带有标志的命令来禁用**edge**或**test**存储库 。要重新启用它，请使用该标志。以下命令禁用**edge**存储库。`yum-config-manager``--disable``--enable`\n\n```shell\n$ sudo yum-config-manager --disable docker-ce-edge\n```\n\n#### <span style=\"color: #ff6600;\">**注意**</span>：从Docker 17.06开始，稳定版本也会被推送到**边缘**并**测试**存储库。 安装DOCKER CE\n\n1. 安装_最新版本_的Docker CE，或转到下一步安装特定版本：\n\n   ```shell\n   $ sudo yum install docker-ce\n   ```\n\n##### <span style=\"color: #ff6600;\">如果提示接受GPG密钥，请验证指纹是否匹配</span>\n\n##### <span style=\"color: #ff6600;\">`060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35`，</span>\n\n##### <span style=\"color: #ff6600;\">如果匹配 ，则接受它。</span>\n\n<span style=\"color: #ff6600;\">此处确认无误，选择y确定</span>：\n\n![4.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e9e728e4a309c8d9e6e67638a51636ac.jpg)     \n\n<span style=\"color: #ff6600;\">指纹比对正确，选择y继续</span>：\n\n![5.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e3dca310a88f200ed072a9e50f764edc.jpg)\n\n<span style=\"color: #ff6600;\">最终结果</span>：\n\n![6.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/24cd06e2ed9927862d4231b155107d99.jpg)\n\n<span style=\"color: #333333;\"> 2.您还可以使用</span>`$ sudo yum install docker-ce-<版本号>`来安装指定版本的docker，例如安装17.06版本\n\n```shell\n$ sudo yum install docker-ce-<17.06>\n```\n\n3.启动Docker。\n\n```shell\n$ sudo systemctl start docker\n```\n\n<span style=\"color: #ff6600;\">注意：<span style=\"color: #333333;\">docker启动后不会有任何输出</span></span>\n\n4.`docker`通过运行`hello-world` 映像验证是否已正确安装。\n\n```shell\n$ sudo docker run hello-world\n```\n\n<span style=\"color: #ff6600;\">执行命令后如果你看到如下图所示，那么恭喜，docker安装成功！</span>\n\n![7.jpg](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/9e818831fbf2e690c7d5728a5d5c8431.jpg)\n\n","slug":"Docker学习笔记（二）Docker-V18-03-安装配置","published":1,"updated":"2019-07-08T01:49:09.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd54x000au8tvf12k9ddv","content":"<h3 id=\"OS要求\"><a href=\"#OS要求\" class=\"headerlink\" title=\"OS要求\"></a>OS要求</h3><p>要安装Docker CE，您需要CentOS 7及以上版本。</p>\n<h3 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h3><p>较旧版本的Docker被称为<code>docker</code>或<code>docker-engine</code>。如果已安装这些，请卸载它们以及相关的依赖项。代码如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum remove docker \\</span><br><span class=\"line\">          docker-client \\</span><br><span class=\"line\">          docker-client-latest \\</span><br><span class=\"line\">          docker-common \\</span><br><span class=\"line\">          docker-latest \\</span><br><span class=\"line\">          docker-latest-logrotate \\</span><br><span class=\"line\">          docker-logrotate \\</span><br><span class=\"line\">          docker-selinux \\</span><br><span class=\"line\">          docker-engine-selinux \\</span><br><span class=\"line\">          docker-engine`</span><br><span class=\"line\">注意 \"\\\"为shell脚本的连接符，同java的\"+\"</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">如果系统未安装过docker，则提示如下</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/a55ec63c0fc0581d66a717ca235d3cbf.jpg\" alt=\"1.jpg\"></p>\n<h2 id=\"安装Docker-CE（社区版，免费）\"><a href=\"#安装Docker-CE（社区版，免费）\" class=\"headerlink\" title=\"安装Docker CE（社区版，免费）\"></a>安装Docker CE（社区版，免费）</h2><h3 id=\"使用存储库安装\"><a href=\"#使用存储库安装\" class=\"headerlink\" title=\"使用存储库安装\"></a>使用存储库安装</h3><p>在新主机上首次安装Docker CE之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。</p>\n<h4 id=\"设置存储库\"><a href=\"#设置存储库\" class=\"headerlink\" title=\"设置存储库\"></a>设置存储库</h4><h4 id=\"1-安装所需的包。yum-utils提供了yum-config-manager-，并且devicemapper存储驱动程序依赖device-mapper-persistent-data和lvm2。\"><a href=\"#1-安装所需的包。yum-utils提供了yum-config-manager-，并且devicemapper存储驱动程序依赖device-mapper-persistent-data和lvm2。\" class=\"headerlink\" title=\"1.安装所需的包。yum-utils提供了yum-config-manager ，并且devicemapper存储驱动程序依赖device-mapper-persistent-data和lvm2。\"></a>1.安装所需的包。<code>yum-utils</code>提供了<code>yum-config-manager</code> ，并且<code>devicemapper</code>存储驱动程序依赖<code>device-mapper-persistent-data</code>和<code>lvm2</code>。</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">执行结果</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/19cb985de4bdb509cfbfe52b1159ff3c.jpg\" alt=\"2.jpg\"></p>\n<h4 id=\"2-使用以下命令设置稳定存储库。即使你还想从edge或test存储库安装构建，你仍然需要稳定的存储库。\"><a href=\"#2-使用以下命令设置稳定存储库。即使你还想从edge或test存储库安装构建，你仍然需要稳定的存储库。\" class=\"headerlink\" title=\"2.使用以下命令设置稳定存储库。即使你还想从edge或test存储库安装构建，你仍然需要稳定的存储库。\"></a>2.使用以下命令设置<strong>稳定</strong>存储库。即使你还想从<strong>edge</strong>或<strong>test</strong>存储库安装构建，你仍然需要<strong>稳定的</strong>存储库。</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --add -repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">执行结果</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/6f0f4402511cb1b51db93496510c2783.jpg\" alt=\"3.jpg\"></p>\n<h4 id=\"3-（可选）启用edge和test存储库。这些存储库包含在docker-repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。\"><a href=\"#3-（可选）启用edge和test存储库。这些存储库包含在docker-repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。\" class=\"headerlink\" title=\"3.（可选）启用edge和test存储库。这些存储库包含在docker.repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。\"></a>3.（可选）启用<strong>edge</strong>和<strong>test</strong>存储库。这些存储库包含在<code>docker.repo</code>上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --enable docker-ce-edge</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"您可以通过运行带有标志的命令来禁用edge或test存储库-。要重新启用它，请使用该标志。以下命令禁用edge存储库。yum-config-manager-disable-enable\"><a href=\"#您可以通过运行带有标志的命令来禁用edge或test存储库-。要重新启用它，请使用该标志。以下命令禁用edge存储库。yum-config-manager-disable-enable\" class=\"headerlink\" title=\"您可以通过运行带有标志的命令来禁用edge或test存储库 。要重新启用它，请使用该标志。以下命令禁用edge存储库。yum-config-manager``--disable``--enable\"></a>您可以通过运行带有标志的命令来禁用<strong>edge</strong>或<strong>test</strong>存储库 。要重新启用它，请使用该标志。以下命令禁用<strong>edge</strong>存储库。<code>yum-config-manager``--disable``--enable</code></h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --disable docker-ce-edge</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意：从Docker-17-06开始，稳定版本也会被推送到边缘并测试存储库。-安装DOCKER-CE\"><a href=\"#注意：从Docker-17-06开始，稳定版本也会被推送到边缘并测试存储库。-安装DOCKER-CE\" class=\"headerlink\" title=\"注意：从Docker 17.06开始，稳定版本也会被推送到边缘并测试存储库。 安装DOCKER CE\"></a><span style=\"color: #ff6600;\"><strong>注意</strong></span>：从Docker 17.06开始，稳定版本也会被推送到<strong>边缘</strong>并<strong>测试</strong>存储库。 安装DOCKER CE</h4><ol>\n<li><p>安装_最新版本_的Docker CE，或转到下一步安装特定版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"如果提示接受GPG密钥，请验证指纹是否匹配\"><a href=\"#如果提示接受GPG密钥，请验证指纹是否匹配\" class=\"headerlink\" title=\"如果提示接受GPG密钥，请验证指纹是否匹配\"></a><span style=\"color: #ff6600;\">如果提示接受GPG密钥，请验证指纹是否匹配</span></h5><h5 id=\"060A-61C5-1B55-8A7F-742B-77AA-C52F-EB6B-621E-9F35，\"><a href=\"#060A-61C5-1B55-8A7F-742B-77AA-C52F-EB6B-621E-9F35，\" class=\"headerlink\" title=\"060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35，\"></a><span style=\"color: #ff6600;\"><code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>，</span></h5><h5 id=\"如果匹配-，则接受它。\"><a href=\"#如果匹配-，则接受它。\" class=\"headerlink\" title=\"如果匹配 ，则接受它。\"></a><span style=\"color: #ff6600;\">如果匹配 ，则接受它。</span></h5><p><span style=\"color: #ff6600;\">此处确认无误，选择y确定</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e9e728e4a309c8d9e6e67638a51636ac.jpg\" alt=\"4.jpg\">     </p>\n<p><span style=\"color: #ff6600;\">指纹比对正确，选择y继续</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e3dca310a88f200ed072a9e50f764edc.jpg\" alt=\"5.jpg\"></p>\n<p><span style=\"color: #ff6600;\">最终结果</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/24cd06e2ed9927862d4231b155107d99.jpg\" alt=\"6.jpg\"></p>\n<p><span style=\"color: #333333;\"> 2.您还可以使用</span><code>$ sudo yum install docker-ce-&lt;版本号&gt;</code>来安装指定版本的docker，例如安装17.06版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install docker-ce-&lt;17.06&gt;</span><br></pre></td></tr></table></figure>\n\n<p>3.启动Docker。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">注意：<span style=\"color: #333333;\">docker启动后不会有任何输出</span></span></p>\n<p>4.<code>docker</code>通过运行<code>hello-world</code> 映像验证是否已正确安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">执行命令后如果你看到如下图所示，那么恭喜，docker安装成功！</span></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/9e818831fbf2e690c7d5728a5d5c8431.jpg\" alt=\"7.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"OS要求\"><a href=\"#OS要求\" class=\"headerlink\" title=\"OS要求\"></a>OS要求</h3><p>要安装Docker CE，您需要CentOS 7及以上版本。</p>\n<h3 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h3><p>较旧版本的Docker被称为<code>docker</code>或<code>docker-engine</code>。如果已安装这些，请卸载它们以及相关的依赖项。代码如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum remove docker \\</span><br><span class=\"line\">          docker-client \\</span><br><span class=\"line\">          docker-client-latest \\</span><br><span class=\"line\">          docker-common \\</span><br><span class=\"line\">          docker-latest \\</span><br><span class=\"line\">          docker-latest-logrotate \\</span><br><span class=\"line\">          docker-logrotate \\</span><br><span class=\"line\">          docker-selinux \\</span><br><span class=\"line\">          docker-engine-selinux \\</span><br><span class=\"line\">          docker-engine`</span><br><span class=\"line\">注意 \"\\\"为shell脚本的连接符，同java的\"+\"</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">如果系统未安装过docker，则提示如下</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/a55ec63c0fc0581d66a717ca235d3cbf.jpg\" alt=\"1.jpg\"></p>\n<h2 id=\"安装Docker-CE（社区版，免费）\"><a href=\"#安装Docker-CE（社区版，免费）\" class=\"headerlink\" title=\"安装Docker CE（社区版，免费）\"></a>安装Docker CE（社区版，免费）</h2><h3 id=\"使用存储库安装\"><a href=\"#使用存储库安装\" class=\"headerlink\" title=\"使用存储库安装\"></a>使用存储库安装</h3><p>在新主机上首次安装Docker CE之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。</p>\n<h4 id=\"设置存储库\"><a href=\"#设置存储库\" class=\"headerlink\" title=\"设置存储库\"></a>设置存储库</h4><h4 id=\"1-安装所需的包。yum-utils提供了yum-config-manager-，并且devicemapper存储驱动程序依赖device-mapper-persistent-data和lvm2。\"><a href=\"#1-安装所需的包。yum-utils提供了yum-config-manager-，并且devicemapper存储驱动程序依赖device-mapper-persistent-data和lvm2。\" class=\"headerlink\" title=\"1.安装所需的包。yum-utils提供了yum-config-manager ，并且devicemapper存储驱动程序依赖device-mapper-persistent-data和lvm2。\"></a>1.安装所需的包。<code>yum-utils</code>提供了<code>yum-config-manager</code> ，并且<code>devicemapper</code>存储驱动程序依赖<code>device-mapper-persistent-data</code>和<code>lvm2</code>。</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">执行结果</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/19cb985de4bdb509cfbfe52b1159ff3c.jpg\" alt=\"2.jpg\"></p>\n<h4 id=\"2-使用以下命令设置稳定存储库。即使你还想从edge或test存储库安装构建，你仍然需要稳定的存储库。\"><a href=\"#2-使用以下命令设置稳定存储库。即使你还想从edge或test存储库安装构建，你仍然需要稳定的存储库。\" class=\"headerlink\" title=\"2.使用以下命令设置稳定存储库。即使你还想从edge或test存储库安装构建，你仍然需要稳定的存储库。\"></a>2.使用以下命令设置<strong>稳定</strong>存储库。即使你还想从<strong>edge</strong>或<strong>test</strong>存储库安装构建，你仍然需要<strong>稳定的</strong>存储库。</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --add -repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">执行结果</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/6f0f4402511cb1b51db93496510c2783.jpg\" alt=\"3.jpg\"></p>\n<h4 id=\"3-（可选）启用edge和test存储库。这些存储库包含在docker-repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。\"><a href=\"#3-（可选）启用edge和test存储库。这些存储库包含在docker-repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。\" class=\"headerlink\" title=\"3.（可选）启用edge和test存储库。这些存储库包含在docker.repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。\"></a>3.（可选）启用<strong>edge</strong>和<strong>test</strong>存储库。这些存储库包含在<code>docker.repo</code>上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --enable docker-ce-edge</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"您可以通过运行带有标志的命令来禁用edge或test存储库-。要重新启用它，请使用该标志。以下命令禁用edge存储库。yum-config-manager-disable-enable\"><a href=\"#您可以通过运行带有标志的命令来禁用edge或test存储库-。要重新启用它，请使用该标志。以下命令禁用edge存储库。yum-config-manager-disable-enable\" class=\"headerlink\" title=\"您可以通过运行带有标志的命令来禁用edge或test存储库 。要重新启用它，请使用该标志。以下命令禁用edge存储库。yum-config-manager``--disable``--enable\"></a>您可以通过运行带有标志的命令来禁用<strong>edge</strong>或<strong>test</strong>存储库 。要重新启用它，请使用该标志。以下命令禁用<strong>edge</strong>存储库。<code>yum-config-manager``--disable``--enable</code></h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --disable docker-ce-edge</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意：从Docker-17-06开始，稳定版本也会被推送到边缘并测试存储库。-安装DOCKER-CE\"><a href=\"#注意：从Docker-17-06开始，稳定版本也会被推送到边缘并测试存储库。-安装DOCKER-CE\" class=\"headerlink\" title=\"注意：从Docker 17.06开始，稳定版本也会被推送到边缘并测试存储库。 安装DOCKER CE\"></a><span style=\"color: #ff6600;\"><strong>注意</strong></span>：从Docker 17.06开始，稳定版本也会被推送到<strong>边缘</strong>并<strong>测试</strong>存储库。 安装DOCKER CE</h4><ol>\n<li><p>安装_最新版本_的Docker CE，或转到下一步安装特定版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"如果提示接受GPG密钥，请验证指纹是否匹配\"><a href=\"#如果提示接受GPG密钥，请验证指纹是否匹配\" class=\"headerlink\" title=\"如果提示接受GPG密钥，请验证指纹是否匹配\"></a><span style=\"color: #ff6600;\">如果提示接受GPG密钥，请验证指纹是否匹配</span></h5><h5 id=\"060A-61C5-1B55-8A7F-742B-77AA-C52F-EB6B-621E-9F35，\"><a href=\"#060A-61C5-1B55-8A7F-742B-77AA-C52F-EB6B-621E-9F35，\" class=\"headerlink\" title=\"060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35，\"></a><span style=\"color: #ff6600;\"><code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>，</span></h5><h5 id=\"如果匹配-，则接受它。\"><a href=\"#如果匹配-，则接受它。\" class=\"headerlink\" title=\"如果匹配 ，则接受它。\"></a><span style=\"color: #ff6600;\">如果匹配 ，则接受它。</span></h5><p><span style=\"color: #ff6600;\">此处确认无误，选择y确定</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e9e728e4a309c8d9e6e67638a51636ac.jpg\" alt=\"4.jpg\">     </p>\n<p><span style=\"color: #ff6600;\">指纹比对正确，选择y继续</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e3dca310a88f200ed072a9e50f764edc.jpg\" alt=\"5.jpg\"></p>\n<p><span style=\"color: #ff6600;\">最终结果</span>：</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/24cd06e2ed9927862d4231b155107d99.jpg\" alt=\"6.jpg\"></p>\n<p><span style=\"color: #333333;\"> 2.您还可以使用</span><code>$ sudo yum install docker-ce-&lt;版本号&gt;</code>来安装指定版本的docker，例如安装17.06版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install docker-ce-&lt;17.06&gt;</span><br></pre></td></tr></table></figure>\n\n<p>3.启动Docker。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">注意：<span style=\"color: #333333;\">docker启动后不会有任何输出</span></span></p>\n<p>4.<code>docker</code>通过运行<code>hello-world</code> 映像验证是否已正确安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff6600;\">执行命令后如果你看到如下图所示，那么恭喜，docker安装成功！</span></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/9e818831fbf2e690c7d5728a5d5c8431.jpg\" alt=\"7.jpg\"></p>\n"},{"title":"Redis学习笔记（一）redis安装（Centos7）和简单存取数据","date":"2019-07-07T16:20:57.000Z","top":null,"password":null,"_content":"\nredis是非关系型数据库（NoSql），NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。\n\n### redis的安装\n\n1.创建myredis文件夹\n\n```\nmkdir myredis\n```\n\n2.下载redis最新版https://redis.io/\n\n可以直接下载再传到Centos系统中，也可以在Centos中使用如下命令直接下载\n\n```\ncd myredis #进入文件夹\nwget http://download.redis.io/releases/redis-4.0.11.tar.gz  #官网获取的最新版下载地址\n```\n\n![1.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/93208aaf8c9e9eda078781d97446e5df.png)\n\n解压文件\n\n```\ntar -zxvf redis-4.0.11.tar.gz\n```\n\n![2.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/25903b2c36c69056aef412f63c16ac69.png)\n\n安装gcc（redis是用C语言开发的，需要gcc编译）\n\n```\nyum install gcc-c++\n```\n\n![3.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/e650d043a789e8145a8fa2924b9c1ac0.png)\n\n进入 redis-4.0.11 文件夹并安装\n\n```\ncd redis-4.0.11\n```\n\n![4.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/c4eaec43d4e699459ff52749c4883306.png)\n\n```\nmake  #编译\n```\n\n![5.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/aa08428fb3d6fe9e0db2974a95c46a74.png)\n\n```\nmake install  #安装\n```\n\n![6.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/28574d869b698bf640bc38e4fe298c47.png)\n\n配置redis\n\n![7.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/71d669562446b3f742908e02ef00eb7f.png)\n\n```\nvi redis.conf\n#将GENERAL中 daemonize 设置为yes\n```\n\n![8.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/ef49c702af0dcbbd1b8240e42c96095d.png)\n\n### 启动redis\n\n进入 /root/myredis/redis-4.0.11/src 目录\n\n```\ncd /root/myredis/redis-4.0.11/src\n```\n\n![9.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/4754f06480636416931deb80b67cebff.png)\n\n启动redis\n\n```\nredis-server ../redis.conf\n```\n\n![10.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/176154826b9137d9058a207706a02c01.png)\n\n查看进程是否启动\n\n```\nps -ef|grep redis\n```\n\n![11.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/832ef01f844d7c0904152da427aa9464.png)\n\n可见默认端口是 **6379** 服务端已经启动\n\n### 简单的数据存取\n\n在redis中数据是以键值对（Key-value）形式存储的\n\n启动客户端\n\n```\nredis-cli\n```\n\n![Snipaste_2018-09-19_23-18-04.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/8a615f99da40dc273a8c72ed047ec621.png)\n\n存数据\n\n```\nset myFirstData hello-world\n```\n\n![12.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/9765d9e2bd31b990e98f7c693bbcdb55.png)\n\n取数据\n\n```\nget myFirstData\n```\n\n到这里，如果redis存取正常，那么恭喜你，安装完成！\n\n### 退出客户端\n\n```\nexit\n```\n\n### 关闭服务端\n\n```\nredis-cli -p 6379 shutdown\n# -p为可选项 默认6379，多个redis运行的情况下需要指明要关闭redis的端口\n```\n\n![13.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/d6f31ecc534d517806fa020389a7454c.png)\n\n可见redis已经被关闭","source":"_posts/Redis学习笔记（一）redis安装（Centos7）和简单存取数据.md","raw":"---\ntitle: Redis学习笔记（一）redis安装（Centos7）和简单存取数据\ndate: 2019-07-08 00:20:57\ncategories: Redis\ntags: Redis\ntop:\npassword:\n---\n\nredis是非关系型数据库（NoSql），NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。\n\n### redis的安装\n\n1.创建myredis文件夹\n\n```\nmkdir myredis\n```\n\n2.下载redis最新版https://redis.io/\n\n可以直接下载再传到Centos系统中，也可以在Centos中使用如下命令直接下载\n\n```\ncd myredis #进入文件夹\nwget http://download.redis.io/releases/redis-4.0.11.tar.gz  #官网获取的最新版下载地址\n```\n\n![1.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/93208aaf8c9e9eda078781d97446e5df.png)\n\n解压文件\n\n```\ntar -zxvf redis-4.0.11.tar.gz\n```\n\n![2.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/25903b2c36c69056aef412f63c16ac69.png)\n\n安装gcc（redis是用C语言开发的，需要gcc编译）\n\n```\nyum install gcc-c++\n```\n\n![3.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/e650d043a789e8145a8fa2924b9c1ac0.png)\n\n进入 redis-4.0.11 文件夹并安装\n\n```\ncd redis-4.0.11\n```\n\n![4.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/c4eaec43d4e699459ff52749c4883306.png)\n\n```\nmake  #编译\n```\n\n![5.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/aa08428fb3d6fe9e0db2974a95c46a74.png)\n\n```\nmake install  #安装\n```\n\n![6.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/28574d869b698bf640bc38e4fe298c47.png)\n\n配置redis\n\n![7.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/71d669562446b3f742908e02ef00eb7f.png)\n\n```\nvi redis.conf\n#将GENERAL中 daemonize 设置为yes\n```\n\n![8.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/ef49c702af0dcbbd1b8240e42c96095d.png)\n\n### 启动redis\n\n进入 /root/myredis/redis-4.0.11/src 目录\n\n```\ncd /root/myredis/redis-4.0.11/src\n```\n\n![9.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/4754f06480636416931deb80b67cebff.png)\n\n启动redis\n\n```\nredis-server ../redis.conf\n```\n\n![10.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/176154826b9137d9058a207706a02c01.png)\n\n查看进程是否启动\n\n```\nps -ef|grep redis\n```\n\n![11.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/832ef01f844d7c0904152da427aa9464.png)\n\n可见默认端口是 **6379** 服务端已经启动\n\n### 简单的数据存取\n\n在redis中数据是以键值对（Key-value）形式存储的\n\n启动客户端\n\n```\nredis-cli\n```\n\n![Snipaste_2018-09-19_23-18-04.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/8a615f99da40dc273a8c72ed047ec621.png)\n\n存数据\n\n```\nset myFirstData hello-world\n```\n\n![12.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/9765d9e2bd31b990e98f7c693bbcdb55.png)\n\n取数据\n\n```\nget myFirstData\n```\n\n到这里，如果redis存取正常，那么恭喜你，安装完成！\n\n### 退出客户端\n\n```\nexit\n```\n\n### 关闭服务端\n\n```\nredis-cli -p 6379 shutdown\n# -p为可选项 默认6379，多个redis运行的情况下需要指明要关闭redis的端口\n```\n\n![13.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/d6f31ecc534d517806fa020389a7454c.png)\n\n可见redis已经被关闭","slug":"Redis学习笔记（一）redis安装（Centos7）和简单存取数据","published":1,"updated":"2019-07-08T02:34:55.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd54y000bu8tv78s2c3o9","content":"<p>redis是非关系型数据库（NoSql），NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。</p>\n<h3 id=\"redis的安装\"><a href=\"#redis的安装\" class=\"headerlink\" title=\"redis的安装\"></a>redis的安装</h3><p>1.创建myredis文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myredis</span><br></pre></td></tr></table></figure>\n\n<p>2.下载redis最新版<a href=\"https://redis.io/\" target=\"_blank\" rel=\"noopener\">https://redis.io/</a></p>\n<p>可以直接下载再传到Centos系统中，也可以在Centos中使用如下命令直接下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myredis #进入文件夹</span><br><span class=\"line\">wget http://download.redis.io/releases/redis-4.0.11.tar.gz  #官网获取的最新版下载地址</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/93208aaf8c9e9eda078781d97446e5df.png\" alt=\"1.png\"></p>\n<p>解压文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf redis-4.0.11.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/25903b2c36c69056aef412f63c16ac69.png\" alt=\"2.png\"></p>\n<p>安装gcc（redis是用C语言开发的，需要gcc编译）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc-c++</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/e650d043a789e8145a8fa2924b9c1ac0.png\" alt=\"3.png\"></p>\n<p>进入 redis-4.0.11 文件夹并安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd redis-4.0.11</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/c4eaec43d4e699459ff52749c4883306.png\" alt=\"4.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make  #编译</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/aa08428fb3d6fe9e0db2974a95c46a74.png\" alt=\"5.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install  #安装</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/28574d869b698bf640bc38e4fe298c47.png\" alt=\"6.png\"></p>\n<p>配置redis</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/71d669562446b3f742908e02ef00eb7f.png\" alt=\"7.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi redis.conf</span><br><span class=\"line\">#将GENERAL中 daemonize 设置为yes</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/ef49c702af0dcbbd1b8240e42c96095d.png\" alt=\"8.png\"></p>\n<h3 id=\"启动redis\"><a href=\"#启动redis\" class=\"headerlink\" title=\"启动redis\"></a>启动redis</h3><p>进入 /root/myredis/redis-4.0.11/src 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/myredis/redis-4.0.11/src</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/4754f06480636416931deb80b67cebff.png\" alt=\"9.png\"></p>\n<p>启动redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server ../redis.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/176154826b9137d9058a207706a02c01.png\" alt=\"10.png\"></p>\n<p>查看进程是否启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep redis</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/832ef01f844d7c0904152da427aa9464.png\" alt=\"11.png\"></p>\n<p>可见默认端口是 <strong>6379</strong> 服务端已经启动</p>\n<h3 id=\"简单的数据存取\"><a href=\"#简单的数据存取\" class=\"headerlink\" title=\"简单的数据存取\"></a>简单的数据存取</h3><p>在redis中数据是以键值对（Key-value）形式存储的</p>\n<p>启动客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/8a615f99da40dc273a8c72ed047ec621.png\" alt=\"Snipaste_2018-09-19_23-18-04.png\"></p>\n<p>存数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set myFirstData hello-world</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/9765d9e2bd31b990e98f7c693bbcdb55.png\" alt=\"12.png\"></p>\n<p>取数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get myFirstData</span><br></pre></td></tr></table></figure>\n\n<p>到这里，如果redis存取正常，那么恭喜你，安装完成！</p>\n<h3 id=\"退出客户端\"><a href=\"#退出客户端\" class=\"headerlink\" title=\"退出客户端\"></a>退出客户端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭服务端\"><a href=\"#关闭服务端\" class=\"headerlink\" title=\"关闭服务端\"></a>关闭服务端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6379 shutdown</span><br><span class=\"line\"># -p为可选项 默认6379，多个redis运行的情况下需要指明要关闭redis的端口</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/d6f31ecc534d517806fa020389a7454c.png\" alt=\"13.png\"></p>\n<p>可见redis已经被关闭</p>\n","site":{"data":{}},"excerpt":"","more":"<p>redis是非关系型数据库（NoSql），NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。</p>\n<h3 id=\"redis的安装\"><a href=\"#redis的安装\" class=\"headerlink\" title=\"redis的安装\"></a>redis的安装</h3><p>1.创建myredis文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myredis</span><br></pre></td></tr></table></figure>\n\n<p>2.下载redis最新版<a href=\"https://redis.io/\" target=\"_blank\" rel=\"noopener\">https://redis.io/</a></p>\n<p>可以直接下载再传到Centos系统中，也可以在Centos中使用如下命令直接下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myredis #进入文件夹</span><br><span class=\"line\">wget http://download.redis.io/releases/redis-4.0.11.tar.gz  #官网获取的最新版下载地址</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/93208aaf8c9e9eda078781d97446e5df.png\" alt=\"1.png\"></p>\n<p>解压文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf redis-4.0.11.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/25903b2c36c69056aef412f63c16ac69.png\" alt=\"2.png\"></p>\n<p>安装gcc（redis是用C语言开发的，需要gcc编译）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc-c++</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/e650d043a789e8145a8fa2924b9c1ac0.png\" alt=\"3.png\"></p>\n<p>进入 redis-4.0.11 文件夹并安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd redis-4.0.11</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/c4eaec43d4e699459ff52749c4883306.png\" alt=\"4.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make  #编译</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/aa08428fb3d6fe9e0db2974a95c46a74.png\" alt=\"5.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install  #安装</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/28574d869b698bf640bc38e4fe298c47.png\" alt=\"6.png\"></p>\n<p>配置redis</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/71d669562446b3f742908e02ef00eb7f.png\" alt=\"7.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi redis.conf</span><br><span class=\"line\">#将GENERAL中 daemonize 设置为yes</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/ef49c702af0dcbbd1b8240e42c96095d.png\" alt=\"8.png\"></p>\n<h3 id=\"启动redis\"><a href=\"#启动redis\" class=\"headerlink\" title=\"启动redis\"></a>启动redis</h3><p>进入 /root/myredis/redis-4.0.11/src 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/myredis/redis-4.0.11/src</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/4754f06480636416931deb80b67cebff.png\" alt=\"9.png\"></p>\n<p>启动redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server ../redis.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/176154826b9137d9058a207706a02c01.png\" alt=\"10.png\"></p>\n<p>查看进程是否启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep redis</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/832ef01f844d7c0904152da427aa9464.png\" alt=\"11.png\"></p>\n<p>可见默认端口是 <strong>6379</strong> 服务端已经启动</p>\n<h3 id=\"简单的数据存取\"><a href=\"#简单的数据存取\" class=\"headerlink\" title=\"简单的数据存取\"></a>简单的数据存取</h3><p>在redis中数据是以键值对（Key-value）形式存储的</p>\n<p>启动客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/8a615f99da40dc273a8c72ed047ec621.png\" alt=\"Snipaste_2018-09-19_23-18-04.png\"></p>\n<p>存数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set myFirstData hello-world</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/9765d9e2bd31b990e98f7c693bbcdb55.png\" alt=\"12.png\"></p>\n<p>取数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get myFirstData</span><br></pre></td></tr></table></figure>\n\n<p>到这里，如果redis存取正常，那么恭喜你，安装完成！</p>\n<h3 id=\"退出客户端\"><a href=\"#退出客户端\" class=\"headerlink\" title=\"退出客户端\"></a>退出客户端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭服务端\"><a href=\"#关闭服务端\" class=\"headerlink\" title=\"关闭服务端\"></a>关闭服务端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -p 6379 shutdown</span><br><span class=\"line\"># -p为可选项 默认6379，多个redis运行的情况下需要指明要关闭redis的端口</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/d6f31ecc534d517806fa020389a7454c.png\" alt=\"13.png\"></p>\n<p>可见redis已经被关闭</p>\n"},{"title":"Redis学习笔记（三）Redis字符串(String)","date":"2019-07-07T16:27:22.000Z","top":null,"password":null,"_content":"\nString（字符串）\nstring是redis最基本的类型，可以理解成与Memcached一模一样的类型，一个key对应一个value。\nstring类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。\nstring类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M。\n\n### 常用命令\n\n```\nset key value  #设置key的值为value\n\nget key        #获取key的值\n\nincr key       #将key中存储的数据(必须为数字)加1\n\nincrby key 值  #将key中存储的数据(必须为数字)加上指定的值\n\ndecr key       #将key中存储的数据(必须为数字)减1\n\ndecrby key 值  #将key中存储的数据(必须为数字)减去指定的值\n\ngetrange key start end  #返回key中字符串值的子字符(获取指定区间范围内的值,类似between...and)\n\nsetrange key offset value #设置指定区间范围内的值\n\n\nSETEX key seconds value #设置带过期时间的key\n\nSETNX key value  #只有在 key 不存在时设置 key 的值\n\nmset key1 value1 key2 value2 ...    #同时设置一个或多个 key-value 对\nmget value1 value2 ... #获取所有(一个或多个)给定 key 的值\n\n\nmsetnx key1 value1 key2 value2 #同时设置一个或多个key-value对，当且仅当所有给定 key 都不存在\n```","source":"_posts/Redis学习笔记（三）Redis字符串-String.md","raw":"---\ntitle: Redis学习笔记（三）Redis字符串(String)\ndate: 2019-07-08 00:27:22\ncategories: Redis\ntags: Redis\ntop:\npassword:\n---\n\nString（字符串）\nstring是redis最基本的类型，可以理解成与Memcached一模一样的类型，一个key对应一个value。\nstring类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。\nstring类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M。\n\n### 常用命令\n\n```\nset key value  #设置key的值为value\n\nget key        #获取key的值\n\nincr key       #将key中存储的数据(必须为数字)加1\n\nincrby key 值  #将key中存储的数据(必须为数字)加上指定的值\n\ndecr key       #将key中存储的数据(必须为数字)减1\n\ndecrby key 值  #将key中存储的数据(必须为数字)减去指定的值\n\ngetrange key start end  #返回key中字符串值的子字符(获取指定区间范围内的值,类似between...and)\n\nsetrange key offset value #设置指定区间范围内的值\n\n\nSETEX key seconds value #设置带过期时间的key\n\nSETNX key value  #只有在 key 不存在时设置 key 的值\n\nmset key1 value1 key2 value2 ...    #同时设置一个或多个 key-value 对\nmget value1 value2 ... #获取所有(一个或多个)给定 key 的值\n\n\nmsetnx key1 value1 key2 value2 #同时设置一个或多个key-value对，当且仅当所有给定 key 都不存在\n```","slug":"Redis学习笔记（三）Redis字符串-String","published":1,"updated":"2019-07-08T02:47:45.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd550000gu8tvn7nun8wx","content":"<p>String（字符串）<br>string是redis最基本的类型，可以理解成与Memcached一模一样的类型，一个key对应一个value。<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set key value  #设置key的值为value</span><br><span class=\"line\"></span><br><span class=\"line\">get key        #获取key的值</span><br><span class=\"line\"></span><br><span class=\"line\">incr key       #将key中存储的数据(必须为数字)加1</span><br><span class=\"line\"></span><br><span class=\"line\">incrby key 值  #将key中存储的数据(必须为数字)加上指定的值</span><br><span class=\"line\"></span><br><span class=\"line\">decr key       #将key中存储的数据(必须为数字)减1</span><br><span class=\"line\"></span><br><span class=\"line\">decrby key 值  #将key中存储的数据(必须为数字)减去指定的值</span><br><span class=\"line\"></span><br><span class=\"line\">getrange key start end  #返回key中字符串值的子字符(获取指定区间范围内的值,类似between...and)</span><br><span class=\"line\"></span><br><span class=\"line\">setrange key offset value #设置指定区间范围内的值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SETEX key seconds value #设置带过期时间的key</span><br><span class=\"line\"></span><br><span class=\"line\">SETNX key value  #只有在 key 不存在时设置 key 的值</span><br><span class=\"line\"></span><br><span class=\"line\">mset key1 value1 key2 value2 ...    #同时设置一个或多个 key-value 对</span><br><span class=\"line\">mget value1 value2 ... #获取所有(一个或多个)给定 key 的值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">msetnx key1 value1 key2 value2 #同时设置一个或多个key-value对，当且仅当所有给定 key 都不存在</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>String（字符串）<br>string是redis最基本的类型，可以理解成与Memcached一模一样的类型，一个key对应一个value。<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set key value  #设置key的值为value</span><br><span class=\"line\"></span><br><span class=\"line\">get key        #获取key的值</span><br><span class=\"line\"></span><br><span class=\"line\">incr key       #将key中存储的数据(必须为数字)加1</span><br><span class=\"line\"></span><br><span class=\"line\">incrby key 值  #将key中存储的数据(必须为数字)加上指定的值</span><br><span class=\"line\"></span><br><span class=\"line\">decr key       #将key中存储的数据(必须为数字)减1</span><br><span class=\"line\"></span><br><span class=\"line\">decrby key 值  #将key中存储的数据(必须为数字)减去指定的值</span><br><span class=\"line\"></span><br><span class=\"line\">getrange key start end  #返回key中字符串值的子字符(获取指定区间范围内的值,类似between...and)</span><br><span class=\"line\"></span><br><span class=\"line\">setrange key offset value #设置指定区间范围内的值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SETEX key seconds value #设置带过期时间的key</span><br><span class=\"line\"></span><br><span class=\"line\">SETNX key value  #只有在 key 不存在时设置 key 的值</span><br><span class=\"line\"></span><br><span class=\"line\">mset key1 value1 key2 value2 ...    #同时设置一个或多个 key-value 对</span><br><span class=\"line\">mget value1 value2 ... #获取所有(一个或多个)给定 key 的值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">msetnx key1 value1 key2 value2 #同时设置一个或多个key-value对，当且仅当所有给定 key 都不存在</span><br></pre></td></tr></table></figure>"},{"title":"Redis学习笔记（二）Redis 键(key)","date":"2019-07-07T16:23:58.000Z","top":null,"password":null,"_content":"\n### 常用命令\n\n```\nselect db #选择数据库，redis默认16个库（0-15）\nkeys *  #列出当前库中所有key\nexists key的名字 #判断某个key是否存在\nexpire key seconds(秒)  #为给定的key设置过期时间\nttl key  #查看还有多少秒过期，-1表示永不过期，-2表示已过期\ntype key #查看key是什么类型\nmove key db #移动key到指定数据库，当前库就没有了，被移除了\nRENAME key newkey #修改key的名字为newkey\nRENAMENX key newkey #当newkey不存在时修改key为newkey\nDEl key  #当key存在时删除key\n```\n\n","source":"_posts/Redis学习笔记（二）Redis-键-key.md","raw":"---\ntitle: Redis学习笔记（二）Redis 键(key)\ndate: 2019-07-08 00:23:58\ncategories: Redis\ntags: Redis\ntop:\npassword:\n---\n\n### 常用命令\n\n```\nselect db #选择数据库，redis默认16个库（0-15）\nkeys *  #列出当前库中所有key\nexists key的名字 #判断某个key是否存在\nexpire key seconds(秒)  #为给定的key设置过期时间\nttl key  #查看还有多少秒过期，-1表示永不过期，-2表示已过期\ntype key #查看key是什么类型\nmove key db #移动key到指定数据库，当前库就没有了，被移除了\nRENAME key newkey #修改key的名字为newkey\nRENAMENX key newkey #当newkey不存在时修改key为newkey\nDEl key  #当key存在时删除key\n```\n\n","slug":"Redis学习笔记（二）Redis-键-key","published":1,"updated":"2019-07-08T02:47:28.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd552000iu8tvgo3gjbn1","content":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select db #选择数据库，redis默认16个库（0-15）</span><br><span class=\"line\">keys *  #列出当前库中所有key</span><br><span class=\"line\">exists key的名字 #判断某个key是否存在</span><br><span class=\"line\">expire key seconds(秒)  #为给定的key设置过期时间</span><br><span class=\"line\">ttl key  #查看还有多少秒过期，-1表示永不过期，-2表示已过期</span><br><span class=\"line\">type key #查看key是什么类型</span><br><span class=\"line\">move key db #移动key到指定数据库，当前库就没有了，被移除了</span><br><span class=\"line\">RENAME key newkey #修改key的名字为newkey</span><br><span class=\"line\">RENAMENX key newkey #当newkey不存在时修改key为newkey</span><br><span class=\"line\">DEl key  #当key存在时删除key</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select db #选择数据库，redis默认16个库（0-15）</span><br><span class=\"line\">keys *  #列出当前库中所有key</span><br><span class=\"line\">exists key的名字 #判断某个key是否存在</span><br><span class=\"line\">expire key seconds(秒)  #为给定的key设置过期时间</span><br><span class=\"line\">ttl key  #查看还有多少秒过期，-1表示永不过期，-2表示已过期</span><br><span class=\"line\">type key #查看key是什么类型</span><br><span class=\"line\">move key db #移动key到指定数据库，当前库就没有了，被移除了</span><br><span class=\"line\">RENAME key newkey #修改key的名字为newkey</span><br><span class=\"line\">RENAMENX key newkey #当newkey不存在时修改key为newkey</span><br><span class=\"line\">DEl key  #当key存在时删除key</span><br></pre></td></tr></table></figure>\n\n"},{"title":"javascript实现图片上传预览","date":"2019-07-07T15:37:20.000Z","top":null,"password":null,"_content":"\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<!-- Required meta tags -->\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n<title>Hello, world!</title>\n\n<script type=\"text/javascript\">\n\nfunction viewimg(file){\nif(file.files&&file.files[0])//当文件存在\n{\nvar img=document.getElementById(\"image1\");\nvar reader=new FileReader();//新建文件读写器\n//成功读取文件后，把结果赋予img\nreader.onload=function(evt){\nimg.src=evt.target.result;\n\n}\nreader.readAsDataURL(file.files[0]);\n}\n\n}\n\n</script>\n</head>\n<body>\n<h1>Hello, world!</h1>\n<div>\n<label for=\"advimg\">广告图片</label><br>\n<img id=\"image1\" src=\"#\" width=\"360\" height=\"150\">\n    <!-- 当选中文件，将文件传给viewimg方法-->\n<input type=\"file\" id=\"advimg\" name=\"advimg\" onchange=\"viewimg(this)\"> \n</div>\n\n</body>\n</html>\n```\n\n","source":"_posts/javascript实现图片上传预览.md","raw":"---\ntitle: javascript实现图片上传预览\ndate: 2019-07-07 23:37:20\ncategories: javascript\ntags: js\ntop:\npassword:\n---\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<!-- Required meta tags -->\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n<title>Hello, world!</title>\n\n<script type=\"text/javascript\">\n\nfunction viewimg(file){\nif(file.files&&file.files[0])//当文件存在\n{\nvar img=document.getElementById(\"image1\");\nvar reader=new FileReader();//新建文件读写器\n//成功读取文件后，把结果赋予img\nreader.onload=function(evt){\nimg.src=evt.target.result;\n\n}\nreader.readAsDataURL(file.files[0]);\n}\n\n}\n\n</script>\n</head>\n<body>\n<h1>Hello, world!</h1>\n<div>\n<label for=\"advimg\">广告图片</label><br>\n<img id=\"image1\" src=\"#\" width=\"360\" height=\"150\">\n    <!-- 当选中文件，将文件传给viewimg方法-->\n<input type=\"file\" id=\"advimg\" name=\"advimg\" onchange=\"viewimg(this)\"> \n</div>\n\n</body>\n</html>\n```\n\n","slug":"javascript实现图片上传预览","published":1,"updated":"2019-07-08T01:49:09.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd555000mu8tv9sk2dpil","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Required meta tags --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, shrink-to-fit=no\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">function viewimg(file)&#123;</span><br><span class=\"line\">if(file.files&amp;&amp;file.files[0])//当文件存在</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">var img=document.getElementById(\"image1\");</span><br><span class=\"line\">var reader=new FileReader();//新建文件读写器</span><br><span class=\"line\">//成功读取文件后，把结果赋予img</span><br><span class=\"line\">reader.onload=function(evt)&#123;</span><br><span class=\"line\">img.src=evt.target.result;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reader.readAsDataURL(file.files[0]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"advimg\"</span>&gt;</span>广告图片<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"image1\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"360\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"150\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 当选中文件，将文件传给viewimg方法--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"advimg\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advimg\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"viewimg(this)\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Required meta tags --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, shrink-to-fit=no\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">function viewimg(file)&#123;</span><br><span class=\"line\">if(file.files&amp;&amp;file.files[0])//当文件存在</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">var img=document.getElementById(\"image1\");</span><br><span class=\"line\">var reader=new FileReader();//新建文件读写器</span><br><span class=\"line\">//成功读取文件后，把结果赋予img</span><br><span class=\"line\">reader.onload=function(evt)&#123;</span><br><span class=\"line\">img.src=evt.target.result;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reader.readAsDataURL(file.files[0]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"advimg\"</span>&gt;</span>广告图片<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"image1\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"360\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"150\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 当选中文件，将文件传给viewimg方法--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"advimg\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advimg\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"viewimg(this)\"</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Redis学习笔记（四）主从复制及启动哨兵模式","date":"2019-07-07T16:38:08.000Z","top":null,"password":null,"_content":"\nRedis主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主，优点是读写分离，容灾恢复。\n\n### 启动三台redis\n\n首先准备三个配置文件并分别配置三个不同端口，例如6379，6380，6381\n\n![1.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/27e80318e2d1c960c9e1b82cc5c31f6c.png)\n\n![2.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/f40441601ba0bdd9edc725fdd4073d80.png)\n\nPid文件名字，Log文件名字，Dump.rdb名字请根据需要自行设置\n\n然后分别启动三台redis\n\n![3.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/46393812ad848d9d6644013557fb7da0.png)\n\n下图可见三台redis均启动成功\n\n![4.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/e497a8c339625bdb2b2be15a178e2a53.png)\n\n下面分别连接三台redis并查看当前redis的状态\n\n![5.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a4fa56a46d00b1757604a7874ff7bdc4.png)\n\n![6.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/3349d3274cc1ae756b93e336c3bc8614.png)\n\n![7.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7acc36c6623ec8c57175c43df7337174.png)\n\n可见，所有redis默认均为主库，并且没有从库连接\n\n### 配置主从复制\n\n主从服务器的配置原则是：配从(库)不配主(库)，即在从库进行配置，主库不用配置\n\n注：无这里使用端口为6379的库作为主库，6380，6381库作为从库\n\n配置代码：\n\n```\nSLAVEOF 127.0.0.1 6379 #需要在两个从库中分别执行\n```\n\n再次查看三个库的状态：\n\n`Info replication`\n主库\n\n![8.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/adec81fa42dfadb0e40042861b5efa02.png)\n\n从库\n\n![9.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7e583c8163247cbc78b81921a14411d1.png)\n\n![10.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a4259fcb18c90eca1c0915de8a3dba41.png)\n\n注：每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件\n\n测试数据同步,在主库中执行：\n\n```\nset k1 v1 #从库是只读的，不能执行写操作\n```\n\n在两个从库中取出k1数据：\n\n```\nget k1\n```\n\n可见主从复制已经配置成功\n\n### 知识点\n\n1.上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力\n\n2.中途变更转向:会清除之前的数据，重新建立拷贝最新的\n\n3. 主机shutdown或者挂掉后，从机不会自动上位成为主机，而是保持不变等待主机\n\n![11.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/3eccff218c84219e84bf5dcb3ca10d26.png)\n\n当主机再次上线时会自动连接\n\n![12.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7f1906dee03903145bb0810491252303.png)\n\n4.反客为主，可以使用命令：SLAVEOF no one 使当前数据库停止与其他数据库的同步，转成主数据库，这种方式并不方便，因为需要手动操作\n\n### 启动哨兵模式\n\n反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库\n\n1.在你的配置文件目录下新建sentinel.conf文件，名字绝不能错,并填入如下内容\n\n```\nsentinel monitor 被监控库的名字(自定) 主库ip 端口 1  #示例，1 表示当票数大于1时即可成为主库\nsentinel monitor host6379 127.0.0.1 6379 1  #我的\n#一组sentinel能同时监控多个Master\n```\n\n2.开启哨兵\n\n```\nredis-sentinel /myredis/config/sentinel.conf  #配置文件路径请自行修改,启动成功如下图\n```\n\n![13.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/020c2e2a8a71d380a24e33c0055ec08e.png)\n\n3.当主库发生故障\n\n![14.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/44a3da883658255212e93bf97afd97e2.png)\n\n哨兵发现问题，开始进行投票，选出新主库\n\n![15.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a46d4fe35b8a26a61e06064f1aabed05.png)\n\n最终端口为6381的库成为主库，查看此时库的状态\n\n![16.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/8656628abc73d39c9fc0b2bf3e4b7107.png)\n\n![img](https://depth.team/wp-content/uploads/2018/09/Snipaste_2018-09-30_16-53-52.png)\n\n4.如果此时库6379恢复上线，不会发生主库冲突，哨兵会将6379连接至新的主库\n\n![17.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/fba2b883ad0d4e55e5524f44cf89167f.png)\n\n![18.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/4a0167d623ad716bc20b03e81f374489.png)\n\n5.如果需要让哨兵后台运行，可以使用screen命令\n\n### 主从复制的缺点\n\n由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。","source":"_posts/Redis学习笔记（四）主从复制及启动哨兵模式.md","raw":"---\ntitle: Redis学习笔记（四）主从复制及启动哨兵模式\ndate: 2019-07-08 00:38:08\ncategories: Redis\ntags: Redis\ntop:\npassword:\n---\n\nRedis主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主，优点是读写分离，容灾恢复。\n\n### 启动三台redis\n\n首先准备三个配置文件并分别配置三个不同端口，例如6379，6380，6381\n\n![1.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/27e80318e2d1c960c9e1b82cc5c31f6c.png)\n\n![2.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/f40441601ba0bdd9edc725fdd4073d80.png)\n\nPid文件名字，Log文件名字，Dump.rdb名字请根据需要自行设置\n\n然后分别启动三台redis\n\n![3.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/46393812ad848d9d6644013557fb7da0.png)\n\n下图可见三台redis均启动成功\n\n![4.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/e497a8c339625bdb2b2be15a178e2a53.png)\n\n下面分别连接三台redis并查看当前redis的状态\n\n![5.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a4fa56a46d00b1757604a7874ff7bdc4.png)\n\n![6.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/3349d3274cc1ae756b93e336c3bc8614.png)\n\n![7.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7acc36c6623ec8c57175c43df7337174.png)\n\n可见，所有redis默认均为主库，并且没有从库连接\n\n### 配置主从复制\n\n主从服务器的配置原则是：配从(库)不配主(库)，即在从库进行配置，主库不用配置\n\n注：无这里使用端口为6379的库作为主库，6380，6381库作为从库\n\n配置代码：\n\n```\nSLAVEOF 127.0.0.1 6379 #需要在两个从库中分别执行\n```\n\n再次查看三个库的状态：\n\n`Info replication`\n主库\n\n![8.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/adec81fa42dfadb0e40042861b5efa02.png)\n\n从库\n\n![9.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7e583c8163247cbc78b81921a14411d1.png)\n\n![10.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a4259fcb18c90eca1c0915de8a3dba41.png)\n\n注：每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件\n\n测试数据同步,在主库中执行：\n\n```\nset k1 v1 #从库是只读的，不能执行写操作\n```\n\n在两个从库中取出k1数据：\n\n```\nget k1\n```\n\n可见主从复制已经配置成功\n\n### 知识点\n\n1.上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力\n\n2.中途变更转向:会清除之前的数据，重新建立拷贝最新的\n\n3. 主机shutdown或者挂掉后，从机不会自动上位成为主机，而是保持不变等待主机\n\n![11.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/3eccff218c84219e84bf5dcb3ca10d26.png)\n\n当主机再次上线时会自动连接\n\n![12.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7f1906dee03903145bb0810491252303.png)\n\n4.反客为主，可以使用命令：SLAVEOF no one 使当前数据库停止与其他数据库的同步，转成主数据库，这种方式并不方便，因为需要手动操作\n\n### 启动哨兵模式\n\n反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库\n\n1.在你的配置文件目录下新建sentinel.conf文件，名字绝不能错,并填入如下内容\n\n```\nsentinel monitor 被监控库的名字(自定) 主库ip 端口 1  #示例，1 表示当票数大于1时即可成为主库\nsentinel monitor host6379 127.0.0.1 6379 1  #我的\n#一组sentinel能同时监控多个Master\n```\n\n2.开启哨兵\n\n```\nredis-sentinel /myredis/config/sentinel.conf  #配置文件路径请自行修改,启动成功如下图\n```\n\n![13.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/020c2e2a8a71d380a24e33c0055ec08e.png)\n\n3.当主库发生故障\n\n![14.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/44a3da883658255212e93bf97afd97e2.png)\n\n哨兵发现问题，开始进行投票，选出新主库\n\n![15.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a46d4fe35b8a26a61e06064f1aabed05.png)\n\n最终端口为6381的库成为主库，查看此时库的状态\n\n![16.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/8656628abc73d39c9fc0b2bf3e4b7107.png)\n\n![img](https://depth.team/wp-content/uploads/2018/09/Snipaste_2018-09-30_16-53-52.png)\n\n4.如果此时库6379恢复上线，不会发生主库冲突，哨兵会将6379连接至新的主库\n\n![17.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/fba2b883ad0d4e55e5524f44cf89167f.png)\n\n![18.png](https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/4a0167d623ad716bc20b03e81f374489.png)\n\n5.如果需要让哨兵后台运行，可以使用screen命令\n\n### 主从复制的缺点\n\n由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。","slug":"Redis学习笔记（四）主从复制及启动哨兵模式","published":1,"updated":"2019-07-08T02:47:52.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd557000ou8tvd9j0zcwm","content":"<p>Redis主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主，优点是读写分离，容灾恢复。</p>\n<h3 id=\"启动三台redis\"><a href=\"#启动三台redis\" class=\"headerlink\" title=\"启动三台redis\"></a>启动三台redis</h3><p>首先准备三个配置文件并分别配置三个不同端口，例如6379，6380，6381</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/27e80318e2d1c960c9e1b82cc5c31f6c.png\" alt=\"1.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/f40441601ba0bdd9edc725fdd4073d80.png\" alt=\"2.png\"></p>\n<p>Pid文件名字，Log文件名字，Dump.rdb名字请根据需要自行设置</p>\n<p>然后分别启动三台redis</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/46393812ad848d9d6644013557fb7da0.png\" alt=\"3.png\"></p>\n<p>下图可见三台redis均启动成功</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/e497a8c339625bdb2b2be15a178e2a53.png\" alt=\"4.png\"></p>\n<p>下面分别连接三台redis并查看当前redis的状态</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a4fa56a46d00b1757604a7874ff7bdc4.png\" alt=\"5.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/3349d3274cc1ae756b93e336c3bc8614.png\" alt=\"6.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7acc36c6623ec8c57175c43df7337174.png\" alt=\"7.png\"></p>\n<p>可见，所有redis默认均为主库，并且没有从库连接</p>\n<h3 id=\"配置主从复制\"><a href=\"#配置主从复制\" class=\"headerlink\" title=\"配置主从复制\"></a>配置主从复制</h3><p>主从服务器的配置原则是：配从(库)不配主(库)，即在从库进行配置，主库不用配置</p>\n<p>注：无这里使用端口为6379的库作为主库，6380，6381库作为从库</p>\n<p>配置代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLAVEOF 127.0.0.1 6379 #需要在两个从库中分别执行</span><br></pre></td></tr></table></figure>\n\n<p>再次查看三个库的状态：</p>\n<p><code>Info replication</code><br>主库</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/adec81fa42dfadb0e40042861b5efa02.png\" alt=\"8.png\"></p>\n<p>从库</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7e583c8163247cbc78b81921a14411d1.png\" alt=\"9.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a4259fcb18c90eca1c0915de8a3dba41.png\" alt=\"10.png\"></p>\n<p>注：每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件</p>\n<p>测试数据同步,在主库中执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set k1 v1 #从库是只读的，不能执行写操作</span><br></pre></td></tr></table></figure>\n\n<p>在两个从库中取出k1数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get k1</span><br></pre></td></tr></table></figure>\n\n<p>可见主从复制已经配置成功</p>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><p>1.上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力</p>\n<p>2.中途变更转向:会清除之前的数据，重新建立拷贝最新的</p>\n<ol start=\"3\">\n<li>主机shutdown或者挂掉后，从机不会自动上位成为主机，而是保持不变等待主机</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/3eccff218c84219e84bf5dcb3ca10d26.png\" alt=\"11.png\"></p>\n<p>当主机再次上线时会自动连接</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7f1906dee03903145bb0810491252303.png\" alt=\"12.png\"></p>\n<p>4.反客为主，可以使用命令：SLAVEOF no one 使当前数据库停止与其他数据库的同步，转成主数据库，这种方式并不方便，因为需要手动操作</p>\n<h3 id=\"启动哨兵模式\"><a href=\"#启动哨兵模式\" class=\"headerlink\" title=\"启动哨兵模式\"></a>启动哨兵模式</h3><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p>\n<p>1.在你的配置文件目录下新建sentinel.conf文件，名字绝不能错,并填入如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel monitor 被监控库的名字(自定) 主库ip 端口 1  #示例，1 表示当票数大于1时即可成为主库</span><br><span class=\"line\">sentinel monitor host6379 127.0.0.1 6379 1  #我的</span><br><span class=\"line\">#一组sentinel能同时监控多个Master</span><br></pre></td></tr></table></figure>\n\n<p>2.开启哨兵</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-sentinel /myredis/config/sentinel.conf  #配置文件路径请自行修改,启动成功如下图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/020c2e2a8a71d380a24e33c0055ec08e.png\" alt=\"13.png\"></p>\n<p>3.当主库发生故障</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/44a3da883658255212e93bf97afd97e2.png\" alt=\"14.png\"></p>\n<p>哨兵发现问题，开始进行投票，选出新主库</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a46d4fe35b8a26a61e06064f1aabed05.png\" alt=\"15.png\"></p>\n<p>最终端口为6381的库成为主库，查看此时库的状态</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/8656628abc73d39c9fc0b2bf3e4b7107.png\" alt=\"16.png\"></p>\n<p><img src=\"https://depth.team/wp-content/uploads/2018/09/Snipaste_2018-09-30_16-53-52.png\" alt=\"img\"></p>\n<p>4.如果此时库6379恢复上线，不会发生主库冲突，哨兵会将6379连接至新的主库</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/fba2b883ad0d4e55e5524f44cf89167f.png\" alt=\"17.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/4a0167d623ad716bc20b03e81f374489.png\" alt=\"18.png\"></p>\n<p>5.如果需要让哨兵后台运行，可以使用screen命令</p>\n<h3 id=\"主从复制的缺点\"><a href=\"#主从复制的缺点\" class=\"headerlink\" title=\"主从复制的缺点\"></a>主从复制的缺点</h3><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Redis主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主，优点是读写分离，容灾恢复。</p>\n<h3 id=\"启动三台redis\"><a href=\"#启动三台redis\" class=\"headerlink\" title=\"启动三台redis\"></a>启动三台redis</h3><p>首先准备三个配置文件并分别配置三个不同端口，例如6379，6380，6381</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/27e80318e2d1c960c9e1b82cc5c31f6c.png\" alt=\"1.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/f40441601ba0bdd9edc725fdd4073d80.png\" alt=\"2.png\"></p>\n<p>Pid文件名字，Log文件名字，Dump.rdb名字请根据需要自行设置</p>\n<p>然后分别启动三台redis</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/46393812ad848d9d6644013557fb7da0.png\" alt=\"3.png\"></p>\n<p>下图可见三台redis均启动成功</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/e497a8c339625bdb2b2be15a178e2a53.png\" alt=\"4.png\"></p>\n<p>下面分别连接三台redis并查看当前redis的状态</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a4fa56a46d00b1757604a7874ff7bdc4.png\" alt=\"5.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/3349d3274cc1ae756b93e336c3bc8614.png\" alt=\"6.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7acc36c6623ec8c57175c43df7337174.png\" alt=\"7.png\"></p>\n<p>可见，所有redis默认均为主库，并且没有从库连接</p>\n<h3 id=\"配置主从复制\"><a href=\"#配置主从复制\" class=\"headerlink\" title=\"配置主从复制\"></a>配置主从复制</h3><p>主从服务器的配置原则是：配从(库)不配主(库)，即在从库进行配置，主库不用配置</p>\n<p>注：无这里使用端口为6379的库作为主库，6380，6381库作为从库</p>\n<p>配置代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLAVEOF 127.0.0.1 6379 #需要在两个从库中分别执行</span><br></pre></td></tr></table></figure>\n\n<p>再次查看三个库的状态：</p>\n<p><code>Info replication</code><br>主库</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/adec81fa42dfadb0e40042861b5efa02.png\" alt=\"8.png\"></p>\n<p>从库</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7e583c8163247cbc78b81921a14411d1.png\" alt=\"9.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a4259fcb18c90eca1c0915de8a3dba41.png\" alt=\"10.png\"></p>\n<p>注：每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件</p>\n<p>测试数据同步,在主库中执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set k1 v1 #从库是只读的，不能执行写操作</span><br></pre></td></tr></table></figure>\n\n<p>在两个从库中取出k1数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get k1</span><br></pre></td></tr></table></figure>\n\n<p>可见主从复制已经配置成功</p>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><p>1.上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力</p>\n<p>2.中途变更转向:会清除之前的数据，重新建立拷贝最新的</p>\n<ol start=\"3\">\n<li>主机shutdown或者挂掉后，从机不会自动上位成为主机，而是保持不变等待主机</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/3eccff218c84219e84bf5dcb3ca10d26.png\" alt=\"11.png\"></p>\n<p>当主机再次上线时会自动连接</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7f1906dee03903145bb0810491252303.png\" alt=\"12.png\"></p>\n<p>4.反客为主，可以使用命令：SLAVEOF no one 使当前数据库停止与其他数据库的同步，转成主数据库，这种方式并不方便，因为需要手动操作</p>\n<h3 id=\"启动哨兵模式\"><a href=\"#启动哨兵模式\" class=\"headerlink\" title=\"启动哨兵模式\"></a>启动哨兵模式</h3><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p>\n<p>1.在你的配置文件目录下新建sentinel.conf文件，名字绝不能错,并填入如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel monitor 被监控库的名字(自定) 主库ip 端口 1  #示例，1 表示当票数大于1时即可成为主库</span><br><span class=\"line\">sentinel monitor host6379 127.0.0.1 6379 1  #我的</span><br><span class=\"line\">#一组sentinel能同时监控多个Master</span><br></pre></td></tr></table></figure>\n\n<p>2.开启哨兵</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-sentinel /myredis/config/sentinel.conf  #配置文件路径请自行修改,启动成功如下图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/020c2e2a8a71d380a24e33c0055ec08e.png\" alt=\"13.png\"></p>\n<p>3.当主库发生故障</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/44a3da883658255212e93bf97afd97e2.png\" alt=\"14.png\"></p>\n<p>哨兵发现问题，开始进行投票，选出新主库</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a46d4fe35b8a26a61e06064f1aabed05.png\" alt=\"15.png\"></p>\n<p>最终端口为6381的库成为主库，查看此时库的状态</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/8656628abc73d39c9fc0b2bf3e4b7107.png\" alt=\"16.png\"></p>\n<p><img src=\"https://depth.team/wp-content/uploads/2018/09/Snipaste_2018-09-30_16-53-52.png\" alt=\"img\"></p>\n<p>4.如果此时库6379恢复上线，不会发生主库冲突，哨兵会将6379连接至新的主库</p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/fba2b883ad0d4e55e5524f44cf89167f.png\" alt=\"17.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/4a0167d623ad716bc20b03e81f374489.png\" alt=\"18.png\"></p>\n<p>5.如果需要让哨兵后台运行，可以使用screen命令</p>\n<h3 id=\"主从复制的缺点\"><a href=\"#主从复制的缺点\" class=\"headerlink\" title=\"主从复制的缺点\"></a>主从复制的缺点</h3><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n![测试](http://pic37.nipic.com/20140113/8800276_184927469000_2.png)","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n![测试](http://pic37.nipic.com/20140113/8800276_184927469000_2.png)","slug":"hello-world","published":1,"date":"2019-07-08T01:49:09.458Z","updated":"2019-07-08T02:20:38.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd55a000su8tvwnx0hfmg","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p><img src=\"http://pic37.nipic.com/20140113/8800276_184927469000_2.png\" alt=\"测试\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p><img src=\"http://pic37.nipic.com/20140113/8800276_184927469000_2.png\" alt=\"测试\"></p>\n"},{"title":"linux使用crontab命令指定时间段内随机执行任务","date":"2019-07-07T15:53:49.000Z","top":null,"password":null,"_content":"\ncrontab命令常见于[Unix](https://baike.baidu.com/item/Unix)和[类Unix](https://baike.baidu.com/item/%E7%B1%BBUnix)的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于\"crontab\"文件中，以供之后读取和执行。\n\ncron是一个linux下 的定时执行工具，可以在无需人工干预的情况下运行作业。\n`service crond start    //启动服务`\n`service crond stop     //关闭服务`\n`service crond restart  //重启服务`\n`service crond reload   //重新载入配置`\n`service crond status   //查看服务状态`\n\n在crontab文件中如何输入需要执行的命令和时间。该文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令。\n每个域之间使用空格或者制表符分隔。格式如下：\n`minute hour day-of-month month-of-year day-of-week commands`\n合法值 00-59 00-23 01-31 01-12 0-6 (0代表周日)\n\n<span style=\"color: #ff0000;\">除了数字还有几个个特殊的符号就是\"*\"、\"/\"和\"-\"、\",\"，*代表所有的取值范围内的数字，\"/\"代表每的意思,\"/5\"表示每5个单位，\"-\"代表从某个数字到某个数字,\",\"分开几个离散的数字。</span>\n\ncrontab -l 在标准输出上显示当前的crontab。\n-r 删除当前的crontab文件。\n-e 使用VISUAL或者EDITOR环境变量所指的编辑器编辑当前的crontab文件。当结束编辑离开时，编辑后的文件将自动安装。\n\n<span style=\"color: #ff0000;\">需要注意的是同同一用户默认只有一个crontab任务，例如root用户每次新建一个crontab任务都会覆盖之前的任务。</span>\n\n例子：\n\n`vi test.cron ###创建一个cron文件`\n\n并向该文件中写入如下命令：\n\n```shell\n0 8 * * * echo \"good morning \">>test.txt ###表示每天早晨8点向test.txt中插入一条\"good morning\"\n\n0 8 1,3,5 * 1-5 echo\"good morning\" >> test.txt\n\n###表示每年的1月3月5月中每周一到周五的早晨8点向test.txt中插入一条\"good morning\"\n```\n\n使用`crontab test.cron`  即可启动该命令文件，到达指定时间系统将会自动执行文件中的命令。\n\n问题：\n\n综上所述，crontab 命令固然好用，但是执行任务的时间是死的，每天都是同一个时间执行任务，在做某些需要随机时间的特殊任务时，就显得没那么好用了。\n\n所以，如果需要随机时间，就要用的shell脚本了。\n\n首先创建一个shell脚本，test.sh\n\n```shell\n#!/bin/bash\n\necho \"good morning\" >> test.txt ###向test.txt中插入一条\"good morning\"\n\nr=$(($RANDOM%10)) ###随机生成一个10以内的随机数\nrm -f test.cron                ###删除以前的命令文件\necho $[r]\" 8 * * * ./test.sh\" >> test.cron #创建并将任务写入cron文件\nchmod 777 test.sh  ###给予shell脚本最高执行权限\ncrontab test.cron    ###启动cron任务文件，用于定时自动执行\n```\n\n<span style=\"color: #ff0000;\">当然，该脚本必须在写完后手动执行一次，以后才会按时自动执行</span>\n\n命令:\n\n`[code]chmod 777 test.sh`\n\n`./test.sh[/code]`\n\n<span style=\"color: #ff0000;\">原理：</span>\n\n将随机生成的数字作为时间（在这里是作为分钟）写入cron文件，并通过按时执行shell脚本来将\"good morning\"插入到test.txt中，\n\n由于该任务的时间即分钟是10以内的随机数，所以每次执行任务的时间是每天早晨8：00-8：09之间的随机时间，\n\n通过这种方式就可以设置随机时间执行任务了。\n\n&nbsp;\n\n如有错误，还请大佬多多包涵，谢谢！","source":"_posts/linux使用crontab命令指定时间段内随机执行任务.md","raw":"---\ntitle: linux使用crontab命令指定时间段内随机执行任务\ndate: 2019-07-07 23:53:49\ncategories: Linux\ntags: \n- Linux\n- Crontab\ntop:\npassword:\n---\n\ncrontab命令常见于[Unix](https://baike.baidu.com/item/Unix)和[类Unix](https://baike.baidu.com/item/%E7%B1%BBUnix)的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于\"crontab\"文件中，以供之后读取和执行。\n\ncron是一个linux下 的定时执行工具，可以在无需人工干预的情况下运行作业。\n`service crond start    //启动服务`\n`service crond stop     //关闭服务`\n`service crond restart  //重启服务`\n`service crond reload   //重新载入配置`\n`service crond status   //查看服务状态`\n\n在crontab文件中如何输入需要执行的命令和时间。该文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令。\n每个域之间使用空格或者制表符分隔。格式如下：\n`minute hour day-of-month month-of-year day-of-week commands`\n合法值 00-59 00-23 01-31 01-12 0-6 (0代表周日)\n\n<span style=\"color: #ff0000;\">除了数字还有几个个特殊的符号就是\"*\"、\"/\"和\"-\"、\",\"，*代表所有的取值范围内的数字，\"/\"代表每的意思,\"/5\"表示每5个单位，\"-\"代表从某个数字到某个数字,\",\"分开几个离散的数字。</span>\n\ncrontab -l 在标准输出上显示当前的crontab。\n-r 删除当前的crontab文件。\n-e 使用VISUAL或者EDITOR环境变量所指的编辑器编辑当前的crontab文件。当结束编辑离开时，编辑后的文件将自动安装。\n\n<span style=\"color: #ff0000;\">需要注意的是同同一用户默认只有一个crontab任务，例如root用户每次新建一个crontab任务都会覆盖之前的任务。</span>\n\n例子：\n\n`vi test.cron ###创建一个cron文件`\n\n并向该文件中写入如下命令：\n\n```shell\n0 8 * * * echo \"good morning \">>test.txt ###表示每天早晨8点向test.txt中插入一条\"good morning\"\n\n0 8 1,3,5 * 1-5 echo\"good morning\" >> test.txt\n\n###表示每年的1月3月5月中每周一到周五的早晨8点向test.txt中插入一条\"good morning\"\n```\n\n使用`crontab test.cron`  即可启动该命令文件，到达指定时间系统将会自动执行文件中的命令。\n\n问题：\n\n综上所述，crontab 命令固然好用，但是执行任务的时间是死的，每天都是同一个时间执行任务，在做某些需要随机时间的特殊任务时，就显得没那么好用了。\n\n所以，如果需要随机时间，就要用的shell脚本了。\n\n首先创建一个shell脚本，test.sh\n\n```shell\n#!/bin/bash\n\necho \"good morning\" >> test.txt ###向test.txt中插入一条\"good morning\"\n\nr=$(($RANDOM%10)) ###随机生成一个10以内的随机数\nrm -f test.cron                ###删除以前的命令文件\necho $[r]\" 8 * * * ./test.sh\" >> test.cron #创建并将任务写入cron文件\nchmod 777 test.sh  ###给予shell脚本最高执行权限\ncrontab test.cron    ###启动cron任务文件，用于定时自动执行\n```\n\n<span style=\"color: #ff0000;\">当然，该脚本必须在写完后手动执行一次，以后才会按时自动执行</span>\n\n命令:\n\n`[code]chmod 777 test.sh`\n\n`./test.sh[/code]`\n\n<span style=\"color: #ff0000;\">原理：</span>\n\n将随机生成的数字作为时间（在这里是作为分钟）写入cron文件，并通过按时执行shell脚本来将\"good morning\"插入到test.txt中，\n\n由于该任务的时间即分钟是10以内的随机数，所以每次执行任务的时间是每天早晨8：00-8：09之间的随机时间，\n\n通过这种方式就可以设置随机时间执行任务了。\n\n&nbsp;\n\n如有错误，还请大佬多多包涵，谢谢！","slug":"linux使用crontab命令指定时间段内随机执行任务","published":1,"updated":"2019-07-08T01:49:09.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd55b000uu8tvncm4ksmd","content":"<p>crontab命令常见于<a href=\"https://baike.baidu.com/item/Unix\" target=\"_blank\" rel=\"noopener\">Unix</a>和<a href=\"https://baike.baidu.com/item/%E7%B1%BBUnix\" target=\"_blank\" rel=\"noopener\">类Unix</a>的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于”crontab”文件中，以供之后读取和执行。</p>\n<p>cron是一个linux下 的定时执行工具，可以在无需人工干预的情况下运行作业。<br><code>service crond start    //启动服务</code><br><code>service crond stop     //关闭服务</code><br><code>service crond restart  //重启服务</code><br><code>service crond reload   //重新载入配置</code><br><code>service crond status   //查看服务状态</code></p>\n<p>在crontab文件中如何输入需要执行的命令和时间。该文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令。<br>每个域之间使用空格或者制表符分隔。格式如下：<br><code>minute hour day-of-month month-of-year day-of-week commands</code><br>合法值 00-59 00-23 01-31 01-12 0-6 (0代表周日)</p>\n<p><span style=\"color: #ff0000;\">除了数字还有几个个特殊的符号就是”*”、”/“和”-“、”,”，*代表所有的取值范围内的数字，”/“代表每的意思,”/5”表示每5个单位，”-“代表从某个数字到某个数字,”,”分开几个离散的数字。</span></p>\n<p>crontab -l 在标准输出上显示当前的crontab。<br>-r 删除当前的crontab文件。<br>-e 使用VISUAL或者EDITOR环境变量所指的编辑器编辑当前的crontab文件。当结束编辑离开时，编辑后的文件将自动安装。</p>\n<p><span style=\"color: #ff0000;\">需要注意的是同同一用户默认只有一个crontab任务，例如root用户每次新建一个crontab任务都会覆盖之前的任务。</span></p>\n<p>例子：</p>\n<p><code>vi test.cron ###创建一个cron文件</code></p>\n<p>并向该文件中写入如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 8 * * * echo \"good morning \"&gt;&gt;test.txt ###表示每天早晨8点向test.txt中插入一条\"good morning\"</span><br><span class=\"line\"></span><br><span class=\"line\">0 8 1,3,5 * 1-5 echo\"good morning\" &gt;&gt; test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##表示每年的1月3月5月中每周一到周五的早晨8点向test.txt中插入一条\"good morning\"</span></span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>crontab test.cron</code>  即可启动该命令文件，到达指定时间系统将会自动执行文件中的命令。</p>\n<p>问题：</p>\n<p>综上所述，crontab 命令固然好用，但是执行任务的时间是死的，每天都是同一个时间执行任务，在做某些需要随机时间的特殊任务时，就显得没那么好用了。</p>\n<p>所以，如果需要随机时间，就要用的shell脚本了。</p>\n<p>首先创建一个shell脚本，test.sh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"good morning\" &gt;&gt; test.txt ###向test.txt中插入一条\"good morning\"</span><br><span class=\"line\"></span><br><span class=\"line\">r=$(($RANDOM%10)) ###随机生成一个10以内的随机数</span><br><span class=\"line\">rm -f test.cron                ###删除以前的命令文件</span><br><span class=\"line\">echo $[r]\" 8 * * * ./test.sh\" &gt;&gt; test.cron #创建并将任务写入cron文件</span><br><span class=\"line\">chmod 777 test.sh  ###给予shell脚本最高执行权限</span><br><span class=\"line\">crontab test.cron    ###启动cron任务文件，用于定时自动执行</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff0000;\">当然，该脚本必须在写完后手动执行一次，以后才会按时自动执行</span></p>\n<p>命令:</p>\n<p><code>[code]chmod 777 test.sh</code></p>\n<p><code>./test.sh[/code]</code></p>\n<p><span style=\"color: #ff0000;\">原理：</span></p>\n<p>将随机生成的数字作为时间（在这里是作为分钟）写入cron文件，并通过按时执行shell脚本来将”good morning”插入到test.txt中，</p>\n<p>由于该任务的时间即分钟是10以内的随机数，所以每次执行任务的时间是每天早晨8：00-8：09之间的随机时间，</p>\n<p>通过这种方式就可以设置随机时间执行任务了。</p>\n<p>&nbsp;</p>\n<p>如有错误，还请大佬多多包涵，谢谢！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>crontab命令常见于<a href=\"https://baike.baidu.com/item/Unix\" target=\"_blank\" rel=\"noopener\">Unix</a>和<a href=\"https://baike.baidu.com/item/%E7%B1%BBUnix\" target=\"_blank\" rel=\"noopener\">类Unix</a>的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于”crontab”文件中，以供之后读取和执行。</p>\n<p>cron是一个linux下 的定时执行工具，可以在无需人工干预的情况下运行作业。<br><code>service crond start    //启动服务</code><br><code>service crond stop     //关闭服务</code><br><code>service crond restart  //重启服务</code><br><code>service crond reload   //重新载入配置</code><br><code>service crond status   //查看服务状态</code></p>\n<p>在crontab文件中如何输入需要执行的命令和时间。该文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令。<br>每个域之间使用空格或者制表符分隔。格式如下：<br><code>minute hour day-of-month month-of-year day-of-week commands</code><br>合法值 00-59 00-23 01-31 01-12 0-6 (0代表周日)</p>\n<p><span style=\"color: #ff0000;\">除了数字还有几个个特殊的符号就是”*”、”/“和”-“、”,”，*代表所有的取值范围内的数字，”/“代表每的意思,”/5”表示每5个单位，”-“代表从某个数字到某个数字,”,”分开几个离散的数字。</span></p>\n<p>crontab -l 在标准输出上显示当前的crontab。<br>-r 删除当前的crontab文件。<br>-e 使用VISUAL或者EDITOR环境变量所指的编辑器编辑当前的crontab文件。当结束编辑离开时，编辑后的文件将自动安装。</p>\n<p><span style=\"color: #ff0000;\">需要注意的是同同一用户默认只有一个crontab任务，例如root用户每次新建一个crontab任务都会覆盖之前的任务。</span></p>\n<p>例子：</p>\n<p><code>vi test.cron ###创建一个cron文件</code></p>\n<p>并向该文件中写入如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 8 * * * echo \"good morning \"&gt;&gt;test.txt ###表示每天早晨8点向test.txt中插入一条\"good morning\"</span><br><span class=\"line\"></span><br><span class=\"line\">0 8 1,3,5 * 1-5 echo\"good morning\" &gt;&gt; test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##表示每年的1月3月5月中每周一到周五的早晨8点向test.txt中插入一条\"good morning\"</span></span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>crontab test.cron</code>  即可启动该命令文件，到达指定时间系统将会自动执行文件中的命令。</p>\n<p>问题：</p>\n<p>综上所述，crontab 命令固然好用，但是执行任务的时间是死的，每天都是同一个时间执行任务，在做某些需要随机时间的特殊任务时，就显得没那么好用了。</p>\n<p>所以，如果需要随机时间，就要用的shell脚本了。</p>\n<p>首先创建一个shell脚本，test.sh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">echo \"good morning\" &gt;&gt; test.txt ###向test.txt中插入一条\"good morning\"</span><br><span class=\"line\"></span><br><span class=\"line\">r=$(($RANDOM%10)) ###随机生成一个10以内的随机数</span><br><span class=\"line\">rm -f test.cron                ###删除以前的命令文件</span><br><span class=\"line\">echo $[r]\" 8 * * * ./test.sh\" &gt;&gt; test.cron #创建并将任务写入cron文件</span><br><span class=\"line\">chmod 777 test.sh  ###给予shell脚本最高执行权限</span><br><span class=\"line\">crontab test.cron    ###启动cron任务文件，用于定时自动执行</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: #ff0000;\">当然，该脚本必须在写完后手动执行一次，以后才会按时自动执行</span></p>\n<p>命令:</p>\n<p><code>[code]chmod 777 test.sh</code></p>\n<p><code>./test.sh[/code]</code></p>\n<p><span style=\"color: #ff0000;\">原理：</span></p>\n<p>将随机生成的数字作为时间（在这里是作为分钟）写入cron文件，并通过按时执行shell脚本来将”good morning”插入到test.txt中，</p>\n<p>由于该任务的时间即分钟是10以内的随机数，所以每次执行任务的时间是每天早晨8：00-8：09之间的随机时间，</p>\n<p>通过这种方式就可以设置随机时间执行任务了。</p>\n<p>&nbsp;</p>\n<p>如有错误，还请大佬多多包涵，谢谢！</p>\n"},{"title":"shell命令+crontab+php实现每天特定时间段内随机时间执行任务","date":"2019-07-07T16:02:47.000Z","top":null,"password":null,"_content":"\n之前写过使用shell+crontab实现每天随机执行任务（[linux使用crontab命令指定时间段内随机执行任务](lucent.blog/passages/linux使用crontab命令指定时间段内随机执行任务/)，但是后来想想容易出bug，\n\n比如：第一天执行是生成的随机时间要留给下次使用，如果第一次生成时间为8：01，那么第二天就会8：01执行任务，第二天8：01执行任务时生成的随机时间是8：05，那么8：05也会执行一次任务，就会导致同一天执行两次甚至多次任务。\n\n那么下面加入php重写,实现每天早晨8：00-8：09之间随机时间访问www.baidu.com：\n\n**shell代码sign.sh：**\n\n```shell\n#!/bin/bash\nr=$(($RANDOM%10)) ##生成10以内的随机数字\nrm -f /www/wwwroot/time.txt ##删除以前的time.txt\necho “08:0″$[r] >> /www/wwwroot/time.txt ##创建并将随机数字作为时间的分钟插入time.txt\nchmod 777 sign.sh ##设置shell脚本的权限\n```\n\n**crontab命令文件sign.cron:**\n\n```shell\n59 07 * * * ./sign.sh   ##定时7：59执行shell脚本生成随机时间\n0-9 08 * * * curl http://服务器ip/sign/Sys.php    ##8：00-8：09没分钟执行一次http请求\n```\n\n**php文件Sys.php：**\n\n```php\n<?php\nheader(“Content-type: text/html; charset=utf-8”);\n\n//打开time.txt文件，方法为只读\n\n$myfile = fopen(“time.txt”, “r”) or die(“Unable to open file!”);\n\n//将打开文件中的内容（这里即是shell脚本生成的随机时间）赋值给time1\n\n$time1=fread($myfile,filesize(“time.txt”));\n\nfclose($myfile); //关闭time.txt\n\n$randomtime=strtotime(“$time1”);//将随机时间转换成时间戳格式\n\n$time=date(‘H:i’,time());//获取当前时间\n$now=strtotime(“$time”);//将当前时间转换成时间戳格式\n\n//比较当前时间是否等于随机时间，若是，则执行下面代码\n\nif($now == $randomtime){\n\n//执行访问www.baidu.com的任务，也可以做其他任务，需要自己写代码\n\nheader(“Location: http://www.baidu.com”);\n\n}\n\nelse{\n//代码\n//这里是如果当前时间不等于随机时间的时候要执行的代码，不写即什么都不做\n}\n```\n\n注意：如果不将时间通过strtotime()转换成时间戳格式，将无法比较两个时间！\n\n**原理：**\n\n通过设定crontab定时任务，在7：59分时生成随机时间并存储到time.txt中，第二个任务在8：00-8：09之间每分钟执行一次，\n\n**curl http://服务器ip/sign/Sys.php 命令即是向服务器发送请求，**服务器Sys.php每分钟收到一次请求，并每次判断当前时间是否与time.txt中的随机时间相等，若相等，执行预先设置好的任务，若不等，什么也不做，等待下一次请求。\n\n\n\n通过以上方式即可实现每天在特定的时间段中的随机时间执行任务。\n\n若你有更好的方式，欢迎留言，谢谢！","source":"_posts/shell命令-crontab-php实现每天特定时间段内随机时间执行任务.md","raw":"---\ntitle: shell命令+crontab+php实现每天特定时间段内随机时间执行任务\ndate: 2019-07-08 00:02:47\ncategories: Linux\ntags:\n- Liunx\n- Crontab\ntop:\npassword:\n---\n\n之前写过使用shell+crontab实现每天随机执行任务（[linux使用crontab命令指定时间段内随机执行任务](lucent.blog/passages/linux使用crontab命令指定时间段内随机执行任务/)，但是后来想想容易出bug，\n\n比如：第一天执行是生成的随机时间要留给下次使用，如果第一次生成时间为8：01，那么第二天就会8：01执行任务，第二天8：01执行任务时生成的随机时间是8：05，那么8：05也会执行一次任务，就会导致同一天执行两次甚至多次任务。\n\n那么下面加入php重写,实现每天早晨8：00-8：09之间随机时间访问www.baidu.com：\n\n**shell代码sign.sh：**\n\n```shell\n#!/bin/bash\nr=$(($RANDOM%10)) ##生成10以内的随机数字\nrm -f /www/wwwroot/time.txt ##删除以前的time.txt\necho “08:0″$[r] >> /www/wwwroot/time.txt ##创建并将随机数字作为时间的分钟插入time.txt\nchmod 777 sign.sh ##设置shell脚本的权限\n```\n\n**crontab命令文件sign.cron:**\n\n```shell\n59 07 * * * ./sign.sh   ##定时7：59执行shell脚本生成随机时间\n0-9 08 * * * curl http://服务器ip/sign/Sys.php    ##8：00-8：09没分钟执行一次http请求\n```\n\n**php文件Sys.php：**\n\n```php\n<?php\nheader(“Content-type: text/html; charset=utf-8”);\n\n//打开time.txt文件，方法为只读\n\n$myfile = fopen(“time.txt”, “r”) or die(“Unable to open file!”);\n\n//将打开文件中的内容（这里即是shell脚本生成的随机时间）赋值给time1\n\n$time1=fread($myfile,filesize(“time.txt”));\n\nfclose($myfile); //关闭time.txt\n\n$randomtime=strtotime(“$time1”);//将随机时间转换成时间戳格式\n\n$time=date(‘H:i’,time());//获取当前时间\n$now=strtotime(“$time”);//将当前时间转换成时间戳格式\n\n//比较当前时间是否等于随机时间，若是，则执行下面代码\n\nif($now == $randomtime){\n\n//执行访问www.baidu.com的任务，也可以做其他任务，需要自己写代码\n\nheader(“Location: http://www.baidu.com”);\n\n}\n\nelse{\n//代码\n//这里是如果当前时间不等于随机时间的时候要执行的代码，不写即什么都不做\n}\n```\n\n注意：如果不将时间通过strtotime()转换成时间戳格式，将无法比较两个时间！\n\n**原理：**\n\n通过设定crontab定时任务，在7：59分时生成随机时间并存储到time.txt中，第二个任务在8：00-8：09之间每分钟执行一次，\n\n**curl http://服务器ip/sign/Sys.php 命令即是向服务器发送请求，**服务器Sys.php每分钟收到一次请求，并每次判断当前时间是否与time.txt中的随机时间相等，若相等，执行预先设置好的任务，若不等，什么也不做，等待下一次请求。\n\n\n\n通过以上方式即可实现每天在特定的时间段中的随机时间执行任务。\n\n若你有更好的方式，欢迎留言，谢谢！","slug":"shell命令-crontab-php实现每天特定时间段内随机时间执行任务","published":1,"updated":"2019-07-08T01:49:09.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxtsd55y001pu8tv6z28bebl","content":"<p>之前写过使用shell+crontab实现每天随机执行任务（<a href=\"lucent.blog/passages/linux使用crontab命令指定时间段内随机执行任务/\">linux使用crontab命令指定时间段内随机执行任务</a>，但是后来想想容易出bug，</p>\n<p>比如：第一天执行是生成的随机时间要留给下次使用，如果第一次生成时间为8：01，那么第二天就会8：01执行任务，第二天8：01执行任务时生成的随机时间是8：05，那么8：05也会执行一次任务，就会导致同一天执行两次甚至多次任务。</p>\n<p>那么下面加入php重写,实现每天早晨8：00-8：09之间随机时间访问<a href=\"http://www.baidu.com：\" target=\"_blank\" rel=\"noopener\">www.baidu.com：</a></p>\n<p><strong>shell代码sign.sh：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">r=$(($RANDOM%10)) ##生成10以内的随机数字</span><br><span class=\"line\">rm -f /www/wwwroot/time.txt ##删除以前的time.txt</span><br><span class=\"line\">echo “08:0″$[r] &gt;&gt; /www/wwwroot/time.txt ##创建并将随机数字作为时间的分钟插入time.txt</span><br><span class=\"line\">chmod 777 sign.sh ##设置shell脚本的权限</span><br></pre></td></tr></table></figure>\n\n<p><strong>crontab命令文件sign.cron:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">59 07 * * * ./sign.sh   ##定时7：59执行shell脚本生成随机时间</span><br><span class=\"line\">0-9 08 * * * curl http://服务器ip/sign/Sys.php    ##8：00-8：09没分钟执行一次http请求</span><br></pre></td></tr></table></figure>\n\n<p><strong>php文件Sys.php：</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(“Content-type: text/html; charset=utf<span class=\"number\">-8</span>”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打开time.txt文件，方法为只读</span></span><br><span class=\"line\"></span><br><span class=\"line\">$myfile = fopen(“time.txt”, “r”) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(“Unable to open file!”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将打开文件中的内容（这里即是shell脚本生成的随机时间）赋值给time1</span></span><br><span class=\"line\"></span><br><span class=\"line\">$time1=fread($myfile,filesize(“time.txt”));</span><br><span class=\"line\"></span><br><span class=\"line\">fclose($myfile); <span class=\"comment\">//关闭time.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">$randomtime=strtotime(“$time1”);<span class=\"comment\">//将随机时间转换成时间戳格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">$time=date(‘H:i’,time());<span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\">$now=strtotime(“$time”);<span class=\"comment\">//将当前时间转换成时间戳格式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较当前时间是否等于随机时间，若是，则执行下面代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>($now == $randomtime)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行访问www.baidu.com的任务，也可以做其他任务，需要自己写代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">header(“Location: http:<span class=\"comment\">//www.baidu.com”);</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//代码</span></span><br><span class=\"line\"><span class=\"comment\">//这里是如果当前时间不等于随机时间的时候要执行的代码，不写即什么都不做</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果不将时间通过strtotime()转换成时间戳格式，将无法比较两个时间！</p>\n<p><strong>原理：</strong></p>\n<p>通过设定crontab定时任务，在7：59分时生成随机时间并存储到time.txt中，第二个任务在8：00-8：09之间每分钟执行一次，</p>\n<p><strong>curl http://服务器ip/sign/Sys.php 命令即是向服务器发送请求，</strong>服务器Sys.php每分钟收到一次请求，并每次判断当前时间是否与time.txt中的随机时间相等，若相等，执行预先设置好的任务，若不等，什么也不做，等待下一次请求。</p>\n<p>通过以上方式即可实现每天在特定的时间段中的随机时间执行任务。</p>\n<p>若你有更好的方式，欢迎留言，谢谢！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前写过使用shell+crontab实现每天随机执行任务（<a href=\"lucent.blog/passages/linux使用crontab命令指定时间段内随机执行任务/\">linux使用crontab命令指定时间段内随机执行任务</a>，但是后来想想容易出bug，</p>\n<p>比如：第一天执行是生成的随机时间要留给下次使用，如果第一次生成时间为8：01，那么第二天就会8：01执行任务，第二天8：01执行任务时生成的随机时间是8：05，那么8：05也会执行一次任务，就会导致同一天执行两次甚至多次任务。</p>\n<p>那么下面加入php重写,实现每天早晨8：00-8：09之间随机时间访问<a href=\"http://www.baidu.com：\" target=\"_blank\" rel=\"noopener\">www.baidu.com：</a></p>\n<p><strong>shell代码sign.sh：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">r=$(($RANDOM%10)) ##生成10以内的随机数字</span><br><span class=\"line\">rm -f /www/wwwroot/time.txt ##删除以前的time.txt</span><br><span class=\"line\">echo “08:0″$[r] &gt;&gt; /www/wwwroot/time.txt ##创建并将随机数字作为时间的分钟插入time.txt</span><br><span class=\"line\">chmod 777 sign.sh ##设置shell脚本的权限</span><br></pre></td></tr></table></figure>\n\n<p><strong>crontab命令文件sign.cron:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">59 07 * * * ./sign.sh   ##定时7：59执行shell脚本生成随机时间</span><br><span class=\"line\">0-9 08 * * * curl http://服务器ip/sign/Sys.php    ##8：00-8：09没分钟执行一次http请求</span><br></pre></td></tr></table></figure>\n\n<p><strong>php文件Sys.php：</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(“Content-type: text/html; charset=utf<span class=\"number\">-8</span>”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打开time.txt文件，方法为只读</span></span><br><span class=\"line\"></span><br><span class=\"line\">$myfile = fopen(“time.txt”, “r”) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(“Unable to open file!”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将打开文件中的内容（这里即是shell脚本生成的随机时间）赋值给time1</span></span><br><span class=\"line\"></span><br><span class=\"line\">$time1=fread($myfile,filesize(“time.txt”));</span><br><span class=\"line\"></span><br><span class=\"line\">fclose($myfile); <span class=\"comment\">//关闭time.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">$randomtime=strtotime(“$time1”);<span class=\"comment\">//将随机时间转换成时间戳格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">$time=date(‘H:i’,time());<span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\">$now=strtotime(“$time”);<span class=\"comment\">//将当前时间转换成时间戳格式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较当前时间是否等于随机时间，若是，则执行下面代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>($now == $randomtime)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行访问www.baidu.com的任务，也可以做其他任务，需要自己写代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">header(“Location: http:<span class=\"comment\">//www.baidu.com”);</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//代码</span></span><br><span class=\"line\"><span class=\"comment\">//这里是如果当前时间不等于随机时间的时候要执行的代码，不写即什么都不做</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果不将时间通过strtotime()转换成时间戳格式，将无法比较两个时间！</p>\n<p><strong>原理：</strong></p>\n<p>通过设定crontab定时任务，在7：59分时生成随机时间并存储到time.txt中，第二个任务在8：00-8：09之间每分钟执行一次，</p>\n<p><strong>curl http://服务器ip/sign/Sys.php 命令即是向服务器发送请求，</strong>服务器Sys.php每分钟收到一次请求，并每次判断当前时间是否与time.txt中的随机时间相等，若相等，执行预先设置好的任务，若不等，什么也不做，等待下一次请求。</p>\n<p>通过以上方式即可实现每天在特定的时间段中的随机时间执行任务。</p>\n<p>若你有更好的方式，欢迎留言，谢谢！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxtsd54h0000u8tvy6amhfam","category_id":"cjxtsd54r0002u8tvk71yydqa","_id":"cjxtsd54z000cu8tvjtga5fcd"},{"post_id":"cjxtsd54x000au8tvf12k9ddv","category_id":"cjxtsd54w0007u8tvzn837u7v","_id":"cjxtsd553000ju8tvi21atqdw"},{"post_id":"cjxtsd54p0001u8tvbuqaes4g","category_id":"cjxtsd54w0007u8tvzn837u7v","_id":"cjxtsd556000nu8tv49nai2dy"},{"post_id":"cjxtsd54t0004u8tv6gvye6zq","category_id":"cjxtsd54z000du8tvnw9rkkoo","_id":"cjxtsd559000qu8tvtakbs5c5"},{"post_id":"cjxtsd54u0005u8tvvb1c23j8","category_id":"cjxtsd54w0007u8tvzn837u7v","_id":"cjxtsd55c000wu8tvmcg6h0uj"},{"post_id":"cjxtsd54v0006u8tvx995wejm","category_id":"cjxtsd54z000du8tvnw9rkkoo","_id":"cjxtsd55e0010u8tvgxdpe0nx"},{"post_id":"cjxtsd55b000uu8tvncm4ksmd","category_id":"cjxtsd54z000du8tvnw9rkkoo","_id":"cjxtsd55f0013u8tvq7gu6q2c"},{"post_id":"cjxtsd54y000bu8tv78s2c3o9","category_id":"cjxtsd55c000vu8tv2mewxtvd","_id":"cjxtsd55g0016u8tvr41mhnv3"},{"post_id":"cjxtsd550000gu8tvn7nun8wx","category_id":"cjxtsd55c000vu8tv2mewxtvd","_id":"cjxtsd55i001au8tvbhix7z7v"},{"post_id":"cjxtsd552000iu8tvgo3gjbn1","category_id":"cjxtsd55c000vu8tv2mewxtvd","_id":"cjxtsd55j001du8tv4mjrvsyy"},{"post_id":"cjxtsd555000mu8tv9sk2dpil","category_id":"cjxtsd55i0019u8tvlfoiyxur","_id":"cjxtsd55l001hu8tvinhtfq55"},{"post_id":"cjxtsd557000ou8tvd9j0zcwm","category_id":"cjxtsd55c000vu8tv2mewxtvd","_id":"cjxtsd55m001ku8tvt3g2ko79"},{"post_id":"cjxtsd55y001pu8tv6z28bebl","category_id":"cjxtsd54z000du8tvnw9rkkoo","_id":"cjxtsd561001uu8tvl2dcck2u"}],"PostTag":[{"post_id":"cjxtsd54h0000u8tvy6amhfam","tag_id":"cjxtsd54s0003u8tvvu6qmo67","_id":"cjxtsd54x0009u8tvsd9qk69r"},{"post_id":"cjxtsd54x000au8tvf12k9ddv","tag_id":"cjxtsd54w0008u8tv8eej5ix2","_id":"cjxtsd550000fu8tvbr6hd1za"},{"post_id":"cjxtsd54p0001u8tvbuqaes4g","tag_id":"cjxtsd54w0008u8tv8eej5ix2","_id":"cjxtsd551000hu8tveh0frd1t"},{"post_id":"cjxtsd54t0004u8tv6gvye6zq","tag_id":"cjxtsd550000eu8tvs6dbv7px","_id":"cjxtsd55b000tu8tvm6yp6wk6"},{"post_id":"cjxtsd54t0004u8tv6gvye6zq","tag_id":"cjxtsd554000lu8tv48a3ttm1","_id":"cjxtsd55d000xu8tvg0dcotdf"},{"post_id":"cjxtsd54u0005u8tvvb1c23j8","tag_id":"cjxtsd54w0008u8tv8eej5ix2","_id":"cjxtsd55e000zu8tvk0rnj1qd"},{"post_id":"cjxtsd54v0006u8tvx995wejm","tag_id":"cjxtsd554000lu8tv48a3ttm1","_id":"cjxtsd55f0014u8tvromus86t"},{"post_id":"cjxtsd54y000bu8tv78s2c3o9","tag_id":"cjxtsd55e0012u8tvshfjh096","_id":"cjxtsd55h0018u8tvu8wh6xdu"},{"post_id":"cjxtsd550000gu8tvn7nun8wx","tag_id":"cjxtsd55e0012u8tvshfjh096","_id":"cjxtsd55j001cu8tvrvnzzvd0"},{"post_id":"cjxtsd552000iu8tvgo3gjbn1","tag_id":"cjxtsd55e0012u8tvshfjh096","_id":"cjxtsd55k001gu8tvmrc71k3a"},{"post_id":"cjxtsd555000mu8tv9sk2dpil","tag_id":"cjxtsd55k001fu8tv2ugtr8up","_id":"cjxtsd55l001ju8tv96f07f1q"},{"post_id":"cjxtsd557000ou8tvd9j0zcwm","tag_id":"cjxtsd55e0012u8tvshfjh096","_id":"cjxtsd55m001mu8tvaiu16nrg"},{"post_id":"cjxtsd55b000uu8tvncm4ksmd","tag_id":"cjxtsd554000lu8tv48a3ttm1","_id":"cjxtsd55n001nu8tvfobtggpo"},{"post_id":"cjxtsd55b000uu8tvncm4ksmd","tag_id":"cjxtsd55m001lu8tvrvyf61le","_id":"cjxtsd55o001ou8tvw1x7smmq"},{"post_id":"cjxtsd55y001pu8tv6z28bebl","tag_id":"cjxtsd560001su8tvcony3xrd","_id":"cjxtsd562001wu8tvsivkoh41"},{"post_id":"cjxtsd55y001pu8tv6z28bebl","tag_id":"cjxtsd55m001lu8tvrvyf61le","_id":"cjxtsd563001xu8tvmdanel1n"}],"Tag":[{"name":"Dayz","_id":"cjxtsd54s0003u8tvvu6qmo67"},{"name":"Docker","_id":"cjxtsd54w0008u8tv8eej5ix2"},{"name":"Centos","_id":"cjxtsd550000eu8tvs6dbv7px"},{"name":"Linux","_id":"cjxtsd554000lu8tv48a3ttm1"},{"name":"Redis","_id":"cjxtsd55e0012u8tvshfjh096"},{"name":"js","_id":"cjxtsd55k001fu8tv2ugtr8up"},{"name":"Crontab","_id":"cjxtsd55m001lu8tvrvyf61le"},{"name":"Liunx","_id":"cjxtsd560001su8tvcony3xrd"}]}}