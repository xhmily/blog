<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解决element ui 日期选择器默认时间少一天的问题</title>
      <link href="/passages/element-ui-%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8%E9%BB%98%E8%AE%A4%E6%97%B6%E9%97%B4%E5%B0%91%E4%B8%80%E5%A4%A9/"/>
      <url>/passages/element-ui-%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8%E9%BB%98%E8%AE%A4%E6%97%B6%E9%97%B4%E5%B0%91%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>今天在使用element-ui 的日期选择器的时候出现一个奇怪的问题，选中的日期在获取值之后会比选中的日期少一天：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"mr10"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"selectedDate"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"daterange"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">unlink-panels</span></span></span><br><span class="line"><span class="tag">        <span class="attr">range-separator</span>=<span class="string">"至"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">start-placeholder</span>=<span class="string">"开始日期"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">end-placeholder</span>=<span class="string">"结束日期"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/20190905180454.png" alt></p><p>在网上搜索之后发现很多人遇到这个，最终找到一个最简单好用的解决方法：</p><p>就是加上这一段代码 <strong>value-format=”yyyy-MM-dd”</strong>如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"mr10"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">"selectedDate"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"daterange"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">unlink-panels</span></span></span><br><span class="line"><span class="tag">        <span class="attr">range-separator</span>=<span class="string">"至"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">start-placeholder</span>=<span class="string">"开始日期"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">end-placeholder</span>=<span class="string">"结束日期"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">value-format</span>=<span class="string">"yyyy-MM-dd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果如下图：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/20190905180920.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序头像样式</title>
      <link href="/passages/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A4%B4%E5%83%8F%E6%A0%B7%E5%BC%8F/"/>
      <url>/passages/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A4%B4%E5%83%8F%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h4><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/20190820115102.png" alt></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"userinfo-avatar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open-data</span>  <span class="attr">type</span>=<span class="string">"userAvatarUrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open-data</span> <span class="attr">type</span>=<span class="string">"userNickName"</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.userinfo</span> &#123;  </span><br><span class="line">  <span class="attribute">position</span>: relative;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">320</span>rpx;  </span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;  </span><br><span class="line">  <span class="attribute">display</span>: flex;  </span><br><span class="line">  <span class="attribute">flex-direction</span>: column;  </span><br><span class="line">  <span class="attribute">align-items</span>: center;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.userinfo-avatar</span> &#123;  </span><br><span class="line">  <span class="attribute">overflow</span>:hidden;  </span><br><span class="line">  <span class="attribute">display</span>: block;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">160</span>rpx;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160</span>rpx;  </span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20</span>rpx;  </span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50</span>rpx;  </span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;  </span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.2);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.userinfo</span>&#123;  </span><br><span class="line">  <span class="comment">/* color: #fff; */</span>  </span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;  </span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c0c0c0</span>;  </span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">40%</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Flash被禁用的问题</title>
      <link href="/passages/%E8%A7%A3%E5%86%B3Flash%E8%A2%AB%E7%A6%81%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/passages/%E8%A7%A3%E5%86%B3Flash%E8%A2%AB%E7%A6%81%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="如果你在使用订单系统的过程中遇到类似如下的问题："><a href="#如果你在使用订单系统的过程中遇到类似如下的问题：" class="headerlink" title="如果你在使用订单系统的过程中遇到类似如下的问题："></a>如果你在使用订单系统的过程中遇到类似如下的问题：</h4><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/09GD2POK%40%405E%24ZU%25%7DE7WUYH.png" alt></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/QQ%E5%9B%BE%E7%89%8720190809151732.png" alt></p><p>请点击上图中的按钮，一般谷歌浏览器左上角都会弹出提示框询问是否启用flash，点击允许即可。</p><h4 id="如果未弹出任何提示，请按以下步骤设置："><a href="#如果未弹出任何提示，请按以下步骤设置：" class="headerlink" title="如果未弹出任何提示，请按以下步骤设置："></a>如果未弹出任何提示，请按以下步骤设置：</h4><h6 id="1-打开谷歌浏览器的设置"><a href="#1-打开谷歌浏览器的设置" class="headerlink" title="1.打开谷歌浏览器的设置"></a>1.打开谷歌浏览器的设置</h6><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/20190809152133.png" alt></p><h6 id="2-拉到最下，点击高级"><a href="#2-拉到最下，点击高级" class="headerlink" title="2.拉到最下，点击高级"></a>2.拉到最下，点击高级</h6><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/20190809152235.png" alt></p><h6 id="3-点击-网站设置"><a href="#3-点击-网站设置" class="headerlink" title="3.点击 网站设置"></a>3.点击 网站设置</h6><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/20190809152732.png" alt></p><h6 id="4-点击-Flash"><a href="#4-点击-Flash" class="headerlink" title="4.点击 Flash"></a>4.点击 Flash</h6><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/20190809152630.png" alt></p><h6 id="5-将其修改为-lt-先询问-gt"><a href="#5-将其修改为-lt-先询问-gt" class="headerlink" title="5.将其修改为  &lt;先询问&gt;"></a>5.将其修改为  &lt;先询问&gt;</h6><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/20190809152547.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>可能会用到的cmd命令</title>
      <link href="/passages/%E5%8F%AF%E8%83%BD%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84cmd%E5%91%BD%E4%BB%A4/"/>
      <url>/passages/%E5%8F%AF%E8%83%BD%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84cmd%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="查找对应的端口占用的进程，找到占用端口对应的程序的PID号："><a href="#查找对应的端口占用的进程，找到占用端口对应的程序的PID号：" class="headerlink" title="查找对应的端口占用的进程，找到占用端口对应的程序的PID号："></a>查找对应的端口占用的进程，找到占用端口对应的程序的PID号：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat  -aon|findstr  <span class="string">"8080"</span></span><br></pre></td></tr></table></figure><h4 id="根据PID号找到对应的程序-，找到对应的程序名："><a href="#根据PID号找到对应的程序-，找到对应的程序名：" class="headerlink" title="根据PID号找到对应的程序 ，找到对应的程序名："></a>根据PID号找到对应的程序 ，找到对应的程序名：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr <span class="string">"6676"</span></span><br></pre></td></tr></table></figure><h4 id="结束进程："><a href="#结束进程：" class="headerlink" title="结束进程："></a>结束进程：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /f /t /im java.exe</span><br></pre></td></tr></table></figure><h4 id="BAT脚本通过端口号获取pid并结束进程："><a href="#BAT脚本通过端口号获取pid并结束进程：" class="headerlink" title="BAT脚本通过端口号获取pid并结束进程："></a>BAT脚本通过端口号获取pid并结束进程：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">"tokens=1-5"</span> %%a <span class="keyword">in</span> (<span class="string">'netstat -ano ^| find ":%1"'</span>) <span class="keyword">do</span> (</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"%%e%"</span> == <span class="string">""</span> (</span><br><span class="line">        <span class="built_in">set</span> pid=%%d</span><br><span class="line">    ) <span class="keyword">else</span> (</span><br><span class="line">        <span class="built_in">set</span> pid=%%e</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">echo</span> !pid!</span><br><span class="line">    taskkill /f /pid !pid!</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="BAT脚本调用steamcmd安装服务器"><a href="#BAT脚本调用steamcmd安装服务器" class="headerlink" title="BAT脚本调用steamcmd安装服务器"></a>BAT脚本调用steamcmd安装服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\steamcmd +login 账号 密码 +force_install_dir C:\dayz\ +app_update 223350</span><br></pre></td></tr></table></figure><h4 id="BAT调用steamcmd下载mod"><a href="#BAT调用steamcmd下载mod" class="headerlink" title="BAT调用steamcmd下载mod"></a>BAT调用steamcmd下载mod</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">steamcmd +login 账号 密码 +force_install_dir c:\mod +workshop_download_item 游戏id Modid</span><br><span class="line">::下载mod需要登录的账号拥有该游戏才可下载</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CMD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java执行cmd命令工具类(windows)</title>
      <link href="/passages/java%E6%89%A7%E8%A1%8Ccmd%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E7%B1%BB-windows/"/>
      <url>/passages/java%E6%89%A7%E8%A1%8Ccmd%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7%E7%B1%BB-windows/</url>
      
        <content type="html"><![CDATA[<h3 id="执行windows的cmd命令工具类"><a href="#执行windows的cmd命令工具类" class="headerlink" title="执行windows的cmd命令工具类"></a>执行windows的cmd命令工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行windows的cmd命令工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmdTools</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *公共部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Commandexecuter</span><span class="params">(String cmdCommand)</span></span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Process process = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process = Runtime.getRuntime().exec(cmdCommand);</span><br><span class="line">            BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(process.getInputStream(), <span class="string">"GBK"</span>));</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((line=bufferedReader.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stringBuilder.append(line+<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行一个cmd命令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cmdCommand cmd命令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 命令执行结果字符串，如出现异常返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">excuteCMDCommand</span><span class="params">(String cmdCommand)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> CmdTools.Commandexecuter(cmdCommand);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行bat文件，</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file bat文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isCloseWindow 执行完毕后是否关闭cmd窗口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bat文件输出log</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">excuteBatFile</span><span class="params">(String file, <span class="keyword">boolean</span> isCloseWindow)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String cmdCommand = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(isCloseWindow)</span><br><span class="line">        &#123;</span><br><span class="line">            cmdCommand = <span class="string">"cmd.exe /c "</span>+file;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cmdCommand = <span class="string">"cmd.exe /k "</span>+file;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CmdTools.Commandexecuter(cmdCommand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行bat文件,新开窗口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file bat文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isCloseWindow 执行完毕后是否关闭cmd窗口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bat文件输出log</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">excuteBatFileWithNewWindow</span><span class="params">(String file, <span class="keyword">boolean</span> isCloseWindow)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String cmdCommand = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(isCloseWindow)</span><br><span class="line">        &#123;</span><br><span class="line">            cmdCommand = <span class="string">"cmd.exe /c start"</span>+file;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cmdCommand = <span class="string">"cmd.exe /k start"</span>+file;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Commandexecuter(cmdCommand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String cmd = <span class="string">"ping 127.0.0.1"</span>;</span><br><span class="line">        String result = CmdTools.excuteCMDCommand(cmd);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找某进程pid-java-："><a href="#查找某进程pid-java-：" class="headerlink" title="查找某进程pid(java)："></a>查找某进程pid(java)：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String result = test.excuteBatFile(<span class="string">"findPid.bat"</span>,<span class="keyword">true</span>);</span><br><span class="line">String[] str=result.split(<span class="string">"\n"</span>);</span><br><span class="line"> String[] str=result.split(<span class="string">"\n"</span>);</span><br><span class="line">        String Pid=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i].indexOf(<span class="string">"cmd.exe"</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                Pid=str[i].split(<span class="string">","</span>)[<span class="number">1</span>].replace(<span class="string">"\""</span>,<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="findPid-bat"><a href="#findPid-bat" class="headerlink" title="findPid.bat:"></a>findPid.bat:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist /v /fo csv | findstr /i <span class="string">"myprocess"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery实现一键全选/反选/不选</title>
      <link href="/passages/Jquery%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%85%A8%E9%80%89-%E5%8F%8D%E9%80%89-%E4%B8%8D%E9%80%89/"/>
      <url>/passages/Jquery%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%85%A8%E9%80%89-%E5%8F%8D%E9%80%89-%E4%B8%8D%E9%80%89/</url>
      
        <content type="html"><![CDATA[<h5 id="使用jQuery实现的一键全选-反选-不选"><a href="#使用jQuery实现的一键全选-反选-不选" class="headerlink" title="使用jQuery实现的一键全选/反选/不选"></a>使用jQuery实现的一键全选/反选/不选</h5><h6 id="页面代码："><a href="#页面代码：" class="headerlink" title="页面代码："></a>页面代码：</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>小王</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>小李</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>小张</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>老刘</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span>老瓜</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span>老毕</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"orChecked"</span>&gt;</span>全选/反选/全不选</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="js代码："><a href="#js代码：" class="headerlink" title="js代码："></a>js代码：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#orChecked'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>($(<span class="keyword">this</span>).is(<span class="string">':checked'</span>))&#123;</span><br><span class="line">     <span class="keyword">var</span> box = $(<span class="string">'#box'</span>).children(<span class="string">':checkbox'</span>);</span><br><span class="line">      <span class="comment">// 复选框长度和没选中的个数一样 -&gt; 全选</span></span><br><span class="line">     <span class="keyword">if</span>(box.length==box.filter(<span class="string">':not(:checked)'</span>).length)&#123;    </span><br><span class="line">      $(<span class="string">'#box'</span>).children(<span class="string">':checkbox'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 如果有选中个数，-&gt; 反选 </span></span><br><span class="line">        $(<span class="string">'#box'</span>).children(<span class="string">':checkbox'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;     </span><br><span class="line">           $(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>,$(<span class="keyword">this</span>).is(<span class="string">':checked'</span>)?<span class="literal">false</span>:<span class="literal">true</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 如控制键取消选中，剩余的checkbox也取消选中</span></span><br><span class="line">      $(<span class="string">'#box'</span>).children(<span class="string">':checkbox'</span>).prop(<span class="string">'checked'</span>,<span class="literal">false</span>);    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 命令</title>
      <link href="/passages/Hexo%E5%91%BD%E4%BB%A4/"/>
      <url>/passages/Hexo%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="清理静态文件"><a href="#清理静态文件" class="headerlink" title="清理静态文件"></a>清理静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate <span class="comment">## hexo g</span></span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署到远程服务器"><a href="#部署到远程服务器" class="headerlink" title="部署到远程服务器"></a>部署到远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy <span class="comment">## hexo d</span></span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server <span class="comment">## hexo s</span></span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="从远程服务器下载Hexo环境及文章原始文件-更换电脑时"><a href="#从远程服务器下载Hexo环境及文章原始文件-更换电脑时" class="headerlink" title="从远程服务器下载Hexo环境及文章原始文件(更换电脑时)"></a>从远程服务器下载Hexo环境及文章原始文件(更换电脑时)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b hexo git@ip:/home/git/repos/blog.git</span><br></pre></td></tr></table></figure><h3 id="将本地Hexo环境及文章同步到远程服务器"><a href="#将本地Hexo环境及文章同步到远程服务器" class="headerlink" title="将本地Hexo环境及文章同步到远程服务器"></a>将本地Hexo环境及文章同步到远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure><h3 id="更新本地文件"><a href="#更新本地文件" class="headerlink" title="更新本地文件"></a>更新本地文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dayz独立版 服务器物资管理系统使用教程</title>
      <link href="/passages/Dayz%E7%8B%AC%E7%AB%8B%E7%89%88-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%89%A9%E8%B5%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/passages/Dayz%E7%8B%AC%E7%AB%8B%E7%89%88-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%89%A9%E8%B5%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="打开dayz-lucent-blog"><a href="#打开dayz-lucent-blog" class="headerlink" title="打开dayz.lucent.blog"></a>打开<a href="http://dayz.lucent.blog/" target="_blank" rel="noopener">dayz.lucent.blog</a></h5><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/16098cc357cdf9b9696fb0806e23170a.png" alt="1 (1).png"></p><h5 id="将types-xml文件-文件位于服务器目录-mpmissions-dayzOffline-chernarusplus-db中-拖入到浏览器中"><a href="#将types-xml文件-文件位于服务器目录-mpmissions-dayzOffline-chernarusplus-db中-拖入到浏览器中" class="headerlink" title="将types.xml文件(文件位于服务器目录/mpmissions/dayzOffline.chernarusplus/db中)拖入到浏览器中"></a>将types.xml文件(文件位于服务器目录/mpmissions/dayzOffline.chernarusplus/db中)拖入到浏览器中</h5><p><a href="https://lucent.blog/wp-content/uploads/2019/05/2.png"><img src="https://lucent.blog/wp-content/uploads/2019/05/2.png" alt="img"></a></p><h5 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h5><p>最大数量：服务器同时刷新出该物品的最大数量</p><p>最小数量：服务器同时刷新出该物品的最小数量</p><p>生成优先级：服务器刷新该物品的优先级，优先级越高，刷新队列越靠前</p><p>生成速度：值为0 时，服务器会一次性刷新出该物品的最大数量的物资，而当值大于0 时，服务器每隔一段时间(值为1800就是每隔1800秒)就会刷新出一个该物品</p><p>生命周期：该物品在周围没有玩家时，持续存在的最长时间(秒)，时间过去，物品消失，重新刷新</p><p>类别：该物品所属分类</p><p>在修改完之后点击保存，并下载即可！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dayz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记（四）主从复制及启动哨兵模式</title>
      <link href="/passages/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8F%8A%E5%90%AF%E5%8A%A8%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
      <url>/passages/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8F%8A%E5%90%AF%E5%8A%A8%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Redis主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主，优点是读写分离，容灾恢复。</p><h3 id="启动三台redis"><a href="#启动三台redis" class="headerlink" title="启动三台redis"></a>启动三台redis</h3><p>首先准备三个配置文件并分别配置三个不同端口，例如6379，6380，6381</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/27e80318e2d1c960c9e1b82cc5c31f6c.png" alt="1.png"></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/f40441601ba0bdd9edc725fdd4073d80.png" alt="2.png"></p><p>Pid文件名字，Log文件名字，Dump.rdb名字请根据需要自行设置</p><p>然后分别启动三台redis</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/46393812ad848d9d6644013557fb7da0.png" alt="3.png"></p><p>下图可见三台redis均启动成功</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/e497a8c339625bdb2b2be15a178e2a53.png" alt="4.png"></p><p>下面分别连接三台redis并查看当前redis的状态</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a4fa56a46d00b1757604a7874ff7bdc4.png" alt="5.png"></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/3349d3274cc1ae756b93e336c3bc8614.png" alt="6.png"></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7acc36c6623ec8c57175c43df7337174.png" alt="7.png"></p><p>可见，所有redis默认均为主库，并且没有从库连接</p><h3 id="配置主从复制"><a href="#配置主从复制" class="headerlink" title="配置主从复制"></a>配置主从复制</h3><p>主从服务器的配置原则是：配从(库)不配主(库)，即在从库进行配置，主库不用配置</p><p>注：无这里使用端口为6379的库作为主库，6380，6381库作为从库</p><p>配置代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SLAVEOF 127.0.0.1 6379 #需要在两个从库中分别执行</span><br></pre></td></tr></table></figure><p>再次查看三个库的状态：</p><p><code>Info replication</code><br>主库</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/adec81fa42dfadb0e40042861b5efa02.png" alt="8.png"></p><p>从库</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7e583c8163247cbc78b81921a14411d1.png" alt="9.png"></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a4259fcb18c90eca1c0915de8a3dba41.png" alt="10.png"></p><p>注：每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件</p><p>测试数据同步,在主库中执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set k1 v1 #从库是只读的，不能执行写操作</span><br></pre></td></tr></table></figure><p>在两个从库中取出k1数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get k1</span><br></pre></td></tr></table></figure><p>可见主从复制已经配置成功</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>1.上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力</p><p>2.中途变更转向:会清除之前的数据，重新建立拷贝最新的</p><ol start="3"><li>主机shutdown或者挂掉后，从机不会自动上位成为主机，而是保持不变等待主机</li></ol><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/3eccff218c84219e84bf5dcb3ca10d26.png" alt="11.png"></p><p>当主机再次上线时会自动连接</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/7f1906dee03903145bb0810491252303.png" alt="12.png"></p><p>4.反客为主，可以使用命令：SLAVEOF no one 使当前数据库停止与其他数据库的同步，转成主数据库，这种方式并不方便，因为需要手动操作</p><h3 id="启动哨兵模式"><a href="#启动哨兵模式" class="headerlink" title="启动哨兵模式"></a>启动哨兵模式</h3><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><p>1.在你的配置文件目录下新建sentinel.conf文件，名字绝不能错,并填入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor 被监控库的名字(自定) 主库ip 端口 1  #示例，1 表示当票数大于1时即可成为主库</span><br><span class="line">sentinel monitor host6379 127.0.0.1 6379 1  #我的</span><br><span class="line">#一组sentinel能同时监控多个Master</span><br></pre></td></tr></table></figure><p>2.开启哨兵</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel /myredis/config/sentinel.conf  #配置文件路径请自行修改,启动成功如下图</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/020c2e2a8a71d380a24e33c0055ec08e.png" alt="13.png"></p><p>3.当主库发生故障</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/44a3da883658255212e93bf97afd97e2.png" alt="14.png"></p><p>哨兵发现问题，开始进行投票，选出新主库</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/a46d4fe35b8a26a61e06064f1aabed05.png" alt="15.png"></p><p>最终端口为6381的库成为主库，查看此时库的状态</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/8656628abc73d39c9fc0b2bf3e4b7107.png" alt="16.png"></p><p><img src="https://depth.team/wp-content/uploads/2018/09/Snipaste_2018-09-30_16-53-52.png" alt="img"></p><p>4.如果此时库6379恢复上线，不会发生主库冲突，哨兵会将6379连接至新的主库</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/fba2b883ad0d4e55e5524f44cf89167f.png" alt="17.png"></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/4a0167d623ad716bc20b03e81f374489.png" alt="18.png"></p><p>5.如果需要让哨兵后台运行，可以使用screen命令</p><h3 id="主从复制的缺点"><a href="#主从复制的缺点" class="headerlink" title="主从复制的缺点"></a>主从复制的缺点</h3><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记（三）Redis字符串(String)</title>
      <link href="/passages/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89Redis%E5%AD%97%E7%AC%A6%E4%B8%B2-String/"/>
      <url>/passages/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89Redis%E5%AD%97%E7%AC%A6%E4%B8%B2-String/</url>
      
        <content type="html"><![CDATA[<p>String（字符串）<br>string是redis最基本的类型，可以理解成与Memcached一模一样的类型，一个key对应一个value。<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">set key value  #设置key的值为value</span><br><span class="line"></span><br><span class="line">get key        #获取key的值</span><br><span class="line"></span><br><span class="line">incr key       #将key中存储的数据(必须为数字)加1</span><br><span class="line"></span><br><span class="line">incrby key 值  #将key中存储的数据(必须为数字)加上指定的值</span><br><span class="line"></span><br><span class="line">decr key       #将key中存储的数据(必须为数字)减1</span><br><span class="line"></span><br><span class="line">decrby key 值  #将key中存储的数据(必须为数字)减去指定的值</span><br><span class="line"></span><br><span class="line">getrange key start end  #返回key中字符串值的子字符(获取指定区间范围内的值,类似between...and)</span><br><span class="line"></span><br><span class="line">setrange key offset value #设置指定区间范围内的值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SETEX key seconds value #设置带过期时间的key</span><br><span class="line"></span><br><span class="line">SETNX key value  #只有在 key 不存在时设置 key 的值</span><br><span class="line"></span><br><span class="line">mset key1 value1 key2 value2 ...    #同时设置一个或多个 key-value 对</span><br><span class="line">mget value1 value2 ... #获取所有(一个或多个)给定 key 的值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msetnx key1 value1 key2 value2 #同时设置一个或多个key-value对，当且仅当所有给定 key 都不存在</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记（二）Redis 键(key)</title>
      <link href="/passages/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89Redis-%E9%94%AE-key/"/>
      <url>/passages/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89Redis-%E9%94%AE-key/</url>
      
        <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select db #选择数据库，redis默认16个库（0-15）</span><br><span class="line">keys *  #列出当前库中所有key</span><br><span class="line">exists key的名字 #判断某个key是否存在</span><br><span class="line">expire key seconds(秒)  #为给定的key设置过期时间</span><br><span class="line">ttl key  #查看还有多少秒过期，-1表示永不过期，-2表示已过期</span><br><span class="line">type key #查看key是什么类型</span><br><span class="line">move key db #移动key到指定数据库，当前库就没有了，被移除了</span><br><span class="line">RENAME key newkey #修改key的名字为newkey</span><br><span class="line">RENAMENX key newkey #当newkey不存在时修改key为newkey</span><br><span class="line">DEl key  #当key存在时删除key</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记（一）redis安装（Centos7）和简单存取数据</title>
      <link href="/passages/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89redis%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E5%92%8C%E7%AE%80%E5%8D%95%E5%AD%98%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
      <url>/passages/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89redis%E5%AE%89%E8%A3%85%EF%BC%88Centos7%EF%BC%89%E5%92%8C%E7%AE%80%E5%8D%95%E5%AD%98%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>redis是非关系型数据库（NoSql），NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。</p><h3 id="redis的安装"><a href="#redis的安装" class="headerlink" title="redis的安装"></a>redis的安装</h3><p>1.创建myredis文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir myredis</span><br></pre></td></tr></table></figure><p>2.下载redis最新版<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p><p>可以直接下载再传到Centos系统中，也可以在Centos中使用如下命令直接下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myredis #进入文件夹</span><br><span class="line">wget http://download.redis.io/releases/redis-4.0.11.tar.gz  #官网获取的最新版下载地址</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/93208aaf8c9e9eda078781d97446e5df.png" alt="1.png"></p><p>解压文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-4.0.11.tar.gz</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/25903b2c36c69056aef412f63c16ac69.png" alt="2.png"></p><p>安装gcc（redis是用C语言开发的，需要gcc编译）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/e650d043a789e8145a8fa2924b9c1ac0.png" alt="3.png"></p><p>进入 redis-4.0.11 文件夹并安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd redis-4.0.11</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/c4eaec43d4e699459ff52749c4883306.png" alt="4.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make  #编译</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/aa08428fb3d6fe9e0db2974a95c46a74.png" alt="5.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install  #安装</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/28574d869b698bf640bc38e4fe298c47.png" alt="6.png"></p><p>配置redis</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/71d669562446b3f742908e02ef00eb7f.png" alt="7.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi redis.conf</span><br><span class="line">#将GENERAL中 daemonize 设置为yes</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/ef49c702af0dcbbd1b8240e42c96095d.png" alt="8.png"></p><h3 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h3><p>进入 /root/myredis/redis-4.0.11/src 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/myredis/redis-4.0.11/src</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/4754f06480636416931deb80b67cebff.png" alt="9.png"></p><p>启动redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server ../redis.conf</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/176154826b9137d9058a207706a02c01.png" alt="10.png"></p><p>查看进程是否启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/832ef01f844d7c0904152da427aa9464.png" alt="11.png"></p><p>可见默认端口是 <strong>6379</strong> 服务端已经启动</p><h3 id="简单的数据存取"><a href="#简单的数据存取" class="headerlink" title="简单的数据存取"></a>简单的数据存取</h3><p>在redis中数据是以键值对（Key-value）形式存储的</p><p>启动客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/8a615f99da40dc273a8c72ed047ec621.png" alt="Snipaste_2018-09-19_23-18-04.png"></p><p>存数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set myFirstData hello-world</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/9765d9e2bd31b990e98f7c693bbcdb55.png" alt="12.png"></p><p>取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get myFirstData</span><br></pre></td></tr></table></figure><p>到这里，如果redis存取正常，那么恭喜你，安装完成！</p><h3 id="退出客户端"><a href="#退出客户端" class="headerlink" title="退出客户端"></a>退出客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="关闭服务端"><a href="#关闭服务端" class="headerlink" title="关闭服务端"></a>关闭服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379 shutdown</span><br><span class="line"># -p为可选项 默认6379，多个redis运行的情况下需要指明要关闭redis的端口</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/08/d6f31ecc534d517806fa020389a7454c.png" alt="13.png"></p><p>可见redis已经被关闭</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Supervisor守护进程并开机启动</title>
      <link href="/passages/CentOS%E5%AE%89%E8%A3%85Supervisor%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
      <url>/passages/CentOS%E5%AE%89%E8%A3%85Supervisor%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E5%B9%B6%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>安装：</strong></p><p>centos6.9安装方法</p><p><code>easy_install supervisor</code></p><p>centos7安装方法</p><p><code>yum install supervisor</code></p><p>在/etc/目录下建立配置文件</p><p><code>echo_supervisord_conf &gt; /etc/supervisord.conf</code></p><p>修改配置文件</p><p><code>vi /etc/supervisord.conf</code></p><p>在末尾加入配置信息</p><p>一般配置信息都是[program:xxx]开头的</p><p><strong>配置：</strong></p><p><span style="color: #ff0000;">command为真实安装路径!</span></p><p>[][program:frp]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">user=root</span><br><span class="line">command=/root/frp/frpsa/frps -c /root/frp/frpsa/frps.ini</span><br><span class="line">startsecs=1</span><br><span class="line">startretries=100</span><br><span class="line">autorstart=true</span><br><span class="line">autorestart=true</span><br><span class="line">stderr_logfile=/tmp/err-frps.log</span><br><span class="line">stderr_logfile_maxbytes=50MB</span><br><span class="line">stderr_logfile_backups=10</span><br><span class="line">stdout_logfile=/tmp/out-frps.log</span><br><span class="line">stdout_logfile_maxbytes=50MB</span><br><span class="line">stdout_logfile_backups=10</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><p>直接启动supervisor</p><p><code>supervisord</code></p><p>或指定配置文件启动</p><p><code>supervisord -c /etc/supervisord.conf</code></p><p>#配置开机自启<br><code>systemctl enable supervisord</code></p><p>#验证一下是否为开机启动</p><p><code>systemctl is-enabled supervisord</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell命令+crontab+php实现每天特定时间段内随机时间执行任务</title>
      <link href="/passages/shell%E5%91%BD%E4%BB%A4-crontab-php%E5%AE%9E%E7%8E%B0%E6%AF%8F%E5%A4%A9%E7%89%B9%E5%AE%9A%E6%97%B6%E9%97%B4%E6%AE%B5%E5%86%85%E9%9A%8F%E6%9C%BA%E6%97%B6%E9%97%B4%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/"/>
      <url>/passages/shell%E5%91%BD%E4%BB%A4-crontab-php%E5%AE%9E%E7%8E%B0%E6%AF%8F%E5%A4%A9%E7%89%B9%E5%AE%9A%E6%97%B6%E9%97%B4%E6%AE%B5%E5%86%85%E9%9A%8F%E6%9C%BA%E6%97%B6%E9%97%B4%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>之前写过使用shell+crontab实现每天随机执行任务（<a href="lucent.blog/passages/linux使用crontab命令指定时间段内随机执行任务/">linux使用crontab命令指定时间段内随机执行任务</a>，但是后来想想容易出bug，</p><p>比如：第一天执行是生成的随机时间要留给下次使用，如果第一次生成时间为8：01，那么第二天就会8：01执行任务，第二天8：01执行任务时生成的随机时间是8：05，那么8：05也会执行一次任务，就会导致同一天执行两次甚至多次任务。</p><p>那么下面加入php重写,实现每天早晨8：00-8：09之间随机时间访问<a href="http://www.baidu.com：" target="_blank" rel="noopener">www.baidu.com：</a></p><p><strong>shell代码sign.sh：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">r=$(($RANDOM%10)) ##生成10以内的随机数字</span><br><span class="line">rm -f /www/wwwroot/time.txt ##删除以前的time.txt</span><br><span class="line">echo “08:0″$[r] &gt;&gt; /www/wwwroot/time.txt ##创建并将随机数字作为时间的分钟插入time.txt</span><br><span class="line">chmod 777 sign.sh ##设置shell脚本的权限</span><br></pre></td></tr></table></figure><p><strong>crontab命令文件sign.cron:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">59 07 * * * ./sign.sh   ##定时7：59执行shell脚本生成随机时间</span><br><span class="line">0-9 08 * * * curl http://服务器ip/sign/Sys.php    ##8：00-8：09没分钟执行一次http请求</span><br></pre></td></tr></table></figure><p><strong>php文件Sys.php：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(“Content-type: text/html; charset=utf<span class="number">-8</span>”);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开time.txt文件，方法为只读</span></span><br><span class="line"></span><br><span class="line">$myfile = fopen(“time.txt”, “r”) <span class="keyword">or</span> <span class="keyword">die</span>(“Unable to open file!”);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将打开文件中的内容（这里即是shell脚本生成的随机时间）赋值给time1</span></span><br><span class="line"></span><br><span class="line">$time1=fread($myfile,filesize(“time.txt”));</span><br><span class="line"></span><br><span class="line">fclose($myfile); <span class="comment">//关闭time.txt</span></span><br><span class="line"></span><br><span class="line">$randomtime=strtotime(“$time1”);<span class="comment">//将随机时间转换成时间戳格式</span></span><br><span class="line"></span><br><span class="line">$time=date(‘H:i’,time());<span class="comment">//获取当前时间</span></span><br><span class="line">$now=strtotime(“$time”);<span class="comment">//将当前时间转换成时间戳格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//比较当前时间是否等于随机时间，若是，则执行下面代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($now == $randomtime)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行访问www.baidu.com的任务，也可以做其他任务，需要自己写代码</span></span><br><span class="line"></span><br><span class="line">header(“Location: http:<span class="comment">//www.baidu.com”);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//代码</span></span><br><span class="line"><span class="comment">//这里是如果当前时间不等于随机时间的时候要执行的代码，不写即什么都不做</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果不将时间通过strtotime()转换成时间戳格式，将无法比较两个时间！</p><p><strong>原理：</strong></p><p>通过设定crontab定时任务，在7：59分时生成随机时间并存储到time.txt中，第二个任务在8：00-8：09之间每分钟执行一次，</p><p><strong>curl http://服务器ip/sign/Sys.php 命令即是向服务器发送请求，</strong>服务器Sys.php每分钟收到一次请求，并每次判断当前时间是否与time.txt中的随机时间相等，若相等，执行预先设置好的任务，若不等，什么也不做，等待下一次请求。</p><p>通过以上方式即可实现每天在特定的时间段中的随机时间执行任务。</p><p>若你有更好的方式，欢迎留言，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crontab </tag>
            
            <tag> Liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux使用crontab命令指定时间段内随机执行任务</title>
      <link href="/passages/linux%E4%BD%BF%E7%94%A8crontab%E5%91%BD%E4%BB%A4%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E6%AE%B5%E5%86%85%E9%9A%8F%E6%9C%BA%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/"/>
      <url>/passages/linux%E4%BD%BF%E7%94%A8crontab%E5%91%BD%E4%BB%A4%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E6%AE%B5%E5%86%85%E9%9A%8F%E6%9C%BA%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>crontab命令常见于<a href="https://baike.baidu.com/item/Unix" target="_blank" rel="noopener">Unix</a>和<a href="https://baike.baidu.com/item/%E7%B1%BBUnix" target="_blank" rel="noopener">类Unix</a>的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于”crontab”文件中，以供之后读取和执行。</p><p>cron是一个linux下 的定时执行工具，可以在无需人工干预的情况下运行作业。<br><code>service crond start    //启动服务</code><br><code>service crond stop     //关闭服务</code><br><code>service crond restart  //重启服务</code><br><code>service crond reload   //重新载入配置</code><br><code>service crond status   //查看服务状态</code></p><p>在crontab文件中如何输入需要执行的命令和时间。该文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令。<br>每个域之间使用空格或者制表符分隔。格式如下：<br><code>minute hour day-of-month month-of-year day-of-week commands</code><br>合法值 00-59 00-23 01-31 01-12 0-6 (0代表周日)</p><p><span style="color: #ff0000;">除了数字还有几个个特殊的符号就是”*”、”/“和”-“、”,”，*代表所有的取值范围内的数字，”/“代表每的意思,”/5”表示每5个单位，”-“代表从某个数字到某个数字,”,”分开几个离散的数字。</span></p><p>crontab -l 在标准输出上显示当前的crontab。<br>-r 删除当前的crontab文件。<br>-e 使用VISUAL或者EDITOR环境变量所指的编辑器编辑当前的crontab文件。当结束编辑离开时，编辑后的文件将自动安装。</p><p><span style="color: #ff0000;">需要注意的是同同一用户默认只有一个crontab任务，例如root用户每次新建一个crontab任务都会覆盖之前的任务。</span></p><p>例子：</p><p><code>vi test.cron ###创建一个cron文件</code></p><p>并向该文件中写入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 8 * * * echo "good morning "&gt;&gt;test.txt ###表示每天早晨8点向test.txt中插入一条"good morning"</span><br><span class="line"></span><br><span class="line">0 8 1,3,5 * 1-5 echo"good morning" &gt;&gt; test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##表示每年的1月3月5月中每周一到周五的早晨8点向test.txt中插入一条"good morning"</span></span></span><br></pre></td></tr></table></figure><p>使用<code>crontab test.cron</code>  即可启动该命令文件，到达指定时间系统将会自动执行文件中的命令。</p><p>问题：</p><p>综上所述，crontab 命令固然好用，但是执行任务的时间是死的，每天都是同一个时间执行任务，在做某些需要随机时间的特殊任务时，就显得没那么好用了。</p><p>所以，如果需要随机时间，就要用的shell脚本了。</p><p>首先创建一个shell脚本，test.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo "good morning" &gt;&gt; test.txt ###向test.txt中插入一条"good morning"</span><br><span class="line"></span><br><span class="line">r=$(($RANDOM%10)) ###随机生成一个10以内的随机数</span><br><span class="line">rm -f test.cron                ###删除以前的命令文件</span><br><span class="line">echo $[r]" 8 * * * ./test.sh" &gt;&gt; test.cron #创建并将任务写入cron文件</span><br><span class="line">chmod 777 test.sh  ###给予shell脚本最高执行权限</span><br><span class="line">crontab test.cron    ###启动cron任务文件，用于定时自动执行</span><br></pre></td></tr></table></figure><p><span style="color: #ff0000;">当然，该脚本必须在写完后手动执行一次，以后才会按时自动执行</span></p><p>命令:</p><p><code>[code]chmod 777 test.sh</code></p><p><code>./test.sh[/code]</code></p><p><span style="color: #ff0000;">原理：</span></p><p>将随机生成的数字作为时间（在这里是作为分钟）写入cron文件，并通过按时执行shell脚本来将”good morning”插入到test.txt中，</p><p>由于该任务的时间即分钟是10以内的随机数，所以每次执行任务的时间是每天早晨8：00-8：09之间的随机时间，</p><p>通过这种方式就可以设置随机时间执行任务了。</p><p>&nbsp;</p><p>如有错误，还请大佬多多包涵，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装screen命令</title>
      <link href="/passages/Linux%E5%AE%89%E8%A3%85screen%E5%91%BD%E4%BB%A4/"/>
      <url>/passages/Linux%E5%AE%89%E8%A3%85screen%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>screen对于不支持SSH的虚拟主机没有作用，但是对于vps来说那可是用处大大的。<br>不知道朋友们有没有在配置vps环境的时候出现突然中断或者要离开但是还没有配置完成的情况呢？</p><p>我遇到很多回，往往已经快配置完成的时候出现短线等情况，那就要从头再安装配置，很是麻烦，有时要连续重新安装好几次系统才可以完成。<br>现在有了screen命令就不用为此烦恼了。</p><p><strong>screen命令是什么？</strong><br>Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。<br><strong>如何安装screen命令呢？</strong><br>Centos执行:<br>yum install screen<br>Debian/Ubuntu执行:<br>apt-get install screen</p><p><strong>怎么使用screen命令？</strong><br>1、创建一个screen会话：<br><code>screen -S abc</code><br>abc为创建会话的名称</p><p>2、创建好以后就可以正常安装和配置vps环境，如怕中途短线或者要离开，马上就可以使用<br>快捷键<strong>Ctrl+a d(即按住Ctrl，依次再按a,d)</strong>来保存这个会话窗口<br>当然程序还在自动进行不会关闭。</p><p>3、需要恢复会话的时候就需要执行<br><code>screen -r abc</code></p><p>如果在恢复会话的时候忘记了或者没有设定会话名称我们就要执行：<br><code>screen -ls</code></p><p>他会列出你所有的会话列表，然后使用：<br><code>screen -r 会话名称</code><br>来恢复会话窗口。</p><p>4、关闭screen的会话<br><code>exit</code><br>会提示：[screen is terminating]，表示已经成功退出screen会话。</p><p>5、screen命令常用的一些快捷键：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+a c ：在当前screen会话中创建窗口</span><br><span class="line">Ctrl+a w ：窗口列表</span><br><span class="line">Ctrl+a n ：下一个窗口</span><br><span class="line">Ctrl+a p ：上一个窗口</span><br><span class="line">Ctrl+a 0-9 ：在第0个窗口和第9个窗口之间切换</span><br></pre></td></tr></table></figure><p>在此记录以便查阅.</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript实现图片上传预览</title>
      <link href="/passages/javascript%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E9%A2%84%E8%A7%88/"/>
      <url>/passages/javascript%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E9%A2%84%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Required meta tags --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">viewimg</span>(<span class="params">file</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(file.files&amp;&amp;file.files[<span class="number">0</span>])<span class="comment">//当文件存在</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript"><span class="keyword">var</span> img=<span class="built_in">document</span>.getElementById(<span class="string">"image1"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> reader=<span class="keyword">new</span> FileReader();<span class="comment">//新建文件读写器</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//成功读取文件后，把结果赋予img</span></span></span><br><span class="line"><span class="javascript">reader.onload=<span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</span></span><br><span class="line">img.src=evt.target.result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">reader.readAsDataURL(file.files[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"advimg"</span>&gt;</span>广告图片<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"image1"</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">width</span>=<span class="string">"360"</span> <span class="attr">height</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当选中文件，将文件传给viewimg方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"advimg"</span> <span class="attr">name</span>=<span class="string">"advimg"</span> <span class="attr">onchange</span>=<span class="string">"viewimg(this)"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记（三）Docker常用命令</title>
      <link href="/passages/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/passages/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="docker常用命令："><a href="#docker常用命令：" class="headerlink" title="docker常用命令："></a>docker常用命令：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名:TAG   从仓库拉取某镜像</span><br><span class="line"></span><br><span class="line">docker run 镜像名:TAG    运行某个镜像</span><br><span class="line"></span><br><span class="line">Ctrl+p+q    在容器中使用此命令可退出容器（保留容器进程）</span><br><span class="line"></span><br><span class="line">exit   在容器中使用此命令可退出容器（留容也会停止运行）</span><br><span class="line"></span><br><span class="line">docker kill 容器id   此命令可以停止指定容器的运行</span><br><span class="line"></span><br><span class="line">docker ps 查看当前正在运行的容器</span><br><span class="line"></span><br><span class="line">docker ps -a 查看所有容器的状态</span><br><span class="line"></span><br><span class="line">docker start/stop id/name 启动/停止某个容器</span><br><span class="line"></span><br><span class="line">docker attach 容器id 进入某个容器</span><br><span class="line"></span><br><span class="line">docker exec -it id 启动一个伪终端以交互式的方式进入某个容器</span><br><span class="line"></span><br><span class="line">docker images 查看本地镜像</span><br><span class="line">docker rm id/name 删除某个容器</span><br><span class="line">docker rmi id/name 删除某个镜像</span><br></pre></td></tr></table></figure><h3 id="docker-pull-镜像名-TAG-详解"><a href="#docker-pull-镜像名-TAG-详解" class="headerlink" title="docker pull 镜像名:TAG   详解:"></a>docker pull 镜像名:TAG   详解:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat:8.5</span><br><span class="line"><span class="meta">#</span><span class="bash">如果不指定:TAG则默认拉取最新版本</span></span><br></pre></td></tr></table></figure><p><span style="color: #ff6600;">执行结果：</span></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/136bfbcf6e143ca71a2c3ec52b266b0d.png" alt="1.png"></p><p><span style="color: #ff6600;">查看本地镜像：</span></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/4e15c07d8717536a98a41367e6e4f3e7.png" alt="2.png"></p><h4 id="docker-run-镜像名-TAG-详解："><a href="#docker-run-镜像名-TAG-详解：" class="headerlink" title="docker run 镜像名:TAG    详解："></a>docker run 镜像名:TAG    详解：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 1234:8080 -name MyTomcat tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#可选参数## </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">-it 代表以启动一个伪终端交互式的方式运行镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-p  端口映射，将宿主机的1234端口（可指定其他）映射到tomcat的8080端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d  以守护进程的方式运行，即后台运行，不启动交互界面</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--name 为容器命名，如不指定该参数，系统将默认为其命名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#&lt;span style="color: #ff6600;"&gt;注：&lt;/span&gt;镜像只是一个模板，每运行一次镜像后将产生一个容器，即容器是镜像运行后的产物</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#例如Windows镜像安装之后成为系统，修改系统文件并不影响Windows镜像，并且Windows镜像可多次使用</span></span></span><br></pre></td></tr></table></figure><p><span style="color: #ff6600;">以上代码运行结果：</span></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d289d0f25c97176091839e1a5c12de35.png" alt="3.png"></p><p>此时访问<span style="color: #ff6600;">localhost:1234</span>便可以看到<span style="color: #ff6600;">tomcat</span>欢迎页：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/b3102d20fa30ede621a66551e734d05d.png" alt="4.png"></p><p>此时说明启动tomcat成功！</p><p><span style="color: #ff6600;">查看正在运行中的容器（docker ps）：</span></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/ba4971a08b21b50d7d1324c06bd303fb.png" alt="5.png"></p><h3 id="docker-attach-容器id-详解："><a href="#docker-attach-容器id-详解：" class="headerlink" title="docker attach 容器id  详解："></a>docker attach 容器id  详解：</h3><p>该命令可以再次进入为停止的容器，如使用<span style="color: #ff6600;">Ctrl+p+q</span> 退出的容器</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/335a2c84b57ff90565a80f3f13309cd0.png" alt="Snipaste_2018-09-12_22-13-54.png"></p><p><span style="color: #ff6600;">注：因为进入的是tomcat，所以只会有一个光标不停闪动，或者只有tomcat日志输出，若进入的是docker版的centos系统中，</span><span style="color: #ff6600;">将会进入到该centos系统的默认路径下。</span></p><h3 id="docker-kill-容器id-详解："><a href="#docker-kill-容器id-详解：" class="headerlink" title="docker kill 容器id 详解："></a>docker kill 容器id 详解：</h3><p>执行命令后，指定容器的进程将会被停止</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/9d2c674e099e08e303ed22fdb3537cf9.png" alt="7.png"></p><h3 id="docker-ps-a-详解："><a href="#docker-ps-a-详解：" class="headerlink" title="docker ps -a 详解："></a><span style="color: #333333;">docker ps -a 详解：</span></h3><p>该命令可以查询出运行过的容器</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/f2d166a0f76be38d85fbb2d090069398.png" alt="8.png"></p><h3 id="docker-start-stop-id-name-详解："><a href="#docker-start-stop-id-name-详解：" class="headerlink" title="docker start/stop id/name 详解："></a>docker start/stop id/name 详解：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start MyTomcat #启动刚才停止的tomcat容器</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d2e086937ce1909ca564b11962b5592b.png" alt="9.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop MyTomcat #停止刚才启动的tomcat容器</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/cc66f716211f2cdc122f2fa15cc70175.png" alt="10.png"></p><h3 id="docker-rm-容器id-name-详解："><a href="#docker-rm-容器id-name-详解：" class="headerlink" title="docker rm 容器id/name 详解："></a>docker rm 容器id/name 详解：</h3><p>该命令可以删除指定容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm MyTomcat #删除名字为MyTomcat的容器</span><br></pre></td></tr></table></figure><p>!<img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/da8cf517303152fa439e4025d3d217f2.png" alt="11.png"></p><h3 id="docker-rmi-id-name-删除某个镜像-详解："><a href="#docker-rmi-id-name-删除某个镜像-详解：" class="headerlink" title="docker rmi id/name 删除某个镜像  详解："></a>docker rmi id/name 删除某个镜像  详解：</h3><p>该命令可以删除指定镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi hello-world:TAG #不加TAG表示删除最新版</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#可选参数##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">-f 表示强制删除</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/d229a9f3068e8ca887b7f9904458b293.png" alt="12.png"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记（二）Docker(V18.03)安装配置</title>
      <link href="/passages/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89Docker-V18-03-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/passages/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89Docker-V18-03-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="OS要求"><a href="#OS要求" class="headerlink" title="OS要求"></a>OS要求</h3><p>要安装Docker CE，您需要CentOS 7及以上版本。</p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>较旧版本的Docker被称为<code>docker</code>或<code>docker-engine</code>。如果已安装这些，请卸载它们以及相关的依赖项。代码如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line">          docker-client \</span><br><span class="line">          docker-client-latest \</span><br><span class="line">          docker-common \</span><br><span class="line">          docker-latest \</span><br><span class="line">          docker-latest-logrotate \</span><br><span class="line">          docker-logrotate \</span><br><span class="line">          docker-selinux \</span><br><span class="line">          docker-engine-selinux \</span><br><span class="line">          docker-engine`</span><br><span class="line">注意 "\"为shell脚本的连接符，同java的"+"</span><br></pre></td></tr></table></figure><p><span style="color: #ff6600;">如果系统未安装过docker，则提示如下</span>：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/a55ec63c0fc0581d66a717ca235d3cbf.jpg" alt="1.jpg"></p><h2 id="安装Docker-CE（社区版，免费）"><a href="#安装Docker-CE（社区版，免费）" class="headerlink" title="安装Docker CE（社区版，免费）"></a>安装Docker CE（社区版，免费）</h2><h3 id="使用存储库安装"><a href="#使用存储库安装" class="headerlink" title="使用存储库安装"></a>使用存储库安装</h3><p>在新主机上首次安装Docker CE之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。</p><h4 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h4><h4 id="1-安装所需的包。yum-utils提供了yum-config-manager-，并且devicemapper存储驱动程序依赖device-mapper-persistent-data和lvm2。"><a href="#1-安装所需的包。yum-utils提供了yum-config-manager-，并且devicemapper存储驱动程序依赖device-mapper-persistent-data和lvm2。" class="headerlink" title="1.安装所需的包。yum-utils提供了yum-config-manager ，并且devicemapper存储驱动程序依赖device-mapper-persistent-data和lvm2。"></a>1.安装所需的包。<code>yum-utils</code>提供了<code>yum-config-manager</code> ，并且<code>devicemapper</code>存储驱动程序依赖<code>device-mapper-persistent-data</code>和<code>lvm2</code>。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils \</span></span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><p><span style="color: #ff6600;">执行结果</span>：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/19cb985de4bdb509cfbfe52b1159ff3c.jpg" alt="2.jpg"></p><h4 id="2-使用以下命令设置稳定存储库。即使你还想从edge或test存储库安装构建，你仍然需要稳定的存储库。"><a href="#2-使用以下命令设置稳定存储库。即使你还想从edge或test存储库安装构建，你仍然需要稳定的存储库。" class="headerlink" title="2.使用以下命令设置稳定存储库。即使你还想从edge或test存储库安装构建，你仍然需要稳定的存储库。"></a>2.使用以下命令设置<strong>稳定</strong>存储库。即使你还想从<strong>edge</strong>或<strong>test</strong>存储库安装构建，你仍然需要<strong>稳定的</strong>存储库。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --add -repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><p><span style="color: #ff6600;">执行结果</span>：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/6f0f4402511cb1b51db93496510c2783.jpg" alt="3.jpg"></p><h4 id="3-（可选）启用edge和test存储库。这些存储库包含在docker-repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。"><a href="#3-（可选）启用edge和test存储库。这些存储库包含在docker-repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。" class="headerlink" title="3.（可选）启用edge和test存储库。这些存储库包含在docker.repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。"></a>3.（可选）启用<strong>edge</strong>和<strong>test</strong>存储库。这些存储库包含在<code>docker.repo</code>上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-edge</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span></span><br></pre></td></tr></table></figure><h4 id="您可以通过运行带有标志的命令来禁用edge或test存储库-。要重新启用它，请使用该标志。以下命令禁用edge存储库。yum-config-manager-disable-enable"><a href="#您可以通过运行带有标志的命令来禁用edge或test存储库-。要重新启用它，请使用该标志。以下命令禁用edge存储库。yum-config-manager-disable-enable" class="headerlink" title="您可以通过运行带有标志的命令来禁用edge或test存储库 。要重新启用它，请使用该标志。以下命令禁用edge存储库。yum-config-manager``--disable``--enable"></a>您可以通过运行带有标志的命令来禁用<strong>edge</strong>或<strong>test</strong>存储库 。要重新启用它，请使用该标志。以下命令禁用<strong>edge</strong>存储库。<code>yum-config-manager``--disable``--enable</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --<span class="built_in">disable</span> docker-ce-edge</span></span><br></pre></td></tr></table></figure><h4 id="注意：从Docker-17-06开始，稳定版本也会被推送到边缘并测试存储库。-安装DOCKER-CE"><a href="#注意：从Docker-17-06开始，稳定版本也会被推送到边缘并测试存储库。-安装DOCKER-CE" class="headerlink" title="注意：从Docker 17.06开始，稳定版本也会被推送到边缘并测试存储库。 安装DOCKER CE"></a><span style="color: #ff6600;"><strong>注意</strong></span>：从Docker 17.06开始，稳定版本也会被推送到<strong>边缘</strong>并<strong>测试</strong>存储库。 安装DOCKER CE</h4><ol><li><p>安装_最新版本_的Docker CE，或转到下一步安装特定版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="如果提示接受GPG密钥，请验证指纹是否匹配"><a href="#如果提示接受GPG密钥，请验证指纹是否匹配" class="headerlink" title="如果提示接受GPG密钥，请验证指纹是否匹配"></a><span style="color: #ff6600;">如果提示接受GPG密钥，请验证指纹是否匹配</span></h5><h5 id="060A-61C5-1B55-8A7F-742B-77AA-C52F-EB6B-621E-9F35，"><a href="#060A-61C5-1B55-8A7F-742B-77AA-C52F-EB6B-621E-9F35，" class="headerlink" title="060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35，"></a><span style="color: #ff6600;"><code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>，</span></h5><h5 id="如果匹配-，则接受它。"><a href="#如果匹配-，则接受它。" class="headerlink" title="如果匹配 ，则接受它。"></a><span style="color: #ff6600;">如果匹配 ，则接受它。</span></h5><p><span style="color: #ff6600;">此处确认无误，选择y确定</span>：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e9e728e4a309c8d9e6e67638a51636ac.jpg" alt="4.jpg">     </p><p><span style="color: #ff6600;">指纹比对正确，选择y继续</span>：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e3dca310a88f200ed072a9e50f764edc.jpg" alt="5.jpg"></p><p><span style="color: #ff6600;">最终结果</span>：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/24cd06e2ed9927862d4231b155107d99.jpg" alt="6.jpg"></p><p><span style="color: #333333;"> 2.您还可以使用</span><code>$ sudo yum install docker-ce-&lt;版本号&gt;</code>来安装指定版本的docker，例如安装17.06版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce-&lt;17.06&gt;</span></span><br></pre></td></tr></table></figure><p>3.启动Docker。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure><p><span style="color: #ff6600;">注意：<span style="color: #333333;">docker启动后不会有任何输出</span></span></p><p>4.<code>docker</code>通过运行<code>hello-world</code> 映像验证是否已正确安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure><p><span style="color: #ff6600;">执行命令后如果你看到如下图所示，那么恭喜，docker安装成功！</span></p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/9e818831fbf2e690c7d5728a5d5c8431.jpg" alt="7.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记（一）Docker入门简介</title>
      <link href="/passages/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89Docker%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
      <url>/passages/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89Docker%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个基于GO语言开发的开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的<a href="http://baike.baidu.com/view/1634.htm" target="_blank" rel="noopener">Linux</a>机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架或包括系统。</p><p>Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p><p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p><p>在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>下面对比了Docker 和传统虚拟化（KVM、XEN等）方式的不同之处，容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件的基础上，虚拟出自己的系统，再在系统上部署相关的APP应用。</p><p>下图为传统虚拟化方案：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/c7fc0967984cda16932284cb51c0edc5.png" alt="6-300x114.png"></p><p>如下为Docker虚拟化方案：</p><p><img src="https://raw.githubusercontent.com/xhmily/imgbed/master/images/2019/07/07/e8d60258be6b5bfb5780e5cf22959ff2.png" alt="7-300x85.png"></p><p>Docker虚拟化有三个概念需要理解，分别镜像、容器、仓库。</p><ul><li>镜像：docker的镜像其实就是模板，跟我们常见的ISO镜像类似，是一个样板。</li><li>容器：使用镜像常见的应用或者系统，我们称之为一个容器。</li><li>仓库：仓库是存放镜像的地方，分为公开仓库（Public）和私有仓库（Private）两种形式。</li></ul><h2 id="Docker虚拟化特点"><a href="#Docker虚拟化特点" class="headerlink" title="Docker虚拟化特点"></a>Docker虚拟化特点</h2><p>跟传统VM比较具有如下优点：</p><p>1)  操作启动快</p><p>运行时的性能可以获取极大提升，管理操作（启动，停止，开始，重启等等） 都是以秒或毫秒为单位的。</p><p>2)  轻量级虚拟化</p><p>你会拥有足够的”操作系统”，仅需添加或减小镜像即可。在一台服务器上可以布署100~1000个Containers容器。但是传统虚拟化，你虚拟10-20个虚拟机就不错了。</p><p>3)  开源免费</p><p>开源的，免费的，低成本的。由现代Linux内核支持并驱动。注* 轻量的Container必定可以在一个物理机上开启更多”容器”，注定比VMs要便宜。</p><p>4)  前景及云支持</p><p>正在越来越受欢迎，包括各大主流公司都在推动docker的快速发展，性能有很大的优势。</p><p>跟传统VM比较具有如下缺点：</p><p>1)  目前知道的人比较少</p><p>2)  相关的技术资料欠缺</p><p>3)  Go语言还没完全成熟</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
